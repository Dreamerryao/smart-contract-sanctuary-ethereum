// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IPrintable {
    function isPrintable(uint c) external view returns (bool);

    function getIthPrintable(uint c) external view returns (uint);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {IPrintable} from "../interfaces/IPrintable.sol";

contract Printable is IPrintable {
    uint[] single = [173,888,889,907,909,930,1328,1367,1368,1419,1420,1424,1564,1565,1757,1806,1807,1867,1868,2043,2044,2094,2095,2111,2140,2141,2143,2229,2274,2436,2445,2446,2449,2450,2473,2481,2490,2491,2501,2502,2505,2506,2526,2532,2533,2559,2560,2564,2577,2578,2601,2609,2612,2615,2618,2619,2621,2633,2634,2653,2692,2702,2706,2729,2737,2740,2746,2747,2758,2762,2766,2767,2788,2789,2816,2820,2829,2830,2833,2834,2857,2865,2868,2874,2875,2885,2886,2889,2890,2910,2916,2917,2948,2961,2971,2973,3017,3022,3023,3085,3089,3113,3141,3145,3159,3172,3173,3213,3217,3241,3252,3258,3259,3269,3273,3295,3300,3301,3312,3341,3345,3397,3401,3428,3429,3456,3460,3506,3516,3518,3519,3541,3543,3568,3569,3715,3717,3723,3748,3750,3774,3775,3781,3783,3790,3791,3802,3803,3912,3992,4029,4045,4294,4302,4303,4681,4686,4687,4695,4697,4702,4703,4745,4750,4751,4785,4790,4791,4799,4801,4806,4807,4823,4881,4886,4887,4955,4956,5110,5111,5118,5119,5760,5901,5997,6001,6110,6111,6158,6159,6431,6510,6511,6684,6685,6751,6781,6782,6830,6831,7355,7356,7674,7958,7959,7966,7967,8006,8007,8014,8015,8024,8026,8028,8030,8062,8063,8117,8133,8148,8149,8156,8176,8177,8181,8306,8307,8335,11124,11125,11158,11311,11359,11558,11566,11567,11687,11695,11703,11711,11719,11727,11735,11743,11930,12352,12439,12440,12592,12687,12831,42944,42945,43470,43519,43598,43599,43610,43611,43783,43784,43791,43792,43815,43823,44014,44015,64110,64111,64311,64317,64319,64322,64325,64912,64913,65022,65023,65107,65127,65141,65480,65481,65488,65489,65496,65497,65511,65534,65535,65548,65575,65595,65598,65614,65615,65935,66462,66718,66719,67590,67591,67593,67638,67645,67646,67670,67827,68048,68049,68100,68116,68120,68150,68151,68438,68439,69247,69290,69294,69295,69821,69941,70112,70162,70279,70281,70286,70302,70404,70413,70414,70417,70418,70441,70449,70452,70458,70469,70470,70473,70474,70478,70479,70500,70501,70748,71094,71095,71451,71452,71943,71944,71946,71947,71956,71959,71990,71993,71994,72104,72105,72152,72153,72713,72759,72848,72849,72872,72967,72970,73019,73022,73062,73065,73103,73106,74863,92767,92910,92911,93018,93026,113818,113819,119079,119080,119893,119965,119968,119969,119971,119972,119975,119976,119981,119994,119996,120004,120070,120075,120076,120085,120093,120122,120127,120133,120145,120486,120487,120780,120781,121504,122887,122905,122906,122914,122917,123198,123199,125125,125126,126468,126496,126499,126501,126502,126504,126515,126520,126522,126536,126538,126540,126544,126547,126549,126550,126552,126554,126556,126558,126560,126563,126565,126566,126571,126579,126584,126589,126591,126602,126628,126634,127151,127152,127168,127184,129198,129199,129401,129484,129646,129647,129939,178206,178207];
    uint[] rangesFirst = [127,896,1480,1515,1525,1970,2155,2248,2483,2511,2520,2571,2627,2638,2642,2655,2679,2769,2802,2894,2904,2936,2955,2966,2976,2981,2987,3002,3011,3025,3032,3067,3130,3150,3163,3184,3278,3287,3315,3408,3479,3527,3531,3552,3573,3643,3676,3808,3949,4059,4296,4989,5018,5789,5881,5909,5943,5972,6004,6122,6138,6170,6265,6315,6390,6444,6460,6465,6517,6572,6602,6619,6794,6810,6849,6988,7037,7156,7224,7242,7305,7368,7419,8191,8232,8287,8349,8384,8433,8588,9255,9291,11508,11560,11624,11633,11671,11859,12020,12246,12284,12544,12772,40957,42125,42183,42540,42744,42955,43053,43066,43128,43206,43226,43348,43389,43482,43575,43715,43767,43799,43884,44026,55204,55239,55292,64218,64263,64280,64450,64832,64968,65050,65132,65277,65471,65501,65519,65630,65787,65795,65844,65949,65953,66046,66205,66257,66300,66340,66379,66427,66500,66518,66730,66772,66812,66856,66916,66928,67383,67414,67432,67641,67743,67760,67830,67868,67898,67904,68024,68103,68155,68169,68185,68256,68327,68343,68406,68467,68498,68509,68528,68681,68787,68851,68904,68922,69298,69416,69466,69580,69623,69710,69744,69826,69865,69882,69960,70007,70133,70207,70314,70379,70394,70481,70488,70509,70517,70754,70856,70874,71134,71237,71258,71277,71353,71370,71468,71488,71740,71923,72007,72026,72165,72264,72355,72441,72774,72813,72887,73015,73032,73050,73113,73130,73465,73649,73714,74650,74869,75076,78895,83527,92729,92778,92784,92918,92998,93048,93072,93851,94027,94088,94112,94181,94194,100344,101590,101641,110879,110931,110952,111356,113771,113789,113801,113824,119030,119155,119273,119366,119540,119639,119673,120135,121484,121520,122923,123181,123210,123216,123642,123648,125143,125260,125274,125280,126133,126270,126524,126531,126620,126652,126706,127020,127124,127222,127406,127491,127548,127561,127570,127590,128728,128749,128765,128884,128985,129004,129036,129096,129114,129160,129202,129620,129653,129659,129671,129705,129719,129731,129751,129995,130042,173790,177973,183970,191457,195102,201547,918000];
    uint[] rangesSecond = [160,899,1487,1518,1541,1983,2207,2258,2485,2518,2523,2574,2630,2640,2648,2661,2688,2783,2808,2900,2907,2945,2957,2968,2978,2983,2989,3005,3013,3030,3045,3071,3132,3156,3167,3190,3284,3293,3327,3411,3481,3529,3534,3557,3584,3646,3712,3839,3952,4095,4300,4991,5023,5791,5887,5919,5951,5983,6015,6127,6143,6175,6271,6319,6399,6447,6463,6467,6527,6575,6607,6621,6799,6815,6911,6991,7039,7163,7226,7244,7311,7375,7423,8207,8239,8303,8351,8399,8447,8591,9279,9311,11512,11564,11630,11646,11679,11903,12031,12271,12288,12548,12783,40959,42127,42191,42559,42751,42996,43055,43071,43135,43213,43231,43358,43391,43485,43583,43738,43776,43807,43887,44031,55215,55242,63743,64255,64274,64284,64466,64847,65007,65055,65135,65280,65473,65503,65531,65663,65791,65798,65846,65951,65999,66175,66207,66271,66303,66348,66383,66431,66503,66559,66735,66775,66815,66863,66926,67071,67391,67423,67583,67643,67750,67807,67834,67870,67902,67967,68027,68107,68158,68175,68191,68287,68330,68351,68408,68471,68504,68520,68607,68735,68799,68857,68911,69215,69375,69423,69551,69599,69631,69713,69758,69839,69871,69887,69967,70015,70143,70271,70319,70383,70399,70486,70492,70511,70655,70783,70863,71039,71167,71247,71263,71295,71359,71423,71471,71679,71839,71934,72015,72095,72191,72271,72383,72703,72783,72815,72959,73017,73039,73055,73119,73439,73647,73663,73726,74751,74879,77823,82943,92159,92735,92781,92879,92927,93007,93052,93759,93951,94030,94094,94175,94191,94207,100351,101631,110591,110927,110947,110959,113663,113775,113791,113807,118783,119039,119162,119295,119519,119551,119647,119807,120137,121498,122879,123135,123183,123213,123583,123646,124927,125183,125263,125277,126064,126208,126463,126529,126534,126624,126703,126975,127023,127135,127231,127461,127503,127551,127567,127583,127743,128735,128751,128767,128895,128991,129023,129039,129103,129119,129167,129279,129631,129655,129663,129679,129711,129727,129743,129791,130031,131071,173823,177983,183983,194559,196607,917759,1114111];

    function isPrintable(uint c) external view returns (bool) {
        if (c < 32) return false;
        if (c > 0x110000) return false;

        for (uint i = 0; i < single.length; i++) {
            if (single[i] > c) break;
            if (single[i] == c) return false;
        }
        for (uint i = 0; i < rangesFirst.length; i++) {
            if (rangesFirst[i] > c) break;
            if (rangesFirst[i] <= c && c <= rangesSecond[i]) return false;
        }
        return true;
    }

    function getIthPrintable(uint c) external view returns (uint) {
        uint cc = c % 143680;
        uint i = 0;
        uint j = 0;
        uint cur = 32;
        while (cc > 0) {
            uint toSingle = i < single.length ? single[i] - cur : 0xfffffff;
            uint toRange = j < rangesFirst.length ? rangesFirst[j] - cur : 0xfffffff;
            if (toSingle < toRange && toSingle > cc) {
                return cur + cc;
            }
            if (toRange < toSingle && toRange > cc) {
                return cur + cc;
            }
            if (toSingle < toRange) {
                cc -= toSingle;
                cur = single[i] + 1;
                i++;
            } else if (toSingle > toRange) {
                cc -= toRange;
                cur = rangesSecond[j] + 1;
                j++;
            } else {
                revert();
            }
        }
        return cur;
    }
}