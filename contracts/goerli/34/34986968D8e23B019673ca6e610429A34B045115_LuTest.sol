// SPDX-License-Identifier: MIT

/*
 * Lu test
 * 
 *
 * Created by Isamu Arimoto (@isamu)
 */

pragma solidity ^0.8.6;

import "randomizer.sol/Randomizer.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "../packages/graphics/Path.sol";
import "../packages/graphics/SVG.sol";
import "hardhat/console.sol";

contract LuTest {
  using Strings for uint256;
  using Randomizer for Randomizer.Seed;
  using Vector for Vector.Struct;
  using Path for uint[];
  using SVG for SVG.Element;
  using TX for string;



      function parts_BG() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [4, 734, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x03\x00\x05\x48\x00\x09\x56\xfc\x08\x48\x03\x05\x5a";
          paths[1] = "\x4d\x80\xd0\x0f\x08\x61\x69\x55\x69\x00\x55\x00\x01\x45\xe6\x00\x05\x63\x83\x44\xf9\xfd\x53\x02\x7c\x43\xff\x85\x54\x02\x0b\x54\x03\x8e\x53\x08\xfa\x54\x01\xcb\x44\xf9\xc3\x44\xfa\xbe\x54\x0d\x7a\x44\xf1\x7d\x54\x03\x56\x80\x21\x63\x50\x49\x03\x55\x92\x00\x55\xdb\x03\x55\x1f\x02\x55\x41\x07\x55\x60\x02\x55\x1b\xfc\x54\x3c\xf5\x54\x57\xfa\x54\x36\x09\x55\x68\xfe\x54\x9e\xf8\x04\x61\x4b\x55\x4b\x00\x55\x00\x01\x55\x17\x01\x05\x63\x17\x55\x06\x30\x55\x0e\x4b\x55\x09\x38\x45\xf7\x73\x45\xef\xad\x45\xf7\x19\x55\x04\x34\x45\xfa\x4d\x45\xfe\x39\x55\x0a\x38\x55\x09\x73\x55\x04\x56\x80\x0a\x63\x40\xe8\x00\x55\x0b\x02\x45\xf3\x06\x05\x43\xe7\x88\x11\xdd\x88\x0e\xd0\x88\x0f\x5a\x00";
          paths[2] = "\x4d\x80\xff\x2c\x08\x63\xca\x54\x04\xd2\x54\x0d\x9d\x54\x03\xf6\x44\xfe\xe9\x44\xff\xdf\x44\xff\xe1\x54\x00\xc1\x44\xf8\xa6\x44\xfb\x70\x54\x10\xe9\x53\x07\x5d\x53\x09\xa4\x54\x00\x44\x54\x01\xe9\x53\x00\xde\x44\xff\xbc\x54\x00\x99\x54\x00\x76\x50\x10\x63\x50\x20\xff\x54\x41\xfc\x54\x60\xfb\x54\x32\xff\x54\x64\x01\x55\x98\x05\x55\x1b\x01\x55\x36\x06\x55\x53\x05\x05\x73\x38\x45\xfd\x53\x45\xfc\x63\x50\x21\xff\x54\x41\x03\x55\x62\x04\x55\x1d\x01\x55\x38\xfe\x54\x56\xfe\x54\x5c\x01\x55\xb7\xfc\x64\x13\xf9\x54\x15\xff\x54\x2a\x04\x55\x41\x01\x05\x61\x38\x66\x38\x00\x55\x00\x01\x55\x3f\x00\x05\x63\x1d\x55\x03\xfc\x54\x03\x17\x55\x03\x56\x80\x2c\x5a\x00";
          paths[3] = "\x4d\x80\x8e\x17\x08\x63\xe7\x44\xfc\xcc\x54\x06\xb3\x54\x02\xc6\x44\xf8\x8b\x54\x00\x53\x54\x09\xe5\x54\x04\xcc\x44\xfd\xb5\x44\xf7\x61\x50\x4b\x4b\x55\x00\x00\x55\x00\xe9\x44\xff\x63\x40\xca\x06\x45\x98\x12\x45\x62\x08\x45\xe5\xfc\x44\xc4\x02\x45\xa9\x06\x45\xe1\x05\x45\xbf\x00\x45\xa0\xfe\x04\x43\x92\x85\x21\x49\x85\x24\x00\x85\x21\x76\x50\x11\x63\x50\x22\xff\x54\x44\xff\x54\x67\x00\x55\x5c\x01\x55\xbc\x00\x65\x17\x00\x55\x8c\xff\x64\x13\x07\x65\xa3\xf7\x54\x1b\xfd\x54\x3a\x05\x55\x5a\x05\x55\x0a\x00\x55\x17\xff\x54\x21\x01\x55\x34\x09\x55\x2d\x01\x55\x63\xfd\x04\x68\x02\x05\x56\x1b\x08\x43\xc6\x88\x20\xc7\x88\x21\x8e\x88\x17\x5a\x00";
          fill[0] = "#66c5c8";
          fill[1] = "#ff87c5";
          fill[2] = "#ccd7c7";
          fill[3] = "#fff";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
      }
      function parts_BG_B() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [5, 722, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x80\x18\xf5\x06\x63\xdd\x44\xfe\x02\x45\xd5\x07\x45\xc5\x13\x45\xd9\x3c\x45\xc5\x58\x45\xa6\x0f\x45\xf5\x1e\x45\xe9\x30\x45\xe3\x0e\x45\xf1\x1d\x45\xe9\x32\x45\xe7\x10\x45\xf3\x21\x45\xec\x27\x45\xf3\x02\x55\x02\xff\x54\x16\xff\x54\x16\x43\x80\xec\x2a\x86\x36\x90\x86\x18\xf5\x06\x5a";
          paths[1] = "\x4d\x80\x34\x1c\x07\x63\xfa\x54\x04\xf9\x44\xfa\xf4\x44\xf6\x73\x40\xfa\xfd\x44\xf6\xf7\x04\x63\x07\x45\xe3\x17\x45\xc6\x2a\x45\xac\x15\x45\xe3\x32\x45\xc7\x52\x45\xb8\x61\x50\x40\x40\x55\x00\x00\x55\x01\x1a\x45\xea\x63\x50\x19\xfa\x54\x26\xe5\x54\x4c\xe3\x54\x01\x08\x55\x03\x12\x45\xff\x17\x05\x73\xc2\x54\x0f\x95\x54\x39\x63\x40\xdc\x0b\x45\xd0\x2e\x45\xb8\x46\x45\xf5\x0e\x45\xf0\x22\x45\xe8\x32\x45\xff\x08\x45\xfc\x01\x45\xfe\x09\x05\x53\x3b\x78\x17\x34\x78\x1c\x5a\x00";
          paths[2] = "\x4d\x80\x1f\xff\x06\x63\xf9\x54\x01\xf7\x44\xfe\xf2\x44\xf9\x0c\x45\xe8\x13\x45\xc4\x2d\x45\xb2\x36\x45\xb7\x7e\x45\x8a\xbe\x45\x7f\x06\x45\xff\x04\x55\x0a\x04\x55\x0f\xf6\x54\x08\xe9\x54\x0a\xdc\x54\x0d\xeb\x54\x02\xea\x54\x0e\xd8\x54\x16\xf1\x54\x04\xe7\x54\x13\xd6\x54\x1e\x43\x80\x56\x9b\x86\x34\xc9\x86\x1f\xff\x06\x5a";
          paths[3] = "\x4d\x50\x19\x4a\x05\x43\xef\x54\x4a\xff\x54\x0c\x25\x55\x23\x63\x50\x01\xe1\x54\x3b\xc9\x54\x3b\xf3\x54\x16\xf5\x54\x57\xf9\x54\x32\x12\x55\x0f\xf7\x54\x3d\xe8\x54\x4d\xf4\x04\x73\x00\x55\x1e\xeb\x54\x1d\x43\x50\xda\x5c\x55\x92\x79\x55\x84\x52\x05\x63\xf5\x54\x1d\xbe\x54\x23\xc2\x44\xfd\x43\x50\x3c\x7c\x55\x10\x4e\x55\x19\x4a\x05\x5a";
          paths[4] = "\x4d\x70\xb2\x13\x07\x63\xd6\x54\x00\xe6\x44\xc1\x0c\x45\xd9\x01\x45\xe1\x3b\x45\xc9\x3c\x45\xf3\x16\x45\xf5\x57\x45\xf9\x32\x55\x12\x0f\x45\xf7\x3d\x45\xe8\x4d\x45\xf4\x73\x50\x00\x1e\x45\xeb\x1d\x05\x63\x0f\x55\x23\xc6\x54\x3f\xb9\x54\x19\xf5\x54\x1d\xbe\x54\x23\xc2\x44\xfd\x43\x70\xd5\x45\x77\xa9\x17\x77\xb2\x13\x07\x5a";
          fill[0] = "#bbffa7";
          fill[1] = "#fbb19f";
          fill[2] = "#ffff8c";
          fill[3] = "#fffffa";
          fill[4] = "#fffffa";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
      }
      function parts_BG_Moon_board() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [23, 814, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x61\x50\x05\x48\xa6\x08\x56\x62\x08\x48\x61\x05\x5a";
          paths[1] = "\x4d\x70\xf7\x1c\x07\x61\xa9\x55\xa9\x00\x55\x00\x01\x45\xac\x2b\x05\x63\xf1\x54\x04\xe1\x54\x09\xd1\x54\x09\xdb\x54\x01\xb8\x44\xf3\x97\x44\xe3\xf9\x54\x0e\xee\x54\x19\xe6\x54\x27\xf2\x54\x1c\xe2\x54\x38\xd5\x54\x55\x25\x55\x11\x50\x55\x10\x77\x55\x09\x57\x45\xfa\xa8\x45\xc1\xc1\x45\x6c\x43\x70\xf8\x32\x77\xfc\x18\x77\xf7\x1c\x07\x5a";
          paths[2] = "\x4d\x60\xa7\x8f\x06\x63\xcf\x44\xf1\x9c\x44\xe6\x69\x44\xe2\xf9\x54\x15\xfc\x54\x2e\xfe\x54\x44\x02\x55\x42\x18\x55\x93\x4e\x55\xbc\x1a\x55\x24\x47\x55\x2f\x6d\x55\x43\x13\x45\xd3\x2d\x45\xaa\x42\x45\x7e\x43\x60\xd1\x10\x67\xb2\xd0\x66\xa7\x8f\x06\x5a";
          paths[3] = "\x4d\x60\xa4\x80\x06\x63\xff\x44\xa6\x1f\x45\x55\x7d\x45\x3d\x01\x45\xf2\x03\x45\xf1\xf0\x44\xf1\x61\x50\xfe\xfe\x55\x00\x00\x55\x00\xd5\x54\x04\x63\x40\xd4\x05\x45\xae\x1c\x45\x8c\x35\x05\x61\xa2\x55\xa2\x00\x55\x00\x00\x45\xc6\x3e\x55\xdc\xdc\x55\x00\x00\x55\x00\xda\x54\x4e\x63\x50\x19\x02\x55\x32\x06\x55\x4a\x0e\x55\x19\x03\x55\x30\x08\x55\x48\x0f\x05\x43\xa4\x66\x8b\xa4\x66\x86\xa4\x66\x80\x5a\x00";
          paths[4] = "\x4d\x50\xc9\x1c\x08\x6d\xe7\x54\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\x31\x55\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\xcf\x54\x00";
          paths[5] = "\x4d\x60\x4f\xe0\x07\x6d\xfa\x54\x00\x61\x50\x06\x06\x55\x00\x01\x55\x01\x0d\x55\x00\x61\x50\x06\x06\x55\x00\x01\x55\x01\xf3\x54\x00";
          paths[6] = "\x4d\x60\xf0\x3a\x08\x6d\xf4\x54\x00\x61\x50\x0c\x0c\x55\x00\x01\x55\x01\x17\x55\x00\x61\x50\x0c\x0c\x55\x00\x01\x55\x01\xe9\x54\x00";
          paths[7] = "\x4d\x70\x37\x0d\x08\x6d\xf8\x54\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\x10\x55\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\xf0\x54\x00";
          paths[8] = "\x4d\x80\x5a\x24\x08\x6d\xeb\x54\x00\x61\x50\x15\x15\x55\x00\x01\x55\x01\x2a\x55\x00\x61\x50\x15\x15\x55\x00\x01\x55\x01\xd6\x54\x00";
          paths[9] = "\x4d\x70\x8d\x4b\x07\x4c\x9d\x77\x9f\xca\x77\x85\xa3\x77\x3f\x8d\x77\x4b\x7a\x00";
          paths[10] = "\x4d\x70\x0a\x32\x07\x4c\xdf\x76\xbe\xae\x76\xb3\xfc\x76\x2b\x0a\x77\x32\x7a\x00";
          paths[11] = "\x4d\x60\x0a\xd7\x06\x4c\xba\x66\xc1\xc0\x66\xcf\x23\x76\x34\x0a\x66\xd7\x7a\x00";
          paths[12] = "\x4d\x60\x69\xe8\x05\x4c\xbb\x66\x16\xc9\x56\xfc\x9d\x56\xc7\x69\x56\xe8\x7a\x00";
          paths[13] = "\x4d\x60\x1c\x85\x06\x63\xfc\x44\xff\xf3\x54\x01\xf2\x44\xfb\x43\x60\x0f\x7c\x66\x25\x81\x66\x1c\x85\x06\x5a";
          paths[14] = "\x4d\x60\x3f\x8c\x06\x63\xfc\x44\xfd\xf4\x54\x01\xf2\x44\xfc\x43\x60\x31\x81\x66\x49\x87\x66\x3f\x8c\x06\x5a";
          paths[15] = "\x4d\x60\x60\x93\x06\x63\xfc\x44\xfe\xf4\x54\x01\xf3\x44\xfc\x53\x60\x6a\x8f\x66\x60\x93\x06\x5a";
          paths[16] = "\x4d\x60\x7f\x96\x06\x63\xfc\x54\x01\xf2\x44\xff\xf9\x44\xfb\x43\x60\x7b\x90\x66\x86\x92\x66\x7f\x96\x06\x5a";
          paths[17] = "\x4d\x60\x9f\x9b\x06\x63\xfd\x54\x00\xf6\x44\xfe\xf8\x44\xfa\x53\x60\xad\x9a\x66\x9f\x9b\x06\x5a";
          paths[18] = "\x4d\x60\xfc\x3d\x07\x63\xf9\x44\xff\x01\x45\xf3\x04\x45\xfa\x43\x60\xff\x39\x67\xff\x3d\x67\xfc\x3d\x07\x5a";
          paths[19] = "\x4d\x60\xf2\x56\x07\x63\xfa\x44\xff\x00\x45\xf0\x05\x45\xf3\x43\x60\xf8\x4c\x67\xf4\x56\x67\xf2\x56\x07\x5a";
          paths[20] = "\x4d\x60\xe3\x73\x07\x63\xf9\x44\xfe\x03\x45\xf5\x05\x45\xf3\x43\x60\xf2\x64\x67\xe6\x71\x67\xe3\x73\x07\x5a";
          paths[21] = "\x4d\x60\xdb\x8e\x07\x63\xfa\x44\xff\x00\x45\xf8\x01\x45\xf4\x43\x60\xe3\x7b\x67\xdf\x8d\x67\xdb\x8e\x07\x5a";
          paths[22] = "\x4d\x60\xd1\xa7\x07\x63\xfb\x44\xff\xff\x44\xf9\x01\x45\xf8\x43\x60\xd7\x9e\x67\xd6\xa7\x67\xd1\xa7\x07\x5a\x6d\x40\xff\xfb\x04\x5a";
          fill[0] = "#6678a7";
          fill[1] = "#fff97c";
          fill[2] = "#daff7f";
          fill[3] = "#74f0cd";
          fill[4] = "#daff7f";
          fill[5] = "#daff7f";
          fill[6] = "#daff7f";
          fill[7] = "#daff7f";
          fill[8] = "#daff7f";
          fill[9] = "#f6dd6b";
          fill[10] = "#bee89c";
          fill[11] = "#c5df7f";
          fill[12] = "#c5e97f";
          fill[13] = "";
          fill[14] = "";
          fill[15] = "";
          fill[16] = "";
          fill[17] = "";
          fill[18] = "";
          fill[19] = "";
          fill[20] = "";
          fill[21] = "";
          fill[22] = "";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
          stroke[20] = 0;
          stroke[21] = 0;
          stroke[22] = 0;
      }
      function parts_BG_Moon_board_R() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [23, 814, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x61\x50\x05\x48\xa6\x08\x56\x62\x08\x48\x61\x05\x5a";
          paths[1] = "\x4d\x60\xa4\x80\x06\x63\xff\x44\xa6\x1f\x45\x55\x7d\x45\x3d\x01\x45\xf2\x03\x45\xf1\xf0\x44\xf1\x61\x50\xfe\xfe\x55\x00\x00\x55\x00\xd5\x54\x04\x63\x40\xd4\x05\x45\xae\x1c\x45\x8c\x35\x05\x61\xa2\x55\xa2\x00\x55\x00\x00\x45\xc6\x3e\x55\xdc\xdc\x55\x00\x00\x55\x00\xda\x54\x4e\x63\x50\x19\x02\x55\x32\x06\x55\x4a\x0e\x55\x19\x03\x55\x30\x08\x55\x48\x0f\x05\x43\xa4\x66\x8b\xa4\x66\x86\xa4\x66\x80\x5a\x00";
          paths[2] = "\x4d\x70\xf7\x1c\x07\x63\xea\x54\x15\xcc\x54\x25\xac\x54\x2b\xf1\x54\x04\xe1\x54\x09\xd1\x54\x09\xdb\x54\x01\xb8\x44\xf3\x97\x44\xe3\xf9\x54\x0e\xee\x54\x19\xe6\x54\x27\xf2\x54\x1c\xe2\x54\x38\xd5\x54\x55\x25\x55\x11\x50\x55\x10\x77\x55\x09\x57\x45\xfa\xa8\x45\xc1\xc1\x45\x6c\x43\x70\xff\x20\x77\xfb\x18\x77\xf7\x1c\x07\x5a";
          paths[3] = "\x4d\x60\xa7\x8f\x06\x63\xcf\x44\xf1\x9c\x44\xe6\x69\x44\xe2\xf9\x54\x15\xf7\x54\x30\xf7\x54\x46\x02\x55\x42\x1f\x55\x8b\x55\x55\xba\x1b\x55\x18\x47\x55\x2f\x6d\x55\x43\x13\x45\xd3\x2d\x45\xaa\x42\x45\x7e\x43\x60\xd1\x10\x67\xb2\xd0\x66\xa7\x8f\x06\x5a";
          paths[4] = "\x4d\x50\xc9\x1c\x08\x6d\xe7\x54\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\x31\x55\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\xcf\x54\x00";
          paths[5] = "\x4d\x60\x4f\xe0\x07\x6d\xfa\x54\x00\x61\x50\x06\x06\x55\x00\x01\x55\x01\x0d\x55\x00\x61\x50\x06\x06\x55\x00\x01\x55\x01\xf3\x54\x00";
          paths[6] = "\x4d\x60\xf0\x3a\x08\x6d\xf4\x54\x00\x61\x50\x0c\x0c\x55\x00\x01\x55\x01\x17\x55\x00\x61\x50\x0c\x0c\x55\x00\x01\x55\x01\xe9\x54\x00";
          paths[7] = "\x4d\x70\x37\x0d\x08\x6d\xf8\x54\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\x10\x55\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\xf0\x54\x00";
          paths[8] = "\x4d\x80\x5a\x24\x08\x6d\xeb\x54\x00\x61\x50\x15\x15\x55\x00\x01\x55\x01\x2a\x55\x00\x61\x50\x15\x15\x55\x00\x01\x55\x01\xd6\x54\x00";
          paths[9] = "\x4d\x70\x8d\x4b\x07\x4c\x9d\x77\x9f\xca\x77\x85\xa3\x77\x3f\x8d\x77\x4b\x7a\x00";
          paths[10] = "\x4d\x70\x0a\x32\x07\x4c\xdf\x76\xbe\xae\x76\xb3\xfc\x76\x2b\x0a\x77\x32\x7a\x00";
          paths[11] = "\x4d\x60\x04\xd6\x06\x4c\xba\x66\xc1\xc0\x66\xcf\x23\x76\x34\x04\x66\xd6\x7a\x00";
          paths[12] = "\x4d\x60\x69\xe8\x05\x4c\xbb\x66\x16\xc9\x56\xfc\x9d\x56\xc7\x69\x56\xe8\x7a\x00";
          paths[13] = "\x4d\x60\x1c\x85\x06\x63\xfc\x44\xff\xf3\x54\x01\xf2\x44\xfb\x43\x60\x0f\x7c\x66\x25\x81\x66\x1c\x85\x06\x5a";
          paths[14] = "\x4d\x60\x3f\x8c\x06\x63\xfc\x44\xfd\xf4\x54\x01\xf2\x44\xfc\x43\x60\x31\x81\x66\x49\x87\x66\x3f\x8c\x06\x5a";
          paths[15] = "\x4d\x60\x60\x93\x06\x63\xfc\x44\xfe\xf4\x54\x01\xf3\x44\xfc\x53\x60\x6a\x8f\x66\x60\x93\x06\x5a";
          paths[16] = "\x4d\x60\x7f\x96\x06\x63\xfc\x54\x01\xf2\x44\xff\xf9\x44\xfb\x43\x60\x7b\x90\x66\x86\x92\x66\x7f\x96\x06\x5a";
          paths[17] = "\x4d\x60\x9f\x9b\x06\x63\xfd\x54\x00\xf6\x44\xfe\xf8\x44\xfa\x53\x60\xad\x9a\x66\x9f\x9b\x06\x5a";
          paths[18] = "\x4d\x60\xfc\x3d\x07\x63\xf9\x44\xff\x01\x45\xf3\x04\x45\xfa\x43\x60\xff\x39\x67\xff\x3d\x67\xfc\x3d\x07\x5a";
          paths[19] = "\x4d\x60\xf2\x56\x07\x63\xfa\x44\xff\x00\x45\xf0\x05\x45\xf3\x43\x60\xf8\x4c\x67\xf4\x56\x67\xf2\x56\x07\x5a";
          paths[20] = "\x4d\x60\xe3\x73\x07\x63\xf9\x44\xfe\x03\x45\xf5\x05\x45\xf3\x43\x60\xf2\x64\x67\xe6\x71\x67\xe3\x73\x07\x5a";
          paths[21] = "\x4d\x60\xdb\x8e\x07\x63\xfa\x44\xff\x00\x45\xf8\x01\x45\xf4\x43\x60\xe3\x7b\x67\xdf\x8d\x67\xdb\x8e\x07\x5a";
          paths[22] = "\x4d\x60\xd1\xa7\x07\x63\xfb\x44\xff\xff\x44\xf9\x01\x45\xf8\x43\x60\xd7\x9e\x67\xd6\xa7\x67\xd1\xa7\x07\x5a\x6d\x40\xff\xfb\x04\x5a";
          fill[0] = "#6678a7";
          fill[1] = "#74f0cd";
          fill[2] = "#fff97c";
          fill[3] = "#daff7f";
          fill[4] = "#daff7f";
          fill[5] = "#daff7f";
          fill[6] = "#daff7f";
          fill[7] = "#daff7f";
          fill[8] = "#daff7f";
          fill[9] = "#f6dd6b";
          fill[10] = "#bee89c";
          fill[11] = "#c5df7f";
          fill[12] = "#c5e97f";
          fill[13] = "";
          fill[14] = "";
          fill[15] = "";
          fill[16] = "";
          fill[17] = "";
          fill[18] = "";
          fill[19] = "";
          fill[20] = "";
          fill[21] = "";
          fill[22] = "";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
          stroke[20] = 0;
          stroke[21] = 0;
          stroke[22] = 0;
      }
      function parts_BG_moon() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [23, 665, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x00\x00\x05\x48\x00\x09\x56\xc2\x08\x48\x00\x05\x5a";
          paths[1] = "\x4d\x80\x2a\x33\x07\x61\xce\x55\xce\x00\x55\x00\x01\x45\x99\x35\x05\x63\xed\x54\x04\xda\x54\x0b\xc6\x54\x0b\xd2\x54\x01\xa8\x44\xf0\x80\x44\xdd\xf7\x54\x11\xea\x54\x1f\xe0\x54\x30\xee\x54\x22\xdc\x54\x44\xcb\x54\x67\x2d\x55\x14\x62\x55\x14\x92\x55\x0c\x6b\x45\xf8\xce\x45\xb3\xec\x45\x4b\x43\x80\x2b\x4e\x87\x30\x2e\x87\x2a\x33\x07\x5a";
          paths[2] = "\x4d\x60\x8f\x86\x06\x63\xc5\x44\xee\x85\x44\xe1\x47\x44\xdb\xf8\x54\x1a\xfb\x54\x39\xfe\x54\x54\x02\x55\x51\x1e\x55\xb4\x5f\x55\xe6\x20\x55\x2d\x56\x55\x39\x85\x55\x52\x17\x45\xc9\x37\x45\x96\x51\x45\x61\x43\x60\xc2\x25\x67\x9c\xd5\x66\x8f\x86\x06\x5a";
          paths[3] = "\x4d\x60\x8c\x74\x06\x63\xff\x44\x91\x25\x45\x2f\x99\x45\x12\x01\x45\xef\x04\x45\xee\xed\x44\xee\x61\x60\x39\x39\x56\x00\x00\x55\x00\xcb\x54\x05\x63\x40\xcb\x06\x45\x9c\x22\x45\x72\x41\x05\x41\xc5\x55\xc5\x00\x55\x00\x00\x65\x07\x05\x06\x61\x0c\x66\x0c\x00\x55\x00\x00\x45\xd1\x60\x05\x63\x1f\x55\x02\x3d\x55\x07\x5b\x55\x11\x1e\x55\x04\x3b\x55\x09\x58\x55\x13\x43\x60\x8b\x81\x66\x8c\x7b\x66\x8c\x74\x06\x5a";
          paths[4] = "\x4d\x50\x7f\x6c\x08\x6d\xe2\x54\x00\x61\x50\x1e\x1e\x55\x00\x01\x55\x01\x3c\x55\x00\x61\x50\x1e\x1e\x55\x00\x01\x55\x01\xc4\x54\x00";
          paths[5] = "\x4d\x60\x23\x23\x08\x6d\xf8\x54\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\x0f\x55\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\xf1\x54\x00";
          paths[6] = "\x4d\x60\xe9\x91\x08\x6d\xf2\x54\x00\x61\x50\x0e\x0e\x55\x00\x01\x55\x01\x1c\x55\x00\x61\x50\x0e\x0e\x55\x00\x01\x55\x01\xe4\x54\x00";
          paths[7] = "\x4d\x70\x3f\x5a\x08\x6d\xf6\x54\x00\x61\x50\x0a\x0a\x55\x00\x01\x55\x01\x14\x55\x00\x61\x50\x0a\x0a\x55\x00\x01\x55\x01\xec\x54\x00";
          paths[8] = "\x4d\x80\xa3\x76\x08\x6d\xe7\x54\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\x33\x55\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\xcd\x54\x00";
          paths[9] = "\x4d\x70\xa8\x6c\x07\x4c\xbc\x77\xd3\xf3\x77\xb3\xc3\x77\x5e\xa8\x77\x6c\x7a\x00";
          paths[10] = "\x4d\x70\x08\x4d\x07\x4c\xd3\x76\xf9\x98\x76\xeb\xf7\x76\x45\x08\x77\x4d\x7a\x00";
          paths[11] = "\x4d\x50\xce\xdf\x06\x4c\xa5\x66\xc3\xad\x66\xd4\xed\x75\x50\xce\x65\xdf\x7a\x00";
          paths[12] = "\x4d\x60\x43\xb9\x05\x4c\xa7\x56\xf2\xb8\x56\xd2\x82\x56\x91\x43\x56\xb9\x7a\x00";
          paths[13] = "\x4d\x50\xe5\x7a\x06\x63\xfb\x44\xff\xf0\x54\x01\xef\x44\xfa\x43\x50\xd5\x6f\x56\xf0\x75\x56\xe5\x7a\x06\x5a";
          paths[14] = "\x4d\x60\x0f\x83\x06\x63\xfb\x44\xfd\xf1\x54\x01\xef\x44\xfb\x43\x50\xff\x75\x66\x1b\x7d\x66\x0f\x83\x06\x5a";
          paths[15] = "\x4d\x60\x38\x8b\x06\x63\xfc\x44\xfe\xf2\x54\x00\xf1\x44\xfb\x53\x60\x44\x86\x66\x38\x8b\x06\x5a";
          paths[16] = "\x4d\x60\x5d\x8f\x06\x63\xfc\x54\x01\xee\x44\xfe\xf8\x44\xfa\x43\x60\x59\x87\x66\x67\x8a\x66\x5d\x8f\x06\x5a";
          paths[17] = "\x4d\x60\x86\x95\x06\x63\xfc\x54\x00\xf3\x44\xfe\xf6\x44\xf9\x53\x60\x96\x93\x66\x86\x95\x06\x5a";
          paths[18] = "\x4d\x60\xf7\x5c\x07\x63\xf7\x44\xfe\x01\x45\xf0\x05\x45\xf8\x43\x60\xfb\x57\x67\xfa\x5b\x67\xf7\x5c\x07\x5a";
          paths[19] = "\x4d\x60\xeb\x7a\x07\x63\xf9\x44\xff\x00\x45\xec\x06\x45\xf0\x43\x60\xf2\x6d\x67\xee\x7a\x67\xeb\x7a\x07\x5a";
          paths[20] = "\x4d\x60\xd8\x9d\x07\x63\xf8\x44\xfe\x03\x45\xf3\x06\x45\xf0\x43\x60\xea\x8b\x67\xdc\x9b\x67\xd8\x9d\x07\x5a";
          paths[21] = "\x4d\x60\xce\xbe\x07\x63\xf9\x44\xfe\x00\x45\xf6\x01\x45\xf2\x43\x60\xd9\xa7\x67\xd3\xbd\x67\xce\xbe\x07\x5a";
          paths[22] = "\x4d\x60\xc2\xdd\x07\x63\xfa\x44\xff\xff\x44\xf8\x01\x45\xf6\x43\x60\xc9\xd2\x67\xc8\xdd\x67\xc2\xdd\x07\x5a";
          fill[0] = "#6678a7";
          fill[1] = "#fff97c";
          fill[2] = "#daff7f";
          fill[3] = "#74f0cd";
          fill[4] = "#daff7f";
          fill[5] = "#daff7f";
          fill[6] = "#daff7f";
          fill[7] = "#daff7f";
          fill[8] = "#daff7f";
          fill[9] = "#f6dd6b";
          fill[10] = "#bee89c";
          fill[11] = "#c5df7f";
          fill[12] = "#c5e97f";
          fill[13] = "";
          fill[14] = "";
          fill[15] = "";
          fill[16] = "";
          fill[17] = "";
          fill[18] = "";
          fill[19] = "";
          fill[20] = "";
          fill[21] = "";
          fill[22] = "";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
          stroke[20] = 0;
          stroke[21] = 0;
          stroke[22] = 0;
      }
      function parts_BG_moon_R() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [23, 665, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x00\x00\x05\x48\x00\x09\x56\xc2\x08\x48\x00\x05\x5a";
          paths[1] = "\x4d\x60\x8c\x74\x06\x63\xff\x44\x91\x25\x45\x2f\x99\x45\x12\x01\x45\xef\x04\x45\xee\xed\x44\xee\x61\x60\x39\x39\x56\x00\x00\x55\x00\xcb\x54\x05\x63\x40\xcb\x06\x45\x9c\x22\x45\x72\x41\x05\x41\xc5\x55\xc5\x00\x55\x00\x00\x65\x07\x05\x06\x61\x0c\x66\x0c\x00\x55\x00\x00\x45\xd1\x60\x05\x63\x1f\x55\x02\x3d\x55\x07\x5b\x55\x11\x1e\x55\x04\x3b\x55\x09\x58\x55\x13\x43\x60\x8b\x81\x66\x8c\x7b\x66\x8c\x74\x06\x5a";
          paths[2] = "\x4d\x80\x2a\x33\x07\x61\xd5\x55\xd5\x00\x55\x00\x01\x45\x99\x35\x05\x63\xed\x54\x04\xda\x54\x0b\xc6\x54\x0b\xd2\x54\x01\xa8\x44\xf0\x80\x44\xdd\xf7\x54\x11\xea\x54\x1f\xe0\x54\x30\xee\x54\x22\xdc\x54\x44\xcb\x54\x67\x2d\x55\x14\x62\x55\x14\x92\x55\x0c\x6b\x45\xf8\xce\x45\xb3\xec\x45\x4b\x43\x80\x34\x38\x87\x2f\x2e\x87\x2a\x33\x07\x5a";
          paths[3] = "\x4d\x60\x8f\x86\x06\x63\xc5\x44\xee\x85\x44\xe1\x47\x44\xdb\xf8\x54\x1a\xf5\x54\x3b\xf6\x54\x56\x02\x55\x51\x26\x55\xaa\x68\x55\xe4\x21\x55\x1d\x56\x55\x39\x85\x55\x52\x17\x45\xc9\x37\x45\x96\x51\x45\x61\x43\x60\xc2\x25\x67\x9c\xd5\x66\x8f\x86\x06\x5a";
          paths[4] = "\x4d\x50\x7f\x6c\x08\x6d\xe2\x54\x00\x61\x50\x1e\x1e\x55\x00\x01\x55\x01\x3c\x55\x00\x61\x50\x1e\x1e\x55\x00\x01\x55\x01\xc4\x54\x00";
          paths[5] = "\x4d\x60\x23\x23\x08\x6d\xf8\x54\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\x0f\x55\x00\x61\x50\x08\x08\x55\x00\x01\x55\x01\xf1\x54\x00";
          paths[6] = "\x4d\x60\xe9\x91\x08\x6d\xf2\x54\x00\x61\x50\x0e\x0e\x55\x00\x01\x55\x01\x1c\x55\x00\x61\x50\x0e\x0e\x55\x00\x01\x55\x01\xe4\x54\x00";
          paths[7] = "\x4d\x70\x3f\x5a\x08\x6d\xf6\x54\x00\x61\x50\x0a\x0a\x55\x00\x01\x55\x01\x14\x55\x00\x61\x50\x0a\x0a\x55\x00\x01\x55\x01\xec\x54\x00";
          paths[8] = "\x4d\x80\xa3\x76\x08\x6d\xe7\x54\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\x33\x55\x00\x61\x50\x19\x19\x55\x00\x01\x55\x01\xcd\x54\x00";
          paths[9] = "\x4d\x70\xa8\x6c\x07\x4c\xbc\x77\xd3\xf3\x77\xb3\xc3\x77\x5e\xa8\x77\x6c\x7a\x00";
          paths[10] = "\x4d\x70\x08\x4d\x07\x4c\xd3\x76\xf9\x98\x76\xeb\xf7\x76\x45\x08\x77\x4d\x7a\x00";
          paths[11] = "\x4d\x50\xc7\xde\x06\x4c\xa5\x66\xc3\xad\x66\xd4\xed\x75\x50\xc7\x65\xde\x7a\x00";
          paths[12] = "\x4d\x60\x43\xb9\x05\x4c\xa7\x56\xf2\xb8\x56\xd2\x82\x56\x91\x43\x56\xb9\x7a\x00";
          paths[13] = "\x4d\x50\xe5\x7a\x06\x63\xfb\x44\xff\xf0\x54\x01\xef\x44\xfa\x43\x50\xd5\x6f\x56\xf0\x75\x56\xe5\x7a\x06\x5a";
          paths[14] = "\x4d\x60\x0f\x83\x06\x63\xfb\x44\xfd\xf1\x54\x01\xef\x44\xfb\x43\x50\xff\x75\x66\x1b\x7d\x66\x0f\x83\x06\x5a";
          paths[15] = "\x4d\x60\x38\x8b\x06\x63\xfc\x44\xfe\xf2\x54\x00\xf1\x44\xfb\x53\x60\x44\x86\x66\x38\x8b\x06\x5a";
          paths[16] = "\x4d\x60\x5d\x8f\x06\x63\xfc\x54\x01\xee\x44\xfe\xf8\x44\xfa\x43\x60\x59\x87\x66\x67\x8a\x66\x5d\x8f\x06\x5a";
          paths[17] = "\x4d\x60\x86\x95\x06\x63\xfc\x54\x00\xf3\x44\xfe\xf6\x44\xf9\x53\x60\x96\x93\x66\x86\x95\x06\x5a";
          paths[18] = "\x4d\x60\xf7\x5c\x07\x63\xf7\x44\xfe\x01\x45\xf0\x05\x45\xf8\x43\x60\xfb\x57\x67\xfa\x5b\x67\xf7\x5c\x07\x5a";
          paths[19] = "\x4d\x60\xeb\x7a\x07\x63\xf9\x44\xff\x00\x45\xec\x06\x45\xf0\x43\x60\xf2\x6d\x67\xee\x7a\x67\xeb\x7a\x07\x5a";
          paths[20] = "\x4d\x60\xd8\x9d\x07\x63\xf8\x44\xfe\x03\x45\xf3\x06\x45\xf0\x43\x60\xea\x8b\x67\xdc\x9b\x67\xd8\x9d\x07\x5a";
          paths[21] = "\x4d\x60\xce\xbe\x07\x63\xf9\x44\xfe\x00\x45\xf6\x01\x45\xf2\x43\x60\xd9\xa7\x67\xd3\xbd\x67\xce\xbe\x07\x5a";
          paths[22] = "\x4d\x60\xc2\xdd\x07\x63\xfa\x44\xff\xff\x44\xf8\x01\x45\xf6\x43\x60\xc9\xd2\x67\xc8\xdd\x67\xc2\xdd\x07\x5a";
          fill[0] = "#6678a7";
          fill[1] = "#74f0cd";
          fill[2] = "#fff97c";
          fill[3] = "#daff7f";
          fill[4] = "#daff7f";
          fill[5] = "#daff7f";
          fill[6] = "#daff7f";
          fill[7] = "#daff7f";
          fill[8] = "#daff7f";
          fill[9] = "#f6dd6b";
          fill[10] = "#bee89c";
          fill[11] = "#c5df7f";
          fill[12] = "#c5e97f";
          fill[13] = "";
          fill[14] = "";
          fill[15] = "";
          fill[16] = "";
          fill[17] = "";
          fill[18] = "";
          fill[19] = "";
          fill[20] = "";
          fill[21] = "";
          fill[22] = "";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
          stroke[20] = 0;
          stroke[21] = 0;
          stroke[22] = 0;
      }
      function parts_BG_rainbow() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [6, 673, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x00\x00\x05\x48\xf4\x08\x56\xb7\x08\x48\x00\x05\x5a";
          paths[1] = "\x4d\x50\x4e\x89\x05\x43\x08\x55\x89\x22\x55\x46\x62\x55\x60\x63\x50\x02\xdf\x54\x64\xc5\x54\x64\xf2\x54\x25\xf4\x54\x93\xf9\x54\x55\x13\x55\x19\xf7\x54\x67\xe6\x54\x82\xf4\x54\x1e\x0f\x55\x00\x20\x45\xdd\x1f\x55\x1a\x25\x45\x9f\x44\x45\x89\x1a\x45\xed\x1f\x45\x91\x25\x45\x98\xfc\x04\x43\x89\x55\xbf\x3f\x55\x8e\x4e\x55\x89\x5a\x00";
          paths[2] = "\x4d\x70\xd0\x9f\x06\x63\xc7\x54\x00\xdc\x44\xc5\x10\x45\xdb\x01\x45\xe3\x50\x45\xcc\x51\x45\xf4\x1e\x45\xf6\x76\x45\xfa\x44\x55\x11\x14\x45\xf8\x53\x45\xe9\x69\x45\xf5\x18\x55\x0d\x00\x55\x1c\xe4\x54\x1b\x15\x55\x21\xb2\x54\x3b\xa0\x54\x17\xf0\x54\x1b\xa7\x54\x21\xac\x44\xfd\x43\x70\xff\xce\x76\xc4\xa3\x76\xd0\x9f\x06\x5a";
          paths[3] = "\x4d\x80\xef\xb9\x08\x61\xdb\x66\xdb\x00\x55\x00\x00\x45\x73\x08\x04\x63\xa0\x44\xa7\x1f\x44\x75\x97\x43\x75\x53\x50\xf1\x68\x57\x91\xc1\x07\x63\xb8\x54\x43\x8d\x54\x98\x7c\x54\xf3\x43\x40\xfb\xc2\x58\x01\x99\x58\x02\x68\x08\x63\x04\x45\xf7\x08\x45\xee\x0c\x45\xe5\x1b\x45\xc5\x3e\x45\x86\x6f\x45\x59\x65\x45\xa2\xed\x45\x70\x7c\x46\x70\x73\x60\x20\x39\x65\x84\x96\x05\x63\x31\x55\x2d\x4e\x55\x66\x69\x55\xa1\x0e\x55\x1f\x0b\x55\x0e\x13\x55\x30\x43\x80\xf4\x91\x88\xfb\xb7\x88\xef\xb9\x08\x5a";
          paths[4] = "\x4d\x90\x00\x9f\x08\x61\xcf\x77\xcf\x00\x55\x00\x00\x45\xd9\x97\x04\x43\x65\x78\x5e\x7f\x77\x05\x92\x76\x27\x63\x40\xac\x17\x45\x5a\x32\x45\x14\x66\x05\x43\x52\x75\xdc\x26\x85\x0f\x00\x85\x6e\x63\x40\xff\xf2\x54\x02\xe0\x54\x01\xc3\x04\x61\x36\x77\x36\x00\x55\x00\x01\x55\x29\xba\x04\x63\x4c\x45\xa0\xb4\x45\x4c\x30\x46\x35\x46\x45\xee\x8d\x45\xe1\xd5\x45\xef\x36\x55\x06\x6c\x55\x08\x9f\x55\x1e\x83\x55\x3b\xea\x55\x92\x24\x66\x05\x43\x80\xf2\x31\x88\xf9\x85\x98\x00\x9f\x08\x5a";
          paths[5] = "\x4d\x80\xdb\xb3\x08\x63\xf2\x44\xcf\xd5\x44\x96\xb8\x44\x6b\x43\x80\x56\xaf\x77\xdc\x76\x77\x65\x56\x07\x63\xcb\x44\xf8\x94\x44\xf2\x5f\x44\xfb\x61\x50\xf2\xf2\x55\x00\x00\x55\x00\x97\x54\x15\x63\x40\xdf\x0d\x45\xbd\x1a\x45\x9c\x28\x05\x43\xa0\x75\xc7\x54\x85\x16\x2e\x85\x78\x63\x40\xfa\x14\x45\xf5\x29\x45\xf0\x3e\x45\xf3\x00\x45\xf3\x00\x45\xe4\x01\x05\x41\xbf\x66\xbf\x00\x55\x00\x01\x55\x2c\x3e\x08\x63\x14\x45\xe2\x29\x45\xc4\x3d\x45\xa6\x1a\x45\xe7\x36\x45\xcd\x52\x45\xb5\x3d\x45\xd3\x85\x45\xb8\xce\x45\xa4\x25\x45\xfc\x4b\x45\xf8\x71\x45\xf5\x5d\x55\x09\xbd\x55\x19\x0f\x56\x49\x2d\x55\x20\x5a\x55\x43\x80\x55\x6b\x33\x55\x40\x56\x55\x88\x66\x55\xd4\x41\x50\x1b\x1b\x55\x00\x00\x55\x01\xdb\x88\xb3\x5a\x00";
          fill[0] = "#66c5c8";
          fill[1] = "#fffffa";
          fill[2] = "#fffffa";
          fill[3] = "#ffff8c";
          fill[4] = "#bbffa7";
          fill[5] = "#fbb1cc";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
      }
      function parts_BG_rooftop() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [20, 665, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x00\x00\x05\x48\x00\x09\x56\xc2\x08\x48\x00\x05\x5a";
          paths[1] = "\x4d\x50\xd4\x0e\x08\x61\x03\x55\x03\x00\x55\x00\x01\x45\xfd\xfc\x04\x63\x04\x45\xf5\x04\x45\xe6\x04\x45\xd8\x00\x45\xfb\x00\x45\xcd\x08\x45\xde\x43\x50\xd7\xd4\x57\xe2\xff\x57\xd4\x0e\x08\x5a";
          paths[2] = "\x4d\x50\xda\xbd\x07\x63\xc5\x44\xdf\x2f\x45\xb2\x1f\x45\xed\xec\x54\x20\xcc\x44\xf1\xee\x44\xf6\x06\x55\x07\xf8\x54\x02\xf7\x54\x05\xfc\x54\x05\x01\x55\x0b\x07\x55\x0c\x1c\x45\xff\x11\x45\xd8\xf9\x44\xe3\x43\x50\xb3\xa9\x57\xe6\xba\x57\xda\xbd\x07\x5a";
          paths[3] = "\x4d\x50\x81\xc2\x08\x4c\x96\x85\x4f\x00\x86\x51\x00\x86\xc2\x81\x85\xc2\x7a\x00";
          paths[4] = "\x4d\x50\x96\x4f\x08\x63\xfb\x44\xf9\x0b\x45\xf4\x10\x45\xee\x10\x45\xef\x1a\x45\xe9\x28\x45\xd6\x0c\x45\xf0\x0e\x45\xee\x15\x55\x00\x05\x55\x0c\x0d\x55\x14\x13\x55\x1f\x18\x55\x27\x12\x55\x22\xe6\x54\x1d\x61\x60\x50\x50\x56\x00\x00\x55\x00\xd5\x54\x00\x43\x50\xa8\x52\x58\x99\x53\x58\x96\x4f\x08\x5a";
          paths[5] = "\x4d\x70\x85\xc0\x08\x63\xfa\x44\xf9\x02\x45\xf7\x03\x45\xee\x61\x60\x1e\x1e\x56\x00\x00\x55\x00\x04\x45\xc9\x63\x50\x07\xd1\x54\x0c\x9d\x54\x12\x70\x54\x0a\xf9\x54\x16\x01\x55\x22\x00\x55\x12\xfc\x54\x22\xfe\x54\x35\x01\x55\x13\xfa\x54\x16\xfe\x54\x12\x11\x55\x03\x13\x55\x05\x23\x55\x06\x37\x55\x07\x1e\x55\x04\x3c\x55\x0c\x5b\x55\x01\x0e\x55\x02\x17\x55\x03\x24\x55\x09\x13\x55\x02\x19\x45\xee\x13\x45\xdf\xfd\x44\xc0\x03\x45\xa0\xfd\x04\x43\x9a\x87\xb8\x8c\x87\xc7\x85\x87\xc0\x5a\x00";
          paths[6] = "\x4d\x70\xd6\x16\x08\x48\xf4\x07\x56\x34\x08\x48\xd6\x07\x5a";
          paths[7] = "\x4d\x70\xd6\x59\x08\x48\xf4\x07\x56\x76\x08\x48\xd6\x07\x5a";
          paths[8] = "\x4d\x70\x9f\xe9\x07\x63\xfe\x44\xf9\x0b\x45\xf4\x0e\x45\xee\x61\x50\x98\x98\x55\x00\x00\x55\x01\x14\x45\xe4\x63\x50\x08\xf7\x54\x08\xf0\x54\x11\xe8\x54\x03\xfb\x54\x04\xf4\x54\x09\xf4\x04\x73\x05\x55\x08\x08\x55\x0d\x6c\x50\x02\x05\x05\x63\x04\x55\x0b\x0b\x55\x12\x0f\x55\x1c\x73\x50\x0a\x12\x55\x10\x1c\x05\x63\x03\x55\x05\x08\x55\x05\x05\x55\x0a\x73\x40\xfb\x00\x45\xf5\x00\x05\x63\xe4\x44\xfe\xc7\x54\x00\xab\x44\xfe\x43\x70\xa4\xeb\x77\xa1\xee\x77\x9f\xe9\x07\x5a";
          paths[9] = "\x4d\x60\x43\x30\x08\x4c\x40\x86\xbf\xb4\x87\xc3\xbb\x87\x26\x43\x86\x30\x7a\x00";
          paths[10] = "\x4d\x70\x23\xc1\x08\x73\xfe\x44\xdd\xff\x44\xc7\x63\x50\x02\xd0\x54\x54\xc5\x54\x58\xfb\x54\x02\x1c\x55\x04\x3e\x55\x04\x3e\x05\x5a";
          paths[11] = "\x4d\x70\x78\xa7\x08\x68\x00\x05\x63\xee\x44\xfe\xdb\x44\xff\xc8\x54\x00\xf6\x54\x00\xec\x54\x00\xe3\x54\x00\x61\x50\x03\x03\x55\x00\x00\x55\x01\x00\x45\xfa\x6c\x50\x1d\x00\x05\x63\x13\x45\xff\x26\x45\xff\x39\x55\x00\x61\x50\x03\x03\x55\x00\x00\x55\x01\x03\x55\x03\x41\x50\x03\x03\x55\x00\x00\x55\x01\x78\x87\xa7\x5a\x00";
          paths[12] = "\x4d\x70\x4f\xc4\x08\x61\x03\x55\x03\x00\x55\x00\x01\x45\xfd\xfd\x04\x63\x00\x45\xee\xff\x44\xdd\xff\x44\xcc\x73\x40\xff\xe0\x44\xff\xd0\x04\x61\x03\x55\x03\x00\x55\x00\x01\x55\x03\xfd\x04\x68\x00\x05\x61\x03\x55\x03\x00\x55\x00\x01\x55\x03\x03\x05\x63\x00\x55\x10\x00\x55\x20\x01\x55\x30\x73\x50\x01\x23\x55\x01\x34\x05\x41\x03\x55\x03\x00\x55\x00\x01\x75\x4f\xc4\x08\x5a";
          paths[13] = "\x4d\x60\x60\xb9\x07\x63\xf6\x54\x17\xef\x54\x2e\xe4\x54\x45\x61\x50\x53\x53\x55\x00\x00\x55\x00\xf2\x54\x22\x63\x40\xfc\x09\x45\xf4\x09\x45\xf9\x10\x05\x73\x08\x55\x00\x11\x55\x00\x09\x55\x02\x12\x55\x02\x63\x50\x1f\xfa\x54\x3c\x02\x55\x5a\xfc\x54\x24\x06\x55\x48\xfe\x54\x6d\x02\x55\x30\xf6\x54\x55\x02\x55\x85\xfd\x54\x17\xfd\x54\x20\x07\x55\x1a\xee\x44\xfd\xf3\x44\xf9\xeb\x44\xf8\xdd\x44\xef\xbc\x44\xf8\xd2\x44\xb8\xc9\x04\x43\x12\x77\xbf\xb7\x76\xbb\x60\x76\xb9\x5a\x00";
          paths[14] = "\x4d\x60\xac\xbc\x07\x63\x01\x55\x40\x6f\x55\x58\x8a\x55\x06\x0a\x55\x40\x76\x55\x2a\x6b\x55\x03\x6c\x40\xdb\x93\x04\x63\xfe\x54\x01\x01\x54\x06\xff\x53\x04\x4c\x60\x4c\xe2\x07\x43\x6e\x76\xf4\x97\x76\xe1\xac\x76\xbc\x5a\x00";
          paths[15] = "\x4d\x60\xc7\x5a\x07\x63\x02\x55\x0f\x06\x55\x1c\x0c\x55\x25\x08\x55\x0c\x14\x55\x11\x20\x55\x13\x61\x50\x39\x39\x55\x00\x00\x55\x00\x24\x45\xfb\x58\x55\x58\x00\x55\x00\x00\x55\x1c\xe7\x54\x51\x51\x55\x00\x00\x55\x00\x0f\x45\xdf\x63\x50\x02\x0f\x55\x07\x19\x55\x0b\x21\x55\x08\x10\x55\x12\x13\x55\x1c\x11\x55\x0f\xfc\x54\x1c\xed\x54\x1d\xec\x44\xfb\xef\x44\xfb\xef\x44\xf6\xde\x04\x73\xfd\x44\xe4\xf6\x44\xde\xec\x54\x00\xd8\x54\x00\xec\x54\x01\xd8\x54\x01\xec\x54\x01\xd8\x54\x01\xec\x44\xfe\xd8\x44\xfe\xec\x54\x00\xd8\x54\x00\xe8\x44\xfa\xd8\x54\x05\x63\x50\x00\x00\x45\xfb\x0c\x45\xf6\x1d\x05\x73\xf8\x54\x13\xf7\x54\x24\x63\x50\x07\x10\x55\x11\x14\x55\x1c\x16\x05\x73\x19\x45\xfc\x24\x45\xf3\x53\x60\xc4\x67\x67\xc7\x5a\x07\x5a";
          paths[16] = "\x4d\x50\xda\x63\x08\x4c\xc8\x85\xc1\xd2\x86\xc1\xd2\x86\x62\xda\x85\x63\x7a\x00";
          paths[17] = "\x4d\x50\xe6\xc2\x08\x4c\xee\x85\x8d\xff\x85\x8d\xff\x85\xc2\xe6\x85\xc2\x7a\x00";
          paths[18] = "\x4d\x60\x25\xc2\x08\x4c\x2b\x86\x8b\x4b\x86\x8b\x4c\x86\xc2\x25\x86\xc2\x7a\x00";
          paths[19] = "\x4d\x50\xd8\x60\x08\x63\x00\x45\xf7\x12\x45\xe5\x1a\x45\xdd\x1b\x45\xe6\x31\x45\xd0\x46\x45\xb2\x1f\x45\xd4\x18\x45\xcb\x38\x45\xfc\x14\x55\x16\x1e\x55\x2e\x33\x55\x43\x0b\x55\x0b\x0f\x55\x15\x1b\x55\x20\x08\x55\x07\x0f\x55\x0e\x12\x55\x12\x06\x55\x09\xf0\x54\x03\xe5\x54\x03\xef\x44\xfe\xdf\x54\x01\xce\x54\x02\xcb\x54\x05\xa7\x44\xff\x72\x44\xfe\x43\x50\xeb\x65\x58\xd8\x63\x58\xd8\x60\x08\x5a";
          fill[0] = "#d7e0df";
          fill[1] = "";
          fill[2] = "";
          fill[3] = "#efefef";
          fill[4] = "#e77bc0";
          fill[5] = "#fff";
          fill[6] = "#dcdddd";
          fill[7] = "#dcdddd";
          fill[8] = "#88aed7";
          fill[9] = "#d6c9ae";
          fill[10] = "#fff";
          fill[11] = "";
          fill[12] = "";
          fill[13] = "#ff8678";
          fill[14] = "#ffa55c";
          fill[15] = "#ff7193";
          fill[16] = "#fff";
          fill[17] = "#cdc8d1";
          fill[18] = "#cdc8d1";
          fill[19] = "#64d2d8";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
      }
      function parts_Chair1() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [5, 93, 980, 980];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x61\x91\x08\x48\x5b\x05\x61\x22\x55\x22\x00\x55\x00\x01\x45\xe4\xd9\x04\x63\x20\x45\x3e\x2f\x35\x70\x3e\x25\xaa\x03\x45\xd8\x06\x45\xb3\x09\x45\x8c\x61\x50\x21\x21\x55\x00\x00\x55\x01\x42\x55\x06\x63\x40\xfd\x25\x45\xfa\x4c\x45\xf7\x73\x45\xf2\xc8\x45\xe2\x97\x46\xc1\x5c\x07\x41\x20\x55\x20\x00\x55\x00\x01\x55\x61\x91\x08\x5a";
          paths[1] = "\x4d\x70\x2d\xed\x07\x68\xff\x04\x61\x21\x55\x21\x00\x55\x00\x01\x45\xe0\xde\x04\x63\x03\x45\x94\xfe\x44\x26\xf9\x34\xbb\xfc\x44\xa7\xf7\x44\x4a\xf8\x34\xef\x61\x50\x20\x20\x55\x00\x00\x55\x01\x21\x45\xe0\x68\x50\x00\x61\x50\x20\x20\x55\x00\x00\x55\x01\x21\x55\x21\x63\x40\xff\x58\x55\x03\xb5\x55\x08\x0d\x56\x04\x6c\x55\x0a\xdc\x55\x07\x4a\x06\x41\x22\x55\x22\x00\x55\x00\x01\x75\x2d\xed\x07\x5a";
          paths[2] = "\x4d\x60\xc0\x0a\x09\x61\x22\x55\x22\x00\x55\x00\x01\x45\xdf\xe0\x04\x63\xfa\x44\x7a\xfd\x34\xef\x00\x35\x69\x73\x50\x06\x03\x54\x01\x87\x03\x61\x22\x55\x22\x00\x55\x00\x01\x55\x20\xde\x54\x20\x20\x55\x00\x00\x55\x01\x22\x55\x20\x63\x50\x04\x7e\x55\x02\xfe\x45\xff\x7c\x06\x73\xfa\x64\x0f\x00\x65\x94\x61\x50\x21\x21\x55\x00\x00\x55\x01\xe0\x54\x22\x5a\x00";
          paths[3] = "\x4d\x80\xa9\x25\x08\x61\x21\x55\x21\x00\x55\x00\x01\x45\xdf\xe4\x04\x63\xe0\x44\x48\xbf\x34\x70\xbc\x24\xa1\x61\x50\x21\x21\x55\x00\x00\x55\x01\x21\x45\xde\x68\x50\x00\x61\x50\x20\x20\x55\x00\x00\x55\x01\x21\x55\x21\x63\x50\x03\xcb\x55\x24\x9f\x56\x43\x55\x07\x41\x20\x55\x20\x00\x55\x00\x01\x85\xaf\x24\x08\x5a";
          paths[4] = "\x4d\x80\xd8\x89\x05\x43\x9a\x68\x42\x34\x65\x3c\x00\x55\x89\x3f\x45\xd3\x9a\x48\xd2\xd8\x58\x89\x5a\x00";
          fill[0] = "#553852";
          fill[1] = "#553852";
          fill[2] = "#553852";
          fill[3] = "#553852";
          fill[4] = "#553852";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
      }
      function parts_Door7() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [5, 158, 421, 421];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\x21\x01\x09\x63\xc7\x44\xf9\xfa\x34\xe7\xeb\x34\x88\x43\x50\x01\xdb\x56\x08\x28\x56\x01\x6f\x45\xef\xf5\x54\xa1\x1f\x55\xe8\x17\x05\x73\xd7\x45\xb9\xbd\x55\x34\x43\x60\x73\x7e\x66\x8b\x37\x68\x6e\xef\x68\x68\x13\x59\x85\xe5\x58\x21\x01\x09\x5a";
          paths[1] = "\x4d\x50\x86\x33\x05\x43\x82\x55\x35\x07\x55\x24\x17\x55\x6d\x63\x50\x03\x35\x45\xfc\x16\x56\x02\x5a\x56\x0c\x26\x55\x01\x8b\x55\x08\xc6\x05\x43\x1a\x75\xef\x24\x85\x51\x13\x85\xb5\x63\x50\x05\x48\x55\x2c\x3c\x55\x63\x30\x55\x01\x66\x54\x03\xcc\x53\x0a\x34\x03\x53\x87\x55\xd5\x86\x55\x33\x5a\x00";
          paths[2] = "\x4d\x60\x10\x26\x05\x61\x69\x55\x69\x00\x55\x00\x01\x45\xc5\x06\x05\x63\xe0\x44\xf9\xd8\x44\xf7\xbd\x54\x03\x01\x55\xa1\x05\x65\x47\xfb\x64\xe7\x73\x40\xfb\x31\x46\xfa\xcb\x06\x63\x11\x45\xfc\x77\x45\xfc\x7c\x45\xfc\x43\x60\x0f\xa0\x67\x18\x62\x66\x10\x26\x05\x5a";
          paths[3] = "\x4d\x60\x19\x23\x05\x63\x08\x65\x3c\x08\x75\x7a\xfc\x84\xb7\x1a\x55\x01\x37\x55\x10\x47\x55\x04\x1d\x45\xe6\x06\x45\x21\x1c\x35\xe1\x03\x45\x2d\x03\x35\x3a\x1e\x25\x67\x43\x60\x6f\x01\x65\x2f\x1b\x65\x19\x23\x05\x5a";
          paths[4] = "\x4d\x50\x5e\xe5\x06\x6d\xe0\x54\x00\x61\x50\x20\x20\x55\x00\x01\x55\x01\x41\x55\x00\x61\x50\x20\x20\x55\x00\x01\x55\x01\xbf\x54\x00";
          fill[0] = "#504650";
          fill[1] = "#f7931e";
          fill[2] = "#f77074";
          fill[3] = "#f7931e";
          fill[4] = "#ffde80";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
      }
      function parts_Heart_1() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [13, 312, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x70\x11\x98\x07\x63\xd4\x44\xff\xaf\x44\xd6\x84\x44\xce\x43\x60\x62\x51\x67\x42\x2b\x67\x12\x15\x57\xdf\xf0\x56\xa5\xd4\x56\x74\xab\x06\x63\xf7\x44\xf4\xcf\x44\xcc\xbe\x44\xc2\x43\x40\xd8\x20\x56\x02\x9a\x55\x61\x64\x05\x63\x82\x45\xb4\x39\x46\xe4\xa7\x56\x11\x0f\x45\xfc\x54\x45\xd6\x66\x45\xc4\x05\x45\xfc\x58\x45\xe1\x62\x45\xd8\x10\x45\xf4\x33\x45\xf2\x42\x45\xf2\x08\x45\xff\x31\x45\xfd\x3d\x45\xfd\x96\x55\x15\xd8\x55\x69\xa0\x65\x03\xfb\x54\x10\xbc\x54\x64\xb4\x54\x71\x04\x55\x01\xb9\x54\x4c\xa5\x54\x60\xf7\x54\x13\xdf\x54\x13\xd5\x54\x21\xed\x54\x1c\xc3\x54\x19\xb0\x54\x32\x73\x40\xcf\x10\x45\xbd\x21\x05\x63\xf6\x54\x0b\xc9\x54\x29\xb5\x54\x35\x43\x70\x40\x7e\x77\x23\x99\x77\x11\x98\x07\x5a";
          paths[1] = "\x4d\x80\xf7\xa8\x05\x43\xf7\x58\x43\xb6\x58\x20\x5c\x58\x0f\x63\x40\xec\xf6\x44\xd9\x09\x45\xc4\x01\x45\xf6\xfe\x44\xc6\xff\x44\xb7\x0a\x45\xee\x10\x45\xa6\x22\x45\x9e\x28\x45\xed\x13\x45\x97\x45\x45\x8f\x3f\x45\xb7\xde\x44\x63\xcf\x44\x14\xc7\x44\xb6\x04\x45\x92\xfe\x44\x4f\x26\x05\x43\x4d\x55\x84\x28\x55\x99\x1e\x55\xbc\x63\x40\xe1\x31\x45\xec\x82\x55\x1c\xa7\x55\x0e\x09\x55\x3b\x32\x55\x42\x3f\x55\x31\x28\x55\x6b\x44\x55\x9e\x69\x55\x2f\x15\x55\x4e\x3a\x55\x7e\x4f\x55\x3e\x0c\x55\x63\x47\x55\x98\x22\x45\xfc\xfc\x44\xff\xfd\x54\x03\xfb\x04\x73\x46\x45\xd4\x4f\x45\xc9\x63\x50\x12\xec\x54\x30\xf1\x54\x43\xdf\x54\x13\xe6\x54\x3c\xe8\x54\x4f\xd0\x54\x08\xf0\x54\x22\xf1\x54\x2a\xdf\x54\x05\xf8\x54\x55\xae\x54\x5b\xa0\x54\x11\xe3\x54\x34\xbb\x54\x46\x9f\x04\x43\xe3\x58\xf8\xfb\x58\xb4\xf7\x58\xa8\x5a\x00";
          paths[2] = "\x4d\x60\x3c\xd6\x06\x63\xf5\x54\x0d\xdc\x54\x1d\xcf\x54\x29\xf7\x54\x07\xee\x44\xf6\xe8\x44\xf2\xf5\x44\xf4\xe3\x44\xf2\xd8\x44\xe7\xed\x44\xf2\xd5\x44\xef\xc8\x44\xdc\x01\x45\xfc\x11\x45\xf3\x14\x45\xf0\x0d\x45\xfc\x30\x45\xd9\x38\x45\xe1\x0a\x55\x10\x20\x55\x14\x29\x55\x25\x61\x50\x22\x22\x55\x00\x00\x55\x00\x10\x55\x0c\x43\x60\x28\xbb\x66\x2f\xcb\x66\x3c\xd6\x06\x5a";
          paths[3] = "\x4d\x50\x0d\xf0\x05\x63\xfe\x44\xf9\x03\x45\xe4\x0b\x45\xe3\x24\x55\x0a\x51\x55\x06\x75\x55\x0d\x08\x55\x02\xfe\x54\x10\x03\x55\x17\x00\x55\x47\x26\x55\x22\xcf\x54\x4a\xf4\x44\xfe\xc9\x54\x0f\xc0\x54\x06\x43\x50\x05\x2a\x56\x10\xfb\x55\x0d\xf0\x05\x5a";
          paths[4] = "\x4d\x60\xc2\xc3\x05\x63\xf3\x44\xfb\xe8\x44\xf0\xda\x44\xf1\xfc\x54\x00\xf7\x54\x00\xf7\x44\xfa\x61\x50\x02\x02\x55\x00\x00\x55\x00\xfd\x44\xfe\x63\x40\xfb\x02\x45\xf9\xff\x44\xf6\xfd\x44\xf5\xfa\x44\xeb\xf4\x44\xde\xf5\x44\xf1\xf9\x44\xf8\xde\x44\xf2\xd0\x54\x00\xfa\x44\xf5\xe0\x54\x00\xe2\x04\x73\x37\x55\x09\x3c\x55\x0b\x63\x50\x0c\x08\x55\x1a\x06\x55\x27\x0a\x55\x06\x02\x55\x0b\x2c\x55\x09\x3a\x05\x53\xc3\x56\xb7\xc2\x56\xc3\x5a\x00";
          paths[5] = "\x4d\x80\x49\x60\x05\x63\x01\x45\xf0\x13\x45\xb3\x1b\x45\xb2\x0e\x55\x02\x1b\x55\x01\x27\x55\x09\x14\x55\x01\x21\x55\x0f\x33\x55\x17\x06\x55\x03\x26\x55\x1f\x29\x55\x2c\x73\x40\xb1\x1f\x45\xa5\x29\x05\x63\xfb\x54\x03\xf9\x54\x02\xf6\x44\xfc\xf6\x44\xee\xdc\x44\xe6\xca\x44\xe0\x43\x80\x49\x63\x85\x48\x62\x85\x49\x60\x05\x5a";
          paths[6] = "\x4d\x80\x3a\xcc\x06\x63\xfb\x54\x08\xf6\x54\x11\xee\x54\x13\x73\x40\xd7\x1d\x45\xcb\x25\x45\xe9\xe0\x44\xdf\xd7\x04\x63\xfc\x44\xfc\xf9\x44\xf8\xfc\x44\xf2\x07\x45\xed\x20\x45\xf0\x28\x45\xdd\x06\x45\xf7\x0a\x45\xf1\x14\x45\xfa\x41\x60\xb7\xb7\x56\x00\x00\x55\x01\x3a\x68\xcc\x5a\x00";
          paths[7] = "\x4d\x70\xb8\xda\x06\x63\x05\x55\x07\x26\x55\x32\x1e\x55\x36\xf2\x54\x02\xea\x54\x1f\xe0\x54\x0f\x43\x70\x9f\xfa\x76\x92\xef\x76\xb8\xda\x06\x5a";
          paths[8] = "\x4d\x60\xe6\x79\x07\x61\x43\x55\x43\x00\x55\x00\x01\x45\xe4\xf2\x04\x63\xfd\x44\xfc\xf8\x54\x01\xf5\x44\xfd\x03\x45\xf8\x0c\x45\xf2\x10\x45\xea\x73\x50\x15\x0a\x55\x1d\x0d\x55\x05\x09\x55\x03\x0f\x05\x53\xed\x76\x7a\xe6\x76\x79\x5a\x00";
          paths[9] = "\x4d\x60\xfc\x65\x07\x63\xe5\x54\x00\x94\x44\xbc\x89\x44\xb4\x61\x70\x19\x19\x57\x00\x00\x55\x01\xbd\x44\xd1\x63\x40\xf2\xf5\x44\xe3\xe9\x44\xcd\xdb\x04\x6c\xff\x44\xff\x63\x40\xf8\xfa\x44\xed\xf0\x44\xe0\xe5\x04\x73\xdb\x44\xe0\xd6\x44\xdd\x6c\x40\xfe\xff\x04\x43\x8b\x65\x60\x71\x65\x1a\x84\x55\xdf\x63\x50\x0f\xcf\x54\x3b\xb2\x54\x75\xb2\x04\x61\xc5\x55\xc5\x00\x55\x00\x01\x55\x18\x01\x05\x63\x08\x55\x00\x35\x55\x04\x36\x55\x04\x15\x55\x00\x36\x55\x0e\x56\x55\x1c\x12\x55\x08\x2a\x55\x12\x30\x55\x12\x68\x50\x02\x63\x50\x0b\x00\x55\x16\x07\x55\x1f\x0d\x05\x73\x0d\x55\x09\x11\x55\x09\x3a\x45\xdd\x51\x45\xcd\x6c\x50\x23\xe9\x04\x63\x0b\x45\xf8\x22\x45\xf1\x3b\x45\xea\x10\x45\xfc\x33\x45\xee\x33\x45\xee\x73\x50\x30\xf8\x54\x48\xf8\x04\x63\x22\x55\x00\x3b\x55\x09\x4c\x55\x1b\x1a\x55\x1b\x13\x55\x46\x13\x55\x46\x73\x50\x00\x02\x55\x00\x02\x05\x63\xfa\x54\x89\x88\x54\xdc\x1a\x64\x2b\xe0\x54\x17\xc2\x54\x2d\xa6\x54\x44\xf2\x54\x12\xdc\x54\x1e\xca\x54\x28\x43\x70\x0f\x5d\x77\x01\x65\x67\xfc\x65\x07\x5a";
          paths[10] = "\x4d\x70\x42\x2b\x07\x63\xf0\x54\x15\xd5\x54\x20\xbe\x54\x2d\xf5\x54\x0b\x98\x44\xc1\x8d\x44\xb6\xca\x44\xe0\xbd\x44\xcd\x8a\x44\xab\xed\x44\xf1\xbe\x44\xc5\xb4\x44\xc0\x43\x50\x65\x38\x56\x74\x8b\x65\x10\x9e\x05\x63\x12\x55\x00\x20\x55\x07\x34\x55\x04\x1f\x45\xfc\x7a\x55\x31\x8b\x55\x2e\x73\x50\x2d\x27\x55\x3e\x0f\x05\x63\x11\x45\xfc\x56\x45\xcb\x6f\x45\xbc\x12\x45\xf2\x5d\x45\xe6\x69\x45\xda\x2c\x45\xf9\x69\x45\xee\x89\x55\x0f\x73\x50\x0e\x3b\x55\x11\x40\x05\x43\x76\x68\x6e\xba\x67\xc5\x42\x77\x2b\x5a\x00";
          paths[11] = "\x4d\x70\x01\x26\x07\x6c\xf8\x44\xff\x73\x40\xd9\xe4\x44\xbf\xd5\x04\x63\xc3\x44\xdb\x74\x44\xab\x57\x44\x6e\xe8\x44\xe2\xe1\x44\xc1\xee\x44\xa4\x53\x60\x23\xdf\x65\x49\xd7\x05\x68\x04\x05\x63\x38\x55\x03\x63\x55\x11\x85\x55\x29\x19\x55\x0b\x37\x55\x28\x3a\x55\x28\x6c\x50\x09\xf8\x04\x68\x01\x05\x63\x01\x45\xff\x3a\x45\xcb\x3a\x45\xcb\x21\x45\xe9\x4b\x45\xdc\x6f\x45\xdc\x73\x50\x40\x0c\x55\x53\x24\x05\x63\x21\x55\x20\x14\x55\x4e\xdc\x54\x80\xf5\x54\x0a\xe6\x54\x18\xd5\x54\x29\x43\x70\x6b\xe7\x76\x25\x26\x77\x01\x26\x07\x5a";
          paths[12] = "\x4d\x70\x0a\x03\x07\x68\xfc\x04\x73\xed\x44\xee\xe1\x44\xe4\x63\x40\xe3\xe8\x44\xbd\xc9\x44\xaf\xa1\x44\xf5\xed\x44\xf2\xd7\x44\xf7\xc5\x04\x41\x34\x55\x34\x00\x55\x00\x01\x65\xb1\x2a\x06\x68\x02\x05\x63\x1b\x55\x02\x30\x55\x0b\x40\x55\x1a\x0c\x55\x07\x1b\x55\x1a\x1c\x55\x1a\x6c\x50\x04\xfb\x04\x68\x00\x05\x6c\x1c\x45\xde\x63\x50\x10\xf1\x54\x24\xe8\x54\x35\xe8\x04\x73\x1f\x55\x08\x28\x55\x17\x63\x50\x10\x15\x55\x0a\x33\x45\xef\x54\x45\xfa\x07\x45\xf4\x10\x45\xeb\x1b\x05\x43\x3d\x67\xda\x1c\x77\x03\x0a\x77\x03\x5a\x00";
          fill[0] = "#504650";
          fill[1] = "#dd57b1";
          fill[2] = "#ffa141";
          fill[3] = "#ff79c1";
          fill[4] = "#9d6cd8";
          fill[5] = "#ffa141";
          fill[6] = "#ff79c1";
          fill[7] = "#9d6cd8";
          fill[8] = "#ff79c1";
          fill[9] = "none";
          fill[10] = "#66c5c8";
          fill[11] = "#af5395";
          fill[12] = "#de6b96";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
      }
      function parts_Heart_artboard() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [83, 728, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x40\xf9\xf8\x04\x48\xff\x08\x56\xfd\x08\x48\xf9\x04\x5a";
          paths[1] = "\x4d\x80\xcf\x0d\x08\x61\x69\x55\x69\x00\x55\x00\x01\x45\xe6\x00\x05\x63\x82\x44\xf9\xfb\x53\x02\x79\x43\xff\x84\x54\x02\x09\x54\x03\x8b\x53\x08\xfa\x54\x01\xcb\x44\xf9\xc2\x44\xfa\xbd\x54\x0d\x79\x44\xf1\x7c\x54\x03\x76\x50\x0e\x63\x50\x4a\x03\x55\x93\x00\x55\xdd\x03\x55\x20\x02\x55\x41\x07\x55\x61\x02\x55\x1b\xfc\x54\x3d\xf5\x54\x58\xfa\x54\x37\x0a\x55\x69\xfe\x54\xa0\xf8\x54\x08\xff\x54\x11\x00\x55\x17\x01\x55\x17\x06\x55\x30\x0e\x55\x4c\x0a\x55\x39\xf8\x54\x74\xef\x54\xaf\xf8\x54\x19\x04\x55\x34\xfa\x54\x4e\xfe\x54\x3a\x0a\x55\x39\x09\x55\x74\x04\x05\x56\x08\x08\x63\xe8\x54\x00\x0b\x55\x02\xf3\x54\x06\x43\x80\xe6\x0f\x88\xdc\x0c\x88\xcf\x0d\x08\x5a";
          paths[2] = "\x4d\x80\xfe\x2b\x08\x63\xc9\x54\x04\xd1\x54\x0d\x9d\x54\x03\xf5\x44\xfe\xe9\x44\xff\xde\x44\xff\xe0\x54\x00\xc1\x44\xf7\xa6\x44\xfb\x6f\x54\x10\xe6\x53\x07\x5a\x53\x08\xa3\x54\x00\x43\x54\x01\xe6\x53\x00\xdd\x44\xff\xbb\x54\x00\x98\x54\x01\x76\x50\x10\x63\x50\x20\xff\x54\x41\xfc\x54\x61\xfb\x54\x32\xff\x54\x65\x01\x55\x99\x05\x55\x1b\x01\x55\x37\x06\x55\x54\x05\x05\x73\x39\x45\xfd\x54\x45\xfc\x63\x50\x22\xff\x54\x41\x03\x55\x63\x04\x55\x1e\x01\x55\x39\xfe\x54\x56\xfe\x54\x5c\x01\x55\xb9\xfc\x64\x15\xf9\x54\x15\xff\x54\x2a\x04\x55\x41\x01\x05\x61\x27\x66\x27\x00\x55\x00\x01\x55\x3f\x00\x05\x63\x1d\x55\x03\xfc\x54\x03\x17\x55\x03\x56\x80\x2b\x5a\x00";
          paths[3] = "\x4d\x80\x8c\x16\x08\x63\xe7\x44\xfc\xcc\x54\x06\xb2\x54\x02\xc5\x44\xf7\x8a\x54\x00\x51\x54\x08\xe5\x54\x04\xcc\x44\xfd\xb4\x44\xf6\xfa\x44\xff\xf1\x44\xfe\xe9\x44\xff\xc9\x54\x06\x97\x54\x12\x60\x54\x08\xe5\x44\xfc\xc3\x54\x02\xa8\x54\x06\xe0\x54\x05\xbf\x54\x00\x9f\x44\xfe\xb6\x44\xfd\x6d\x54\x00\x23\x44\xfd\x76\x50\x11\x63\x50\x22\xff\x54\x45\xff\x54\x68\xff\x54\x5c\x01\x55\xbd\x00\x65\x1a\x00\x55\x8d\xff\x64\x15\x07\x65\xa6\xf8\x54\x1b\xfd\x54\x3b\x05\x55\x5a\x05\x55\x0b\x00\x55\x17\xff\x54\x22\x01\x55\x35\x0a\x55\x2d\x01\x55\x63\xfd\x04\x6c\x02\x55\x00\x56\x80\x1a\x43\x80\xc5\x1f\x88\xc5\x20\x88\x8c\x16\x08\x5a";
          paths[4] = "\x4d\x80\x19\x38\x07\x63\xdd\x44\xfe\x02\x45\xd6\x07\x45\xc5\x13\x45\xd9\x3b\x45\xc5\x57\x45\xa6\x0f\x45\xf5\x1e\x45\xea\x30\x45\xe4\x0e\x45\xf1\x1d\x45\xe9\x31\x45\xe7\x10\x45\xf3\x21\x45\xed\x27\x45\xf4\x02\x55\x02\xff\x54\x16\xff\x54\x16\x43\x80\xec\x6f\x86\x38\xd5\x86\x19\x38\x07\x5a";
          paths[5] = "\x4d\x80\x36\x5f\x07\x63\xfa\x54\x04\xf9\x44\xfa\xf4\x44\xf6\x73\x40\xfa\xfd\x44\xf7\xf7\x04\x63\x07\x45\xe3\x17\x45\xc6\x29\x45\xad\x15\x45\xe3\x31\x45\xc8\x52\x45\xb8\x61\x50\x3f\x3f\x55\x00\x00\x55\x01\x1a\x45\xea\x63\x50\x19\xfa\x54\x26\xe5\x54\x4b\xe3\x54\x01\x08\x55\x02\x12\x45\xff\x17\x05\x73\xc2\x54\x0f\x96\x54\x39\x63\x40\xdd\x0b\x45\xd1\x2e\x45\xb9\x45\x45\xf5\x0e\x45\xf0\x22\x45\xe8\x32\x45\xff\x08\x45\xfc\x01\x45\xfe\x09\x05\x53\x3d\x78\x5a\x36\x78\x5f\x5a\x00";
          paths[6] = "\x4d\x80\x21\x43\x07\x63\xf9\x54\x01\xf7\x44\xfe\xf2\x44\xf9\x0c\x45\xe8\x13\x45\xc4\x2d\x45\xb3\x35\x45\xb7\x7d\x45\x8b\xbd\x45\x80\x06\x45\xff\x05\x55\x09\x04\x55\x0f\xf6\x54\x08\xe9\x54\x0a\xdc\x54\x0d\xeb\x54\x02\xea\x54\x0e\xd8\x54\x15\xf1\x54\x04\xe7\x54\x13\xd6\x54\x1e\x43\x80\x57\xdf\x86\x36\x0e\x87\x21\x43\x07\x5a";
          paths[7] = "\x4d\x50\x21\x92\x05\x43\xf8\x54\x92\x07\x55\x54\x2d\x55\x6b\x63\x50\x01\xe1\x54\x3b\xc9\x54\x3b\xf3\x54\x16\xf5\x54\x56\xfa\x54\x32\x12\x55\x0f\xf7\x54\x3d\xe8\x54\x4d\xf4\x04\x73\x00\x55\x1e\xec\x54\x1d\x63\x50\x0f\x22\x45\xc7\x3e\x45\xba\x18\x45\xf5\x1d\x45\xbf\x22\x45\xc3\xfd\x04\x43\x44\x55\xc3\x18\x55\x96\x21\x55\x92\x5a\x00";
          paths[8] = "\x4d\x70\xb5\x56\x07\x63\xd7\x54\x00\xe6\x44\xc2\x0c\x45\xda\x01\x45\xe1\x3b\x45\xc9\x3b\x45\xf3\x16\x45\xf5\x56\x45\xfa\x32\x55\x12\x0f\x45\xf7\x3d\x45\xe8\x4d\x45\xf4\x73\x50\x00\x1e\x45\xec\x1d\x05\x63\x0f\x55\x22\xc7\x54\x3e\xba\x54\x18\xf5\x54\x1d\xbf\x54\x22\xc3\x44\xfd\x43\x70\xd7\x88\x77\xac\x5a\x77\xb5\x56\x07\x5a";
          paths[9] = "\x4d\x70\xca\xda\x06\x63\xf5\x44\xfc\xe8\x44\xec\xdf\x44\xe6\xfb\x44\xfc\xe7\x44\xee\xe3\x44\xe9\xea\x44\xf2\xc7\x44\xd3\xc3\x44\xcf\xfe\x54\x01\xf4\x44\xf8\xec\x44\xf6\xea\x44\xf8\xec\x44\xf8\xe3\x44\xf8\x73\x40\xf6\x06\x45\xf0\x0a\x05\x63\xf4\x54\x09\xe5\x54\x13\xd9\x54\x1c\xfd\x54\x04\xf1\x54\x0d\xec\x54\x0f\xf9\x54\x06\xfa\x54\x08\xf0\x54\x0b\xf9\x54\x07\xe6\x54\x19\xd9\x54\x1f\xff\x54\x01\xe9\x54\x14\xe5\x54\x15\xf3\x54\x05\xeb\x54\x11\xde\x54\x16\xf8\x54\x03\xfd\x54\x0d\x00\x55\x12\x05\x55\x08\x02\x55\x11\x05\x55\x1a\x03\x55\x06\x03\x55\x0d\x04\x55\x13\x04\x55\x11\x05\x55\x23\x07\x55\x34\xff\x54\x08\x02\x55\x0e\x04\x55\x16\x01\x55\x0f\x08\x55\x1d\x08\x55\x2c\x00\x55\x05\x05\x55\x1f\x07\x55\x28\x09\x55\x09\x05\x55\x15\x06\x55\x1d\x00\x55\x03\xfe\x54\x12\xfd\x54\x12\x61\x50\x0b\x0b\x55\x00\x00\x55\x00\xf6\x54\x00\x63\x40\xfc\x05\x55\x00\x0e\x55\x01\x14\x55\x0e\x07\x55\x23\x01\x55\x32\x02\x55\x19\x01\x55\x24\xfd\x54\x3e\xfd\x54\x1f\x01\x55\x2e\x03\x55\x47\xff\x54\x0f\xfe\x54\x27\x04\x55\x3b\x02\x55\x11\xff\x54\x5b\x04\x55\x6a\xfb\x54\x07\xfc\x54\x05\xf3\x44\xfb\xec\x04\x61\x0a\x55\x0a\x00\x55\x00\x00\x45\xfc\xff\x04\x63\xff\x44\xf4\x05\x45\xe8\x04\x45\xdc\x00\x45\xe3\x07\x45\xc9\x07\x45\xab\xfe\x44\xf6\x03\x45\xea\x04\x45\xe0\x03\x45\xf1\x05\x45\xed\x06\x45\xe3\x05\x45\xde\x06\x45\xde\x09\x45\xc0\x43\x70\xf2\xfd\x76\xe7\xf4\x76\xca\xda\x06\x5a";
          paths[10] = "\x4d\x60\xd7\xe3\x06\x63\x13\x45\xf3\x15\x45\xf1\x27\x45\xe3\x73\x50\x26\xdd\x54\x3b\xca\x04\x63\x05\x45\xfc\x07\x45\xfa\x0e\x55\x00\x0d\x55\x0a\x19\x55\x10\x26\x55\x19\x09\x55\x07\x22\x55\x18\x3c\x55\x2b\x0a\x55\x08\x1f\x55\x16\x22\x55\x18\x0d\x55\x0a\x1d\x55\x18\x1e\x55\x1d\x02\x55\x0f\x00\x55\x00\x00\x55\x0e\x00\x55\x12\xfd\x54\x12\xfa\x54\x25\x01\x55\x0c\xfa\x54\x29\xf7\x54\x34\x73\x50\x00\x23\x45\xfd\x2d\x05\x63\xfb\x54\x26\xfb\x54\x34\xf6\x54\x5c\xff\x54\x08\xfa\x54\x03\xf4\x54\x04\x73\x40\xe6\xff\x44\xdf\x02\x05\x63\xfd\x54\x00\xed\x44\xff\xe7\x44\xff\xed\x44\xff\xa7\x54\x04\x9a\x54\x00\xfe\x44\xfd\xa0\x54\x03\x96\x54\x01\x61\x50\x71\x71\x55\x00\x00\x55\x00\xf2\x44\xff\x63\x40\xfa\xfd\x44\xfd\xe7\x44\xfc\xe0\x44\xfc\xeb\x44\xff\xd5\x44\xfa\xc0\x54\x00\xfc\x44\xfb\xe1\x44\xfd\xd8\x44\xff\xf2\x44\xfc\xe3\x44\xfa\xd5\x44\xfe\xf7\x54\x01\xef\x44\xff\xe6\x44\xfe\xfa\x54\x00\xec\x54\x01\xe5\x54\x00\x00\x55\x14\xf1\x54\x23\xe5\x04\x43\xc5\x66\xf5\xcd\x66\xea\xd7\x66\xe3\x5a\x00";
          paths[11] = "\x4d\x60\x63\x03\x07\x63\x04\x55\x01\x2e\x55\x17\x2e\x55\x1a\x01\x55\x06\xfe\x54\x0f\x00\x55\x14\x02\x55\x09\xff\x54\x12\x01\x55\x1b\x02\x55\x10\x07\x55\x20\x06\x55\x30\x00\x55\x08\x05\x55\x0e\x04\x55\x16\x00\x55\x10\x03\x55\x20\x03\x55\x30\x00\x55\x07\xff\x54\x0e\x01\x55\x15\x73\x50\x00\x12\x55\x02\x1b\x05\x63\x01\x55\x02\xff\x54\x07\xff\x54\x0a\x73\x50\x03\x03\x45\xff\x03\x05\x63\xea\x54\x00\xf0\x54\x02\xee\x44\xfc\xff\x44\xfc\xfd\x44\xea\xff\x44\xe6\x01\x45\xf9\xfd\x44\xf2\xfb\x44\xeb\xfd\x44\xf7\x00\x45\xee\xfb\x44\xe6\xfe\x44\xfb\xfd\x44\xf6\xfe\x44\xf1\x61\x50\x66\x66\x55\x00\x00\x55\x01\xfd\x44\xf0\x63\x40\xfc\xf6\x44\xfb\xec\x44\xf9\xe2\x44\xfb\xf4\x54\x00\xe7\x44\xfb\xdb\x44\xfe\xef\x44\xfe\xde\x44\xf9\xce\x04\x43\x65\x76\x16\x68\x76\x0c\x63\x76\x03\x5a\x00";
          paths[12] = "\x4d\x70\xde\xee\x06\x63\x10\x55\x11\x10\x55\x15\x06\x55\x0d\xf7\x44\xfd\xda\x44\xe3\xcf\x44\xdd\xfa\x44\xfd\xc7\x44\xd3\xb9\x44\xc9\x53\x70\x59\x92\x76\x4c\x8a\x06\x63\xfd\x54\x00\xf4\x44\xf6\xf5\x44\xf5\x0a\x45\xf8\x05\x45\xfc\x0b\x45\xff\x10\x55\x0c\x30\x55\x23\x3f\x55\x2f\x10\x55\x09\x18\x55\x15\x27\x55\x20\x43\x70\xb9\xd2\x76\xd0\xe9\x76\xde\xee\x06\x5a";
          paths[13] = "\x4d\x60\x86\x01\x08\x63\xfb\x44\xfe\xf9\x54\x00\xf8\x54\x01\xfc\x54\x04\x00\x55\x09\x01\x55\x0e\x0e\x55\x05\x20\x55\x00\x30\x55\x01\x19\x55\x01\x24\x45\xfe\x3e\x45\xfe\x1f\x55\x01\x2e\x55\x02\x47\x55\x00\x0f\x45\xfe\x27\x55\x02\x3b\x55\x01\x11\x45\xff\x58\x55\x04\x68\x45\xfe\x00\x55\x00\x07\x45\xfa\xfe\x44\xf5\xfa\x44\xfc\xd8\x54\x01\xd0\x54\x01\xe6\x54\x01\xce\x44\xfe\xb5\x44\xff\x73\x40\xcc\x00\x45\xb2\x00\x05\x63\xf0\x44\xff\xe5\x54\x03\xd5\x54\x01\x73\x40\xe1\xff\x44\xd3\xfe\x04\x63\xe8\x44\xff\xfa\x44\xff\xea\x54\x00\x43\x60\x92\x01\x68\x8d\x02\x68\x86\x01\x08\x5a";
          paths[14] = "\x4d\x60\xdb\x08\x08\x63\xf3\x44\xff\xfe\x44\xc3\xfb\x44\xae\xfe\x44\xda\xff\x44\xb3\xfe\x44\x8b\xfc\x44\xe5\x23\x45\xee\x32\x45\xed\x0d\x45\xfe\x2e\x45\xf1\x29\x55\x0b\xf5\x54\x43\xfa\x54\xa2\xf4\x54\xca\x43\x70\x22\x0c\x68\xf0\x02\x68\xdb\x08\x08\x5a";
          paths[15] = "\x4d\x60\xf1\x35\x07\x63\xff\x54\x00\xe5\x44\xfd\xe8\x54\x0c\x01\x55\x0c\xff\x54\x3c\x00\x55\x4b\x03\x55\x08\x00\x55\x1e\x02\x55\x2b\xff\x54\x15\x01\x55\x2b\xfd\x54\x40\x01\x55\x10\x0a\x55\x0d\x15\x55\x0a\x00\x45\xdf\x01\x45\xbd\x02\x45\x9c\x53\x60\xf1\x58\x67\xf1\x35\x07\x5a";
          paths[16] = "\x4d\x70\x0e\x32\x07\x61\x18\x55\x18\x00\x55\x00\x01\x45\xf3\x01\x05\x63\xf9\x44\xfe\xf7\x44\xfe\xf2\x54\x01\x00\x55\x23\x01\x55\x47\xff\x54\x6a\x73\x40\xff\x42\x45\xff\x64\x05\x63\x04\x45\xff\x1a\x45\xff\x1b\x45\xff\x43\x70\x0e\xbb\x77\x10\x76\x77\x0e\x32\x07\x5a";
          paths[17] = "\x4d\x70\x10\x31\x07\x63\x02\x55\x45\x02\x55\x8a\xff\x54\xce\x06\x55\x00\x0c\x55\x04\x0f\x55\x01\x06\x45\xfa\x01\x45\xd0\x06\x45\xc2\x01\x45\xd2\x01\x45\x9e\x06\x45\x70\x43\x70\x23\x2a\x77\x15\x2f\x77\x10\x31\x07\x5a";
          paths[18] = "\x4d\x60\xe8\x93\x07\x6d\xf9\x54\x00\x61\x50\x07\x07\x55\x00\x01\x55\x01\x0e\x55\x00\x61\x50\x07\x07\x55\x00\x01\x55\x01\xf2\x54\x00";
          paths[19] = "\x4d\x70\x18\x61\x06\x73\x48\x54\x8a\x44\x54\x8e\x2a\x55\x24\x34\x55\x1f\x63\x50\x15\xf5\x54\x3f\xd3\x54\x67\xb2\x54\x2a\xdd\x54\x4f\xba\x54\x54\xb9\x04\x43\x4b\x67\x78\x23\x67\x5e\x18\x67\x61\x5a\x00";
          paths[20] = "\x4d\x60\x87\xd2\x06\x63\xf5\x54\x08\xde\x54\x18\xd7\x54\x1e\x04\x55\x07\x0b\x55\x07\x15\x55\x0b\x6c\x50\x10\x08\x05\x63\x08\x55\x07\x05\x55\x04\x0f\x55\x09\x07\x45\xfa\x1b\x45\xed\x29\x45\xe1\x43\x60\xac\xe3\x66\x98\xdb\x66\x87\xd2\x06\x5a";
          paths[21] = "\x4d\x60\xa5\xbc\x06\x6c\xf0\x54\x0c\xf9\x54\x05\x63\x50\x10\x0b\x55\x21\x13\x55\x31\x1d\x55\x08\xf9\x54\x0f\xf2\x54\x17\xec\x04\x43\xc6\x66\xcd\xb7\x66\xc3\xa5\x66\xbc\x5a\x00";
          paths[22] = "\x4d\x60\xc0\xa7\x06\x6c\xe9\x54\x12\x63\x50\x10\x08\x55\x20\x11\x55\x2f\x1b\x05\x6c\x12\x45\xf0\x43\x60\xdd\xba\x66\xcf\xb1\x66\xc0\xa7\x06\x5a";
          paths[23] = "\x4d\x60\xde\x96\x06\x63\xff\x44\xff\xfe\x44\xff\xfc\x44\xfe\x6c\x40\xea\x11\x05\x63\x0e\x55\x09\x1c\x55\x13\x2a\x55\x1d\x6c\x50\x01\xff\x04\x63\x02\x45\xff\x0c\x45\xf7\x18\x45\xed\x43\x60\xfa\xa6\x66\xed\x9e\x66\xde\x96\x06\x5a";
          paths[24] = "\x4d\x60\xf5\x80\x06\x6c\xea\x54\x11\x63\x50\x0e\x0c\x55\x1e\x11\x55\x2d\x19\x05\x4c\x20\x67\x98\x43\x70\x12\x8f\x76\x04\x86\x66\xf5\x80\x06\x5a";
          paths[25] = "\x4d\x70\x36\x6f\x06\x63\xfb\x44\xfc\xe7\x44\xf5\xe4\x44\xf5\x73\x40\xf7\x09\x45\xf7\x09\x05\x61\xc0\x55\xc0\x00\x55\x00\x00\x45\xea\x0f\x55\x80\x80\x55\x00\x00\x55\x01\x15\x55\x0c\x63\x50\x07\x05\x55\x0f\x0b\x55\x15\x0d\x55\x0e\xef\x54\x19\xeb\x54\x1e\xe5\x04\x53\x3b\x67\x73\x36\x67\x6f\x5a\x00";
          paths[26] = "\x4d\x70\xb7\x8e\x07\x48\xb7\x07\x63\xfd\x44\xff\xf5\x44\xff\xee\x44\xff\xf2\x54\x00\xe9\x44\xff\xe6\x44\xfd\x6c\x50\x00\x00\x05\x76\xff\x04\x63\xfe\x44\xf7\xfe\x44\xe9\xfe\x44\xe0\x00\x45\xfc\x00\x45\xf9\x00\x45\xf8\x61\x50\x03\x03\x55\x00\x00\x55\x01\x01\x45\xfd\x63\x50\x01\xff\x54\x03\xff\x54\x05\xff\x04\x68\x03\x05\x61\x2f\x55\x2f\x00\x55\x00\x00\x55\x06\x00\x05\x68\x01\x05\x61\x06\x55\x06\x00\x55\x00\x00\x55\x03\x01\x55\x17\x17\x55\x00\x00\x55\x00\x04\x45\xff\x6c\x50\x03\xff\x04\x61\x6b\x55\x6b\x00\x55\x00\x01\x55\x0c\xff\x04\x63\x0e\x55\x00\x11\x55\x02\x12\x55\x04\x61\x50\x04\x04\x55\x00\x00\x55\x01\x01\x55\x03\x63\x40\xfd\x15\x45\xfc\x1f\x45\xfc\x25\x05\x73\xff\x54\x08\xfc\x54\x08\x5a\x00";
          paths[27] = "\x4d\x70\xad\x5d\x07\x63\x08\x55\x00\x12\x55\x01\x11\x55\x05\xfa\x54\x29\xfd\x54\x2b\xfa\x54\x2b\xf9\x44\xfd\xd9\x54\x00\xd4\x44\xfc\xfd\x44\xf3\xff\x44\xdb\xfe\x44\xd7\x00\x45\xff\x01\x45\xfe\x04\x45\xfe\x68\x50\x09\x61\x50\x0a\x0a\x55\x00\x00\x55\x00\x03\x55\x01\x63\x50\x03\x00\x55\x05\xff\x54\x08\xff\x04\x73\x07\x45\xff\x0c\x45\xff\x6d\x50\x00\xfc\x04\x63\xfb\x54\x00\xf5\x54\x00\xf3\x54\x01\x68\x50\x00\x6c\x40\xfd\x01\x05\x61\x17\x55\x17\x00\x55\x00\x01\x45\xfc\x01\x55\x05\x05\x55\x00\x00\x55\x01\xfe\x54\x00\x6c\x40\xff\x00\x05\x68\xf7\x04\x63\xfe\x54\x00\xfc\x54\x00\xfa\x54\x02\x61\x50\x05\x05\x55\x00\x00\x55\x00\xff\x54\x04\x63\x50\x00\x01\x55\x00\x05\x55\x00\x08\x55\x00\x09\x55\x00\x17\x55\x02\x20\x05\x6c\x00\x55\x01\x01\x55\x01\x63\x50\x03\x03\x55\x0b\x04\x55\x1b\x04\x55\x07\x00\x55\x0f\x00\x55\x12\x01\x05\x6c\x01\x55\x00\x68\x50\x01\x61\x50\x05\x05\x55\x00\x00\x55\x00\x05\x45\xfc\x17\x55\x17\x00\x55\x00\x00\x55\x01\xfa\x04\x63\x00\x45\xfa\x01\x45\xf0\x04\x45\xdb\x61\x50\x05\x05\x55\x00\x00\x55\x00\xff\x44\xfb\x63\x40\xfe\xfe\x44\xfb\xfc\x44\xed\xfc\x04\x5a";
          paths[28] = "\x4d\x70\xab\x86\x07\x6c\xf9\x44\xff\x63\x40\xef\xfe\x44\xee\xfd\x44\xef\xf2\x54\x00\xfd\x54\x00\xf8\x54\x00\xf2\x04\x61\x03\x55\x03\x00\x55\x00\x01\x55\x00\xfd\x54\x03\x03\x55\x00\x00\x55\x01\x03\x45\xff\x68\x50\x00\x63\x50\x04\x00\x55\x08\x00\x55\x0c\x01\x05\x73\x09\x55\x01\x0d\x55\x01\x48\x70\xb1\x61\x50\x05\x05\x55\x00\x00\x55\x01\x04\x55\x01\x63\x50\x01\x01\x55\x01\x04\x55\x01\x05\x05\x73\xff\x54\x07\xff\x54\x0b\xff\x54\x07\xff\x54\x0a\x68\x50\x00\x63\x40\xff\x04\x45\xfa\x05\x45\xf7\x05\x05\x68\x00\x05\x5a";
          paths[29] = "\x4d\x70\x96\x66\x07\x68\x00\x05\x63\x08\x55\x00\x10\x55\x01\x19\x55\x01\x48\x70\xb1\x63\x50\x03\x00\x55\x04\x01\x55\x03\x05\x45\xff\x07\x45\xfe\x0e\x45\xfe\x15\x45\xff\x03\x45\xfb\x03\x45\xf9\x03\x45\xe1\xfc\x44\xeb\xff\x44\xe9\xe4\x44\xff\xff\x54\x00\xfe\x54\x01\xfe\x04\x6d\x00\x45\xfc\x61\x50\x05\x05\x55\x00\x00\x55\x00\xfb\x54\x07\x7b\x55\x7b\x00\x55\x00\x01\x55\x00\x0d\x05\x63\x00\x55\x05\xff\x54\x09\x03\x55\x0c\x73\x50\x07\x03\x55\x10\x04\x05\x6c\x07\x55\x01\x68\x50\x01\x63\x50\x03\x00\x55\x0a\x00\x55\x0b\xfa\x04\x68\x00\x05\x63\x00\x45\xfd\x01\x45\xf9\x01\x45\xf6\x73\x50\x01\xf9\x54\x01\xf5\x54\x00\xfb\x44\xfe\xfa\x04\x41\x07\x55\x07\x00\x55\x00\x00\x75\xb1\x64\x07\x68\xfe\x04\x63\xfc\x54\x00\xf7\x54\x00\xf3\x44\xff\x6c\x40\xf4\xff\x04\x5a";
          paths[30] = "\x4d\x70\x97\x40\x07\x6c\xff\x54\x00\x63\x40\xf9\xff\x44\xf1\xff\x44\xea\xff\x44\xf6\x00\x45\xf0\x00\x45\xee\xfe\x04\x6c\xff\x44\xff\x76\x40\xff\x61\x50\x83\x83\x55\x00\x00\x55\x00\x00\x45\xee\x63\x40\xff\xf8\x44\xff\xef\x54\x00\xe7\x54\x00\xfe\x54\x00\xfd\x54\x01\xfc\x04\x61\x03\x55\x03\x00\x55\x00\x01\x55\x02\xff\x04\x68\x09\x05\x61\x14\x55\x14\x00\x55\x00\x01\x55\x06\x01\x05\x68\x00\x05\x63\x03\x55\x02\x0b\x55\x02\x11\x55\x02\x08\x55\x00\x0c\x55\x00\x0d\x55\x02\x6c\x50\x00\x01\x05\x76\x01\x05\x61\x51\x55\x51\x00\x55\x00\x00\x45\xff\x0f\x55\x4b\x4b\x55\x00\x00\x55\x01\xff\x54\x0f\x68\x50\x00\x61\x50\x16\x16\x55\x00\x00\x55\x00\x00\x55\x05\x63\x50\x00\x04\x55\x00\x07\x45\xff\x09\x05\x61\x03\x55\x03\x00\x55\x00\x01\x45\xfd\x02\x05\x5a";
          paths[31] = "\x4d\x70\x6f\x0e\x07\x68\x04\x05\x6c\x06\x55\x00\x61\x50\x10\x10\x55\x00\x00\x55\x01\x05\x55\x01\x63\x50\x07\x04\x55\x1c\x01\x55\x1e\x03\x45\xfe\x0b\x55\x00\x14\x45\xfd\x1f\x45\xff\x02\x55\x00\x0b\x45\xff\x0d\x05\x73\xff\x54\x01\xff\x54\x01\x6c\x40\xff\x00\x05\x63\xf0\x44\xfe\xdc\x44\xff\xd8\x44\xfd\x01\x45\xf3\xfe\x44\xe3\x00\x45\xd6\x00\x45\xfd\x00\x45\xfd\x01\x45\xfd\x6d\x50\x00\xfc\x04\x68\x00\x05\x61\x05\x55\x05\x00\x55\x00\x00\x45\xfc\x02\x05\x63\xff\x54\x01\xff\x54\x03\xff\x54\x05\xff\x54\x08\xff\x54\x10\x00\x55\x19\x73\x50\x01\x0c\x55\x00\x12\x05\x76\x02\x05\x6c\x02\x55\x01\x63\x50\x03\x02\x55\x08\x02\x55\x13\x02\x55\x07\x00\x55\x0f\x00\x55\x16\x01\x05\x6c\x02\x55\x00\x61\x50\x05\x05\x55\x00\x00\x55\x00\x04\x45\xfd\x63\x50\x01\xfe\x54\x01\xfb\x54\x01\xf7\x54\x00\xfe\x54\x00\xfc\x54\x00\xfc\x04\x68\x00\x05\x56\x31\x07\x61\x50\x55\x50\x00\x55\x00\x00\x55\x01\xf0\x54\x4d\x4d\x55\x00\x00\x55\x01\x01\x45\xf1\x6c\x50\x00\xff\x44\xff\xff\x04\x63\xfe\x44\xfd\xfa\x44\xfd\xf1\x44\xfd\xfa\x54\x00\xf2\x54\x00\xf0\x44\xfe\x68\x50\x00\x61\x50\x11\x11\x55\x00\x00\x55\x00\xfa\x44\xff\x68\x40\xf7\x5a\x00";
          paths[32] = "\x4d\x70\x90\x37\x07\x61\x0a\x55\x0a\x00\x55\x00\x01\x45\xfe\x00\x55\x04\x04\x55\x00\x00\x55\x00\xfe\x44\xff\x68\x40\xf5\x61\x50\x16\x16\x55\x00\x00\x55\x00\xfa\x54\x01\x68\x40\xfe\x61\x50\x04\x04\x55\x00\x00\x55\x01\xfc\x44\xfc\x68\x50\x00\x61\x50\x4f\x4f\x55\x00\x00\x55\x00\xff\x44\xf4\x70\x55\x70\x00\x55\x00\x01\x55\x00\xf2\x54\x02\x02\x55\x00\x00\x55\x01\x01\x45\xfe\x63\x50\x01\xff\x54\x02\xff\x54\x05\xff\x04\x6c\x07\x55\x00\x05\x55\x00\x68\x50\x02\x6c\x50\x03\x00\x05\x61\x23\x55\x23\x00\x55\x00\x01\x55\x04\x00\x55\x06\x06\x55\x00\x00\x55\x01\x05\x55\x02\x05\x55\x05\x00\x55\x00\x01\x55\x01\x04\x05\x76\x00\x05\x68\x00\x05\x63\xfe\x54\x06\xfe\x54\x0b\xfe\x54\x11\x00\x55\x02\x00\x55\x04\x00\x55\x06\x53\x70\x91\x37\x77\x90\x37\x07\x5a";
          paths[33] = "\x4d\x70\x7b\x18\x07\x63\x04\x55\x00\x09\x55\x01\x0c\x55\x01\x68\x50\x02\x63\x50\x02\x00\x55\x05\xff\x54\x07\xff\x04\x73\x04\x55\x01\x04\x55\x03\x63\x40\xfd\x08\x45\xfe\x10\x45\xfd\x18\x55\x00\x01\x55\x00\x01\x45\xff\x01\x05\x73\xfe\x44\xff\xfc\x44\xff\x68\x40\xfe\x6c\x40\xf7\x00\x05\x61\x16\x55\x16\x00\x55\x00\x00\x45\xfa\x01\x05\x68\xff\x04\x61\x02\x55\x02\x00\x55\x00\x01\x45\xfe\xfe\x04\x63\x00\x45\xf8\xff\x44\xef\xff\x44\xe7\x00\x45\xff\x01\x45\xff\x04\x45\xff\x6d\x50\x00\xfc\x04\x63\xfe\x54\x00\xfc\x54\x00\xfa\x54\x02\x61\x50\x04\x04\x55\x00\x00\x55\x00\xff\x54\x03\x72\x55\x72\x00\x55\x00\x00\x55\x00\x0e\x55\x68\x68\x55\x00\x00\x55\x01\x00\x55\x0b\x68\x50\x00\x61\x50\x06\x06\x55\x00\x00\x55\x00\x06\x55\x06\x6c\x50\x02\x00\x05\x68\x00\x05\x61\x13\x55\x13\x00\x55\x00\x01\x55\x05\xff\x04\x68\x0b\x05\x6c\x01\x55\x00\x61\x50\x07\x07\x55\x00\x00\x55\x00\x03\x55\x01\x04\x55\x04\x00\x55\x00\x00\x55\x04\xfb\x04\x68\x00\x05\x63\x00\x45\xfe\x00\x45\xfc\x00\x45\xfa\x00\x45\xfa\x00\x45\xf4\x02\x45\xef\x76\x40\xff\x61\x50\x07\x07\x55\x00\x00\x55\x00\xfe\x44\xfb\x08\x55\x08\x00\x55\x00\x00\x45\xfa\xfe\x04\x6c\xfc\x54\x00\xfd\x54\x00\x68\x50\x00\x6c\x40\xff\x00\x05\x48\x87\x07\x6c\xfb\x54\x00\x61\x50\x40\x40\x55\x00\x00\x55\x00\xf9\x44\xff\x5a\x00";
          paths[34] = "\x4d\x70\x35\x83\x06\x63\xed\x54\x00\xde\x44\xee\xcb\x44\xea\xea\x44\xf7\xdd\x44\xe7\xc8\x44\xdd\xea\x44\xf0\xd1\x44\xe4\xbc\x44\xd3\xfc\x44\xfb\xeb\x44\xea\xe4\x44\xe5\xd9\x44\xdf\xec\x44\xa6\x14\x45\x8e\x38\x45\xdf\x86\x45\xf4\xb5\x55\x07\x07\x45\xfe\x24\x45\xee\x2c\x45\xe6\x02\x45\xfe\x26\x45\xf3\x2a\x45\xef\x07\x45\xfb\x16\x45\xfa\x1c\x45\xfa\x04\x55\x00\x15\x45\xff\x1a\x45\xff\x40\x55\x09\x5c\x55\x2d\x45\x55\x6f\xfe\x54\x07\xe3\x54\x2b\xe0\x54\x30\x02\x55\x00\xe2\x54\x20\xd9\x54\x29\xfc\x54\x08\xf2\x54\x08\xee\x54\x0e\xf8\x54\x0c\xe6\x54\x0b\xde\x54\x15\x73\x40\xeb\x07\x45\xe3\x0e\x05\x63\xfc\x54\x05\xe8\x54\x12\xe0\x54\x17\x43\x70\x49\x78\x76\x3c\x83\x76\x35\x83\x06\x5a";
          paths[35] = "\x4d\x80\x05\xae\x05\x63\x00\x45\xd5\xe4\x44\xc6\xbd\x44\xbe\xf8\x44\xfc\xef\x54\x04\xe6\x54\x00\xfc\x44\xff\xe7\x44\xff\xe1\x54\x04\x53\x70\x63\x80\x75\x60\x83\x05\x63\xf8\x54\x08\xd3\x54\x1e\xd0\x54\x1b\xe1\x44\xf1\xbd\x44\xeb\x9b\x44\xe8\xe0\x54\x02\xd1\x44\xff\xb4\x54\x10\xf5\x54\x09\xe5\x54\x13\xe0\x54\x22\xf3\x54\x15\xf8\x54\x38\x0c\x55\x48\x06\x55\x04\x19\x55\x15\x1d\x55\x1b\x15\x55\x11\x2e\x55\x1d\x44\x55\x2d\x14\x55\x09\x21\x55\x19\x36\x55\x22\x1a\x55\x05\x2a\x55\x1e\x41\x55\x0f\xfe\x44\xfe\xff\x44\xff\x01\x45\xfe\x73\x50\x1e\xed\x54\x22\xe8\x04\x63\x08\x45\xf8\x15\x45\xf9\x1d\x45\xf2\x08\x45\xf5\x1a\x45\xf6\x22\x45\xeb\x04\x45\xf9\x0e\x45\xf9\x12\x45\xf2\x02\x45\xfd\x24\x45\xdd\x27\x45\xd7\x08\x45\xf4\x16\x45\xe3\x1e\x45\xd6\x43\x70\xfc\xd1\x85\x06\xb4\x85\x05\xae\x05\x5a";
          paths[36] = "\x4d\x60\xd9\x30\x06\x63\xfb\x54\x06\xf0\x54\x0d\xeb\x54\x12\xfc\x54\x03\xf8\x44\xfc\xf5\x44\xfa\xfb\x44\xfb\xf4\x44\xfa\xef\x44\xf5\xf8\x44\xfa\xed\x44\xf9\xe8\x44\xf0\x00\x45\xfe\x07\x45\xfa\x09\x45\xf9\x05\x45\xfe\x15\x45\xef\x18\x45\xf3\x04\x55\x07\x0e\x55\x08\x12\x55\x10\x61\x50\x11\x11\x55\x00\x00\x55\x00\x07\x55\x05\x43\x60\xd0\x24\x66\xd4\x2b\x66\xd9\x30\x06\x5a";
          paths[37] = "\x4d\x60\x57\xcd\x05\x63\xff\x44\xfd\x01\x45\xf4\x05\x45\xf4\x0f\x55\x04\x23\x55\x03\x32\x55\x05\x03\x55\x01\xff\x54\x07\x01\x55\x0a\x00\x55\x1e\x10\x55\x0f\xeb\x54\x20\xfb\x44\xff\xe8\x54\x07\xe5\x54\x03\x43\x60\x54\xe6\x65\x59\xd2\x65\x57\xcd\x05\x5a";
          paths[38] = "\x4d\x70\x13\xba\x05\x63\xfa\x44\xfe\xf6\x44\xf9\xef\x44\xfa\xfe\x54\x00\xfc\x54\x00\xfc\x44\xfd\x61\x50\x01\x01\x55\x00\x00\x55\x00\xff\x44\xff\x63\x40\xfe\x01\x45\xfd\xff\x44\xfc\xff\x44\xfb\xfd\x44\xf7\xfb\x44\xf1\xfb\x44\xfa\xfd\x44\xfd\xf1\x44\xfa\xeb\x54\x00\xfd\x44\xfb\xf2\x54\x00\xf3\x04\x73\x18\x55\x04\x1a\x55\x05\x63\x50\x05\x03\x55\x0b\x03\x55\x11\x04\x55\x03\x01\x55\x05\x13\x55\x04\x19\x05\x53\x13\x57\xb5\x13\x57\xba\x5a\x00";
          paths[39] = "\x4d\x70\xba\x8f\x05\x63\x00\x45\xf9\x08\x45\xdf\x0c\x45\xdf\x06\x55\x01\x0b\x55\x01\x11\x55\x04\x08\x55\x01\x0e\x55\x06\x16\x55\x0a\x02\x55\x01\x10\x55\x0d\x12\x55\x13\x73\x40\xde\x0e\x45\xd9\x12\x05\x63\xfe\x54\x01\xfd\x54\x01\xfc\x44\xfe\xfc\x44\xf8\xf1\x44\xf5\xe9\x44\xf2\x43\x70\xba\x91\x75\xba\x90\x75\xba\x8f\x05\x5a";
          paths[40] = "\x4d\x70\xb4\x2b\x06\x63\xfe\x54\x03\xfc\x54\x07\xf8\x54\x08\x73\x40\xee\x0c\x45\xe9\x10\x45\xf6\xf2\x44\xf2\xef\x04\x63\xfe\x44\xfe\xfd\x44\xfd\xfe\x44\xfa\x03\x45\xf8\x0e\x45\xf9\x11\x45\xf1\x03\x45\xfc\x05\x45\xfa\x09\x45\xfd\x41\x50\xb0\xb0\x55\x00\x00\x55\x01\xb4\x67\x2b\x5a\x00";
          paths[41] = "\x4d\x70\x7c\x32\x06\x63\x02\x55\x03\x10\x55\x15\x0d\x55\x17\xfa\x54\x01\xf6\x54\x0d\xf2\x54\x06\x43\x70\x71\x3f\x76\x6c\x3b\x76\x7c\x32\x06\x5a";
          paths[42] = "\x4d\x70\x22\x75\x06\x61\x1c\x55\x1c\x00\x55\x00\x01\x45\xf4\xfa\x04\x63\xff\x44\xfe\xfc\x54\x00\xfb\x44\xff\x01\x45\xfd\x05\x45\xfa\x07\x45\xf6\x73\x50\x09\x04\x55\x0c\x05\x55\x02\x04\x55\x01\x06\x05\x53\x25\x67\x76\x22\x67\x75\x5a\x00";
          paths[43] = "\x4d\x70\x2c\x6d\x06\x63\xf5\x54\x00\xd1\x44\xe3\xcd\x44\xdf\x61\x50\xe0\xe0\x55\x00\x00\x55\x01\xe3\x44\xec\x63\x40\xfa\xfb\x44\xf4\xf6\x44\xea\xf0\x04\x68\x00\x05\x6c\xf2\x44\xf4\x63\x40\xfa\xfb\x44\xf0\xf2\x44\xee\xf1\x04\x6c\xff\x54\x00\x63\x40\xe8\xf0\x44\xdd\xd3\x44\xe5\xb9\x54\x07\xeb\x54\x19\xde\x54\x32\xde\x04\x61\x56\x55\x56\x00\x55\x00\x01\x55\x0a\x01\x05\x63\x03\x55\x00\x17\x55\x02\x17\x55\x02\x09\x55\x00\x17\x55\x06\x25\x55\x0c\x08\x55\x03\x12\x55\x08\x15\x55\x08\x68\x50\x01\x63\x50\x05\x00\x55\x09\x03\x55\x0e\x06\x05\x73\x06\x55\x04\x07\x55\x04\x19\x45\xf1\x23\x45\xea\x63\x50\x06\xfc\x54\x0c\xf8\x54\x0f\xf6\x04\x73\x0f\x45\xfa\x19\x45\xf7\x63\x50\x07\xfe\x54\x16\xf8\x54\x16\xf8\x04\x73\x15\x45\xfd\x1f\x45\xfd\x63\x50\x0f\x00\x55\x19\x04\x55\x21\x0b\x55\x0b\x0c\x55\x08\x1e\x55\x08\x1e\x05\x76\x01\x05\x63\xfd\x54\x3b\xcd\x54\x5e\x9d\x54\x80\xf2\x54\x0a\xe5\x54\x13\xda\x54\x1d\xfa\x54\x08\xf1\x54\x0d\xe9\x54\x11\x43\x70\x34\x6a\x76\x2e\x6d\x76\x2c\x6d\x06\x5a";
          paths[44] = "\x4d\x70\x49\x54\x06\x63\xf9\x54\x09\xed\x54\x0e\xe4\x54\x13\xfb\x54\x05\xd3\x44\xe5\xce\x44\xe0\xe9\x44\xf2\xe3\x44\xea\xcd\x44\xdc\xf8\x44\xfa\xe4\x44\xe7\xdf\x44\xe5\xd5\x44\xe3\xdb\x44\x99\x1e\x45\xa1\x07\x55\x00\x0e\x55\x03\x16\x55\x02\x0d\x45\xfe\x35\x55\x15\x3c\x55\x14\x73\x50\x13\x11\x55\x1a\x07\x05\x63\x07\x45\xfe\x25\x45\xe9\x30\x45\xe3\x08\x45\xfa\x28\x45\xf5\x2d\x45\xf0\x13\x45\xfd\x2d\x45\xf8\x3b\x55\x06\x73\x50\x06\x19\x55\x07\x1b\x05\x43\xce\x67\x03\x7d\x67\x29\x49\x67\x54\x5a\x00";
          paths[45] = "\x4d\x70\x2d\x52\x06\x6c\xfd\x54\x00\x73\x40\xef\xf4\x44\xe4\xee\x04\x63\xe6\x44\xf0\xc4\x44\xdc\xb8\x44\xc2\xf6\x44\xf3\xf3\x44\xe5\xf8\x44\xd9\x73\x50\x10\xec\x54\x21\xe9\x04\x68\x02\x05\x63\x18\x55\x01\x2a\x55\x07\x39\x55\x11\x0b\x55\x05\x18\x55\x11\x19\x55\x11\x6c\x50\x04\xfd\x04\x68\x00\x05\x63\x00\x55\x00\x19\x45\xe9\x19\x45\xe9\x0e\x45\xf6\x20\x45\xf0\x30\x45\xf0\x73\x50\x1b\x05\x55\x24\x0f\x05\x63\x0e\x55\x0e\x08\x55\x22\xf1\x54\x37\xfb\x54\x04\xf5\x54\x0a\xed\x54\x11\x43\x70\x5b\x37\x76\x3d\x52\x76\x2d\x52\x06\x5a";
          paths[46] = "\x4d\x70\x31\x43\x06\x6c\xfe\x54\x00\x73\x40\xf8\xf8\x44\xf3\xf4\x04\x63\xf3\x44\xf6\xe3\x44\xe8\xdd\x44\xd7\xfb\x44\xf8\xfa\x44\xee\xfc\x44\xe7\x61\x50\x16\x16\x55\x00\x00\x55\x01\x10\x45\xf1\x68\x50\x01\x63\x50\x0c\x01\x55\x14\x05\x55\x1b\x0b\x55\x05\x03\x55\x0b\x0b\x55\x0c\x0b\x05\x6c\x02\x45\xfe\x68\x50\x00\x63\x50\x00\x00\x55\x0c\xf1\x54\x0c\xf1\x54\x07\xfa\x54\x0f\xf6\x54\x17\xf6\x04\x73\x0d\x55\x04\x11\x55\x0a\x63\x50\x07\x09\x55\x04\x16\x45\xf9\x24\x05\x6c\xf7\x54\x0b\x43\x70\x47\x32\x76\x39\x43\x76\x31\x43\x06\x5a";
          paths[47] = "\x4d\x60\xfd\xe6\x05\x63\xfe\x54\x08\x0d\x55\x04\x10\x55\x00\x0b\x45\xd3\xc2\x44\xf5\xdf\x54\x12\x3e\x55\x20\xe2\x54\x3a\xf9\x54\x0e";
          paths[48] = "\x4d\x70\x10\xfd\x05\x63\xf1\x54\x18\x09\x55\x32\x0c\x55\x06\xfb\x54\x2d\x1b\x55\x0a\x0b\x45\xf9";
          paths[49] = "\x4d\x70\x32\x0c\x06\x63\x05\x45\xfe\x14\x45\xff\x13\x45\xf7\xec\x44\xe6\xe0\x54\x2e\xfe\x54\x13";
          paths[50] = "\x4d\x70\x4f\x0b\x06\x63\x14\x55\x07\x23\x45\xe9\x05\x45\xf6\xf2\x54\x0e\xfd\x54\x2a\x10\x55\x17";
          paths[51] = "\x4d\x70\x6e\xfb\x05\x63\x07\x45\xff\x0f\x45\xfd\x15\x45\xfc";
          paths[52] = "\x4d\x70\x7c\xeb\x05\x63\xee\x54\x18\xf9\x54\x4c\x10\x55\x1b";
          paths[53] = "\x4d\x50\xd3\x8e\x08\x68\xff\x04\x61\x04\x55\x04\x00\x55\x00\x01\x45\xfd\xfb\x04\x63\x04\x45\xe7\x06\x45\xcd\x08\x45\xb3\x00\x45\xfb\x01\x45\xf6\x01\x45\xf1\x61\x50\x04\x04\x55\x00\x00\x55\x01\x05\x45\xfc\x04\x55\x04\x00\x55\x00\x01\x55\x04\x05\x05\x63\x00\x55\x05\xff\x54\x0a\xff\x54\x0f\xfe\x54\x1a\xfc\x54\x34\xf8\x54\x4d\x41\x50\x04\x04\x55\x00\x00\x55\x01\xd3\x85\x8e\x5a\x00";
          paths[54] = "\x4d\x60\x0e\x79\x08\x48\x0e\x06\x61\x04\x55\x04\x00\x55\x00\x01\x45\xfc\xfc\x04\x63\x01\x45\xf2\x00\x45\xe4\xff\x44\xd7\xff\x44\xf4\xff\x44\xe9\xff\x44\xdd\x61\x50\x04\x04\x55\x00\x00\x55\x01\x04\x45\xfc\x68\x50\x00\x61\x50\x04\x04\x55\x00\x00\x55\x01\x04\x55\x04\x63\x50\x00\x0b\x55\x00\x17\x55\x01\x22\x55\x01\x0e\x55\x01\x1c\x55\x01\x2a\x05\x41\x04\x55\x04\x00\x55\x00\x01\x65\x0e\x79\x08\x5a";
          paths[55] = "\x4d\x60\x00\x9e\x08\x61\x04\x55\x04\x00\x55\x00\x01\x45\xfc\xfc\x04\x63\xff\x44\xef\x00\x45\xdd\x00\x45\xcc\x73\x50\x01\xe0\x54\x00\xd0\x04\x61\x04\x55\x04\x00\x55\x00\x01\x55\x04\xfc\x54\x04\x04\x55\x00\x00\x55\x01\x04\x55\x04\x63\x50\x01\x10\x55\x00\x20\x55\x00\x31\x05\x73\xff\x54\x23\x00\x55\x34\x61\x50\x04\x04\x55\x00\x00\x55\x01\xfc\x54\x04\x5a\x00";
          paths[56] = "\x4d\x60\x3f\x80\x08\x61\x04\x55\x04\x00\x55\x00\x01\x45\xfc\xfc\x04\x63\xfc\x44\xe9\xf8\x44\xcd\xf7\x44\xb2\x61\x50\x04\x04\x55\x00\x00\x55\x01\x04\x45\xfc\x68\x50\x00\x61\x50\x04\x04\x55\x00\x00\x55\x01\x04\x55\x04\x63\x50\x00\x1a\x55\x05\x35\x55\x09\x4c\x05\x61\x04\x55\x04\x00\x55\x00\x01\x45\xfc\x05\x05\x5a";
          paths[57] = "\x4d\x60\x45\x2b\x08\x63\xf8\x54\x18\x89\x54\x17\x82\x54\x00\x43\x50\xcf\x14\x68\x3d\x14\x68\x45\x2b\x08\x5a";
          paths[58] = "\x4d\x60\x17\xa8\x07\x63\x0a\x55\x05\x0d\x55\x0b\x0f\x55\x10\x61\x50\x1c\x1c\x55\x00\x00\x55\x01\x05\x55\x08\x63\x50\x09\x08\x55\x0d\x0c\x55\x18\x11\x55\x05\x02\x55\x0c\x06\x55\x10\x08\x05\x73\x0b\x55\x03\x0b\x55\x09\x63\x50\x01\x04\x55\x01\x09\x45\xfd\x0b\x05\x61\x0a\x55\x0a\x00\x55\x00\x01\x45\xfb\x01\x05\x63\xff\x54\x00\xfc\x44\xfb\xfb\x44\xfb\xfe\x44\xfc\xfc\x54\x00\xf9\x44\xfe\xf6\x44\xfa\xf2\x44\xf7\xe8\x44\xf2\xfd\x44\xff\xf4\x44\xfa\xf2\x44\xf7\x73\x40\xfb\xfb\x44\xf9\xf9\x04\x63\xfe\x44\xfb\xf2\x44\xf3\xf5\x44\xec";
          paths[59] = "\x4d\x50\xe4\x1d\x08\x63\xfc\x44\xff\xf8\x44\xfc\xfb\x44\xf9\x61\x50\x09\x09\x55\x00\x00\x55\x01\xfe\x44\xfa\x63\x50\x00\xfd\x54\x02\xfd\x54\x03\xfe\x04\x73\x00\x45\xfb\x03\x45\xfb\x08\x45\xf9\x0c\x45\xff\x63\x50\x03\x03\x55\x0c\xff\x54\x0b\x07\x55\x04\x04\x55\x01\x07\x55\x02\x0b\x45\xfe\x02\x45\xfb\x04\x45\xf9\x06\x05\x73\xee\x54\x04\xee\x44\xfd";
          paths[60] = "\x4d\x60\x11\x21\x08\x63\x06\x55\x02\x17\x55\x02\x1d\x55\x04\x0a\x55\x02\x11\x55\x05\x19\x55\x0b\x0d\x55\x09\x10\x55\x15\x12\x55\x24\x73\x50\x03\x1f\x55\x03\x2e\x05\x63\x00\x55\x04\x05\x55\x08\x09\x55\x0a\x73\x50\x0d\x04\x55\x10\x02\x05\x63\x0a\x45\xf9\xfb\x44\xf7\xfc\x44\xe1\x00\x45\xf7\xfe\x44\xf2\xfe\x44\xea\x73\x40\xfd\xef\x44\xfc\xe7\x04\x63\xfe\x44\xf4\xfc\x44\xed\xf5\x44\xe5\xf7\x44\xf5\xf3\x44\xf5\xe6\x44\xf1\xf7\x44\xfd\xf3\x44\xfa\xe8\x44\xf5";
          paths[61] = "\x4d\x60\x62\x6a\x08\x63\xf4\x44\xfd\xf7\x44\xdf\x07\x45\xe2\x07\x55\x02\x04\x55\x0b\x05\x55\x11\x43\x60\x6f\x66\x68\x71\x69\x68\x62\x6a\x08\x5a";
          paths[62] = "\x4d\x60\x56\x39\x08\x63\xf6\x44\xff\xfb\x44\xf3\xf5\x44\xec\x73\x50\x04\xfb\x54\x09\xf7\x04\x63\x0d\x45\xfc\x17\x55\x12\x11\x55\x17\x43\x60\x62\x37\x68\x62\x33\x68\x56\x39\x08\x5a\x6d\x40\xf6\xfa\x04\x5a";
          paths[63] = "\x4d\x60\x56\x77\x08\x63\x00\x45\xf7\xfd\x44\xdd\xfc\x44\xd5\xfe\x44\xf4\x01\x45\xed\xf9\x44\xe0\x61\x50\x1f\x1f\x55\x00\x00\x55\x00\xf5\x44\xf3\x63\x40\xf9\xfd\x44\xf2\xf7\x44\xef\xf3\x44\xfc\xf9\x44\xf7\xbc\x44\xf4\xb6\x44\xfe\xf2\x44\xf8\xdd\x44\xf7\xd0\x04\x61\x1b\x55\x1b\x00\x55\x00\x00\x45\xf4\xf0\x04\x63\xfb\x44\xfc\xfc\x44\xfd\xf6\x44\xfe\x6c\x40\xfc\x00\x05\x63\xfb\x54\x17\xf8\x54\x34\xf6\x54\x4f\x00\x55\x04\xff\x54\x11\x00\x55\x1d\xff\x54\x10\x02\x55\x1a\x09\x55\x2a\x04\x55\x06\x0f\x55\x0e\x16\x55\x0f\x0a\x55\x02\x10\x55\x06\x19\x55\x0d\x0d\x55\x09\x10\x55\x16\x11\x55\x24\x01\x55\x13\x05\x55\x1b\x05\x55\x2b\x00\x55\x04\x03\x55\x0f\x06\x55\x11\x73\x50\x10\x02\x55\x13\x00\x05\x43\x66\x86\x91\x56\x86\x8e\x56\x86\x77\x5a\x00";
          paths[64] = "\x4d\x60\x42\x75\x08\x63\xfa\x44\xfc\xfb\x44\xf0\xfc\x44\xe7\x01\x45\xfa\x0a\x45\xfb\x0f\x45\xf9\x0a\x55\x01\x0e\x55\x19\x05\x55\x1d\x43\x60\x49\x71\x68\x49\x74\x68\x42\x75\x08\x5a";
          paths[65] = "\x4d\x60\x3b\x44\x08\x63\xf8\x54\x00\xf9\x44\xf4\xf3\x44\xf2\x73\x40\xf4\xfa\x44\xf8\xf8\x04\x63\x0a\x45\xfb\x1b\x45\xf7\x20\x45\xf9\x73\x50\x0e\x0c\x55\x0d\x14\x05\x43\x4e\x86\x3f\x3f\x86\x45\x3b\x86\x44\x5a\x00\x6d\x14\x45\xee\x5a\x00";
          paths[66] = "\x4d\x60\x0a\x21\x08\x63\xf4\x44\xfe\xe8\x44\xe9\xf2\x44\xe0\x06\x45\xfe\x09\x55\x04\x0f\x55\x01\x08\x55\x04\x0f\x45\xf9\x17\x45\xfc\x02\x45\xfa\x0c\x45\xfb\x0c\x55\x01\x03\x55\x07\x11\x55\x13\x01\x55\x13\xff\x54\x03\xfa\x54\x07\xf6\x54\x05\xfe\x54\x05\xf8\x54\x06\xf4\x54\x03\x43\x60\x17\x21\x68\x0f\x1f\x68\x0a\x21\x08\x5a\x4d\x60\x33\x0a\x08\x5a\x6d\x40\xc5\xfe\x04";
          paths[67] = "\x4d\x50\xfc\xe9\x07\x63\xf6\x44\xfd\xf9\x44\xfe\xf8\x44\xef\x03\x45\xfa\xfd\x44\xf3\x07\x45\xf1\x04\x45\xfe\x05\x55\x02\x09\x55\x01\x02\x45\xfe\x07\x45\xfd\x0a\x45\xff\x05\x45\xfc\x09\x55\x00\x0d\x45\xff\x0c\x45\xfd\x0d\x55\x12\x0d\x55\x18\x73\x40\xf7\x02\x45\xf2\x02\x45\xf5\x04\x45\xf1\x00\x05\x43\x06\x76\xe4\x04\x76\xe8\xfc\x75\xe9\x5a\x00";
          paths[68] = "\x4d\x60\x05\xaf\x07\x63\xf6\x54\x00\xf7\x44\xe6\xf8\x44\xe3\x01\x45\xf2\x0b\x45\xf4\x14\x45\xfa\x07\x55\x04\x13\x55\x19\x0e\x55\x1f\xfa\x54\x03\xf6\x54\x03\xef\x54\x01\x43\x60\x0b\xab\x67\x09\xaf\x67\x05\xaf\x07\x5a";
          paths[69] = "\x4d\x60\x69\xd9\x07\x63\x05\x45\xfe\x05\x45\xfd\x04\x45\xfc\xff\x44\xf7\xe4\x44\xf6\xda\x44\xf7\x00\x55\x00\xf7\x54\x02\xf7\x54\x02\x6c\x40\xfd\x01\x05\x68\x00\x05\x6c\xfc\x54\x01\x63\x40\xfe\x03\x45\xfd\x06\x55\x00\x09\x05\x43\x49\x76\xde\x57\x76\xde\x69\x76\xd9\x5a\x00";
          paths[70] = "\x4d\x60\x52\xdc\x07\x6d\xea\x54\x00\x61\x50\x16\x09\x55\x00\x01\x55\x00\x2b\x55\x00\x61\x50\x16\x09\x55\x00\x01\x55\x00\xd5\x54\x00";
          paths[71] = "\x4d\x60\x3f\xd3\x07\x63\xfc\x44\xff\xf9\x54\x00\xf5\x54\x01\x73\x40\xf7\x05\x45\xf6\x0a\x05\x61\x0f\x55\x0f\x00\x55\x00\x00\x55\x03\x0e\x05\x63\x03\x55\x03\x06\x55\x04\x0a\x55\x05\x73\x50\x06\x02\x55\x09\x01\x55\x05\xfc\x54\x03\xfa\x44\xfb\xfe\x44\xf9\xfe\x44\xfa\xff\x44\xf8\xfc\x04\x61\x07\x55\x07\x00\x55\x00\x01\x55\x02\xf7\x04\x63\x03\x45\xfe\x06\x45\xfe\x09\x45\xfd";
          paths[72] = "\x4d\x60\x37\xd8\x07\x63\xff\x54\x09\x05\x55\x13\x0b\x55\x1a\x73\x50\x13\x07\x55\x1c\x04\x05\x63\x0c\x45\xfb\x12\x45\xee\x10\x45\xe2\x41\x50\x64\x64\x55\x00\x00\x55\x01\x37\x76\xd8\x5a\x00";
          paths[73] = "\x4d\x60\x07\x99\x07\x63\xeb\x44\xe5\xef\x54\x3b\xf3\x54\x46\x06\x55\x0f\x1a\x55\x18\x2a\x55\x19\x0d\x55\x00\x16\x45\xfa\x13\x45\xf1\x73\x40\xee\x00\x45\xe5\xfb\x04\x63\xfa\x44\xfb\xf1\x44\xf7\xee\x44\xe8\xfe\x44\xf7\x01\x45\xd6\xfd\x44\xce";
          paths[74] = "\x4d\x60\x38\x92\x07\x68\xf3\x04\x61\x64\x55\x64\x00\x55\x00\x00\x45\xf2\xfe\x04\x6c\xfa\x44\xff\x68\x40\xff\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\xf9\x44\xfd\x02\x55\x02\x00\x55\x00\x00\x45\xff\x00\x05\x68\x00\x05\x41\x0b\x55\x0b\x00\x55\x00\x01\x65\x06\x8a\x07\x61\x02\x55\x02\x00\x55\x00\x00\x45\xff\x00\x05\x63\xf8\x44\xfe\xf8\x44\xfd\xf7\x44\xfb\x73\x40\xfe\xfc\x44\xf9\xf9\x04\x61\x37\x55\x37\x00\x55\x00\x01\x45\xf9\xe5\x54\x04\x04\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xfe\xfd\x44\xfe\xfa\x44\xfe\xf7\x04\x61\x1b\x55\x1b\x00\x55\x00\x00\x45\xfe\xf7\x54\x14\x14\x55\x00\x00\x55\x00\xfc\x44\xf6\x63\x40\xff\xfe\x44\xff\xfc\x44\xfe\xfa\x04\x6c\xff\x44\xfd\x61\x50\x3c\x3c\x55\x00\x00\x55\x00\xfd\x44\xf9\x63\x40\xfe\xfc\x44\xfd\xf9\x44\xfd\xf5\x04\x61\x01\x55\x01\x00\x55\x00\x00\x55\x00\xff\x54\x4f\x4f\x55\x00\x00\x55\x00\xfc\x44\xf7\x63\x40\xfc\xf8\x44\xf8\xef\x44\xfc\xe9\x04\x61\x01\x55\x01\x00\x55\x00\x00\x55\x00\xff\x54\x09\x09\x55\x00\x00\x55\x01\x02\x45\xfa\x06\x55\x06\x00\x55\x00\x01\x55\x05\xfe\x54\x0f\x0f\x55\x00\x00\x55\x01\x0b\x55\x06\x68\x50\x00\x61\x50\x17\x17\x55\x00\x00\x55\x01\x04\x55\x08\x63\x50\x01\x02\x55\x01\x04\x55\x02\x05\x05\x73\x00\x55\x00\x00\x55\x00\x61\x50\x1b\x1b\x55\x00\x00\x55\x01\x04\x55\x09\x63\x50\x00\x00\x55\x00\x00\x55\x00\x01\x05\x73\x02\x55\x04\x03\x55\x06\x61\x50\x29\x29\x55\x00\x00\x55\x01\x06\x55\x0c\x00\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x07\x07\x55\x00\x00\x55\x01\x00\x55\x02\x0e\x55\x0e\x00\x55\x00\x00\x55\x01\x03\x05\x63\x00\x55\x00\x00\x55\x00\x00\x55\x00\x61\x50\x17\x17\x55\x00\x00\x55\x01\x04\x55\x09\x11\x55\x11\x00\x55\x00\x00\x55\x02\x0b\x55\x0e\x0e\x55\x00\x00\x55\x00\x00\x55\x02\x63\x50\x00\x05\x55\x01\x0d\x55\x06\x0d\x05\x68\x02\x05\x61\x07\x55\x07\x00\x55\x00\x01\x55\x03\xff\x04\x48\x0f\x06\x6c\x03\x55\x00\x61\x50\x05\x05\x55\x00\x00\x55\x00\x04\x45\xfe\x63\x50\x01\xfe\x54\x01\xfc\x54\x00\xf8\x54\x00\x00\x55\x00\x00\x55\x00\x00\x45\xfe\xfb\x44\xfd\xf4\x44\xfc\xee\x44\xff\xfc\x44\xff\xf8\x44\xfe\xf5\x04\x76\x00\x05\x61\x3c\x55\x3c\x00\x55\x00\x01\x45\xfe\xf4\x54\x3a\x3a\x55\x00\x00\x55\x00\xfe\x44\xf3\x2c\x55\x2c\x00\x55\x00\x00\x45\xfe\xf2\x04\x63\xff\x44\xfa\xfe\x44\xf6\x03\x45\xee\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\x06\x45\xff\x12\x55\x12\x00\x55\x00\x01\x55\x0d\x06\x55\x0d\x0d\x55\x00\x00\x55\x01\x03\x55\x0a\x02\x55\x02\x00\x55\x00\x00\x55\x00\x01\x05\x63\x03\x55\x05\x03\x55\x0c\x04\x55\x12\x61\x50\x4f\x4f\x55\x00\x00\x55\x00\x02\x55\x0d\x63\x50\x00\x04\x55\x00\x08\x55\x00\x0b\x05\x61\x80\x55\x80\x00\x55\x00\x00\x55\x02\x17\x55\x15\x15\x55\x00\x00\x55\x00\x01\x55\x0a\x63\x50\x00\x09\x55\x07\x10\x55\x12\x13\x05\x6c\x02\x55\x01\x63\x50\x05\x02\x55\x0b\x04\x55\x0e\x08\x05\x68\x00\x05\x63\x07\x55\x08\x08\x55\x09\x08\x55\x10\x61\x50\x20\x20\x55\x00\x00\x55\x00\xff\x54\x04\x15\x55\x15\x00\x55\x00\x01\x45\xfe\x06\x55\x0e\x0e\x55\x00\x00\x55\x01\xf9\x54\x04\x01\x55\x01\x00\x55\x00\x00\x45\xff\x00\x55\x11\x11\x55\x00\x00\x55\x01\xf7\x54\x02\x68\x50\x00\x61\x50\x02\x02\x55\x00\x00\x55\x00\xff\x54\x00\x43\x60\x40\x92\x67\x3d\x92\x67\x38\x92\x07\x5a";
          paths[75] = "\x4d\x60\x14\xf8\x06\x61\x0f\x55\x0f\x00\x55\x00\x01\x55\x0b\x05\x55\x0a\x0a\x55\x00\x00\x55\x01\x03\x55\x08\x05\x55\x05\x00\x55\x00\x00\x55\x00\x03\x05\x63\x03\x55\x05\x03\x55\x0b\x04\x55\x11\x61\x50\x51\x51\x55\x00\x00\x55\x00\x02\x55\x0d\x63\x50\x00\x04\x55\x00\x07\x55\x00\x0b\x05\x61\x7f\x55\x7f\x00\x55\x00\x00\x55\x02\x17\x55\x17\x17\x55\x00\x00\x55\x00\x01\x55\x0a\x63\x50\x01\x0a\x55\x08\x11\x55\x14\x15\x05\x6c\x02\x55\x01\x63\x50\x05\x02\x55\x0a\x04\x55\x0e\x07\x05\x68\x00\x05\x63\x07\x55\x08\x08\x55\x08\x08\x55\x0e\x61\x50\x21\x21\x55\x00\x00\x55\x00\xff\x54\x04\x10\x55\x10\x00\x55\x00\x01\x45\xfe\x06\x55\x0c\x0c\x55\x00\x00\x55\x01\xfa\x54\x03\x6c\x40\xff\x01\x05\x61\x0f\x55\x0f\x00\x55\x00\x01\x45\xf9\x02\x05\x68\x00\x05\x61\x04\x55\x04\x00\x55\x00\x00\x45\xfe\x01\x55\x16\x16\x55\x00\x00\x55\x01\xf7\x54\x02\x68\x40\xf3\x61\x50\x62\x62\x55\x00\x00\x55\x00\xf2\x44\xfe\x6c\x40\xfa\xff\x04\x68\xff\x04\x63\xfd\x54\x00\xfc\x54\x00\xfa\x44\xfe\x61\x50\x05\x05\x55\x00\x00\x55\x00\xfd\x44\xff\x68\x50\x00\x61\x50\x09\x09\x55\x00\x00\x55\x01\xfa\x44\xfe\x04\x55\x04\x00\x55\x00\x00\x45\xfe\xff\x04\x63\xf9\x44\xfe\xf9\x44\xfe\xf8\x44\xfc\x73\x40\xfd\xfc\x44\xf9\xf9\x04\x61\x35\x55\x35\x00\x55\x00\x01\x45\xfa\xe7\x54\x06\x06\x55\x00\x00\x55\x00\xff\x44\xfe\x63\x40\xfe\xfe\x44\xfe\xfb\x44\xfe\xf8\x04\x61\x1f\x55\x1f\x00\x55\x00\x00\x45\xfe\xf6\x54\x17\x17\x55\x00\x00\x55\x00\xfc\x44\xf6\x63\x40\xff\xfe\x44\xff\xfc\x44\xfe\xfa\x04\x6c\xff\x44\xfd\x61\x50\x41\x41\x55\x00\x00\x55\x00\xfd\x44\xf9\x63\x40\xfe\xfc\x44\xfd\xf9\x44\xfd\xf6\x04\x61\x06\x55\x06\x00\x55\x00\x00\x55\x00\xfe\x54\x54\x54\x55\x00\x00\x55\x00\xfc\x44\xf7\x63\x40\xfd\xf9\x44\xf9\xf0\x44\xfc\xeb\x04\x61\x04\x55\x04\x00\x55\x00\x00\x55\x01\xfd\x04\x63\x00\x45\xfe\x00\x45\xfc\x01\x45\xfb\x61\x50\x04\x04\x55\x00\x00\x55\x01\x03\x45\xff\x0d\x55\x0d\x00\x55\x00\x01\x55\x0a\x05\x05\x6c\x00\x55\x00\x61\x50\x15\x15\x55\x00\x00\x55\x01\x04\x55\x08\x63\x50\x01\x02\x55\x01\x04\x55\x02\x05\x05\x61\x00\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x18\x18\x55\x00\x00\x55\x01\x03\x55\x08\x6c\x50\x00\x01\x05\x63\x01\x55\x02\x02\x55\x04\x03\x55\x06\x73\x50\x05\x07\x55\x06\x0c\x05\x76\x02\x05\x61\x12\x55\x12\x00\x55\x00\x00\x55\x01\x04\x55\x02\x02\x55\x00\x00\x55\x00\x01\x55\x01\x18\x55\x18\x00\x55\x00\x01\x55\x03\x08\x55\x13\x13\x55\x00\x00\x55\x00\x02\x55\x0b\x63\x50\x00\x01\x55\x00\x01\x55\x00\x02\x55\x00\x05\x55\x01\x0e\x55\x08\x0e\x05\x6c\x02\x55\x00\x01\x55\x00\x02\x55\x00\x68\x50\x03\x6c\x50\x03\x00\x05\x61\x07\x55\x07\x00\x55\x00\x00\x55\x06\xfd\x04\x63\x02\x45\xfd\x01\x45\xf9\x01\x45\xf7\x00\x55\x00\x00\x55\x00\x00\x45\xff\xfe\x44\xfb\xfd\x44\xf5\xfc\x44\xee\xff\x44\xfc\xff\x44\xf8\xfe\x44\xf5\x61\x50\x01\x01\x55\x00\x00\x55\x01\x00\x55\x00\x39\x55\x39\x00\x55\x00\x01\x45\xfe\xf5\x54\x3d\x3d\x55\x00\x00\x55\x00\xfe\x44\xf3\x31\x55\x31\x00\x55\x00\x00\x45\xfe\xf2\x04\x63\xff\x44\xfa\xfe\x44\xf7\x03\x45\xf0\x61\x50\x0a\x0a\x55\x00\x00\x55\x01\x04\x45\xff\x6d\x50\x00\xfc\x04\x61\x0e\x55\x0e\x00\x55\x00\x00\x45\xf9\x02\x05\x63\xf6\x54\x0f\xff\x54\x12\xfe\x54\x23\x03\x55\x08\x02\x55\x11\x05\x55\x19\x73\x50\x02\x15\x55\x06\x1e\x05\x63\x02\x55\x05\x00\x55\x07\xfe\x54\x07\x73\x40\xfc\x00\x45\xfa\x00\x05\x61\x0a\x55\x0a\x00\x55\x00\x00\x45\xfc\x01\x05\x68\xff\x04\x63\xfc\x54\x00\xfc\x44\xf6\xfc\x44\xf3\x73\x40\xfe\xfa\x44\xfe\xf6\x04\x61\x1a\x55\x1a\x00\x55\x00\x00\x45\xfc\xf6\x04\x63\xff\x44\xfe\x00\x45\xfc\xff\x44\xfb\xfe\x44\xf9\xfa\x44\xf4\xf7\x44\xee\x61\x50\x1b\x1b\x55\x00\x00\x55\x00\xfc\x44\xf7\x63\x40\xfe\xfc\x44\xfd\xf6\x44\xfa\xf2\x04\x61\x11\x55\x11\x00\x55\x00\x00\x45\xf3\xf9\x04\x63\xfb\x54\x00\xf7\x54\x03\xf8\x54\x0a\xfb\x54\x09\x05\x55\x18\x08\x55\x21\x00\x55\x07\x04\x55\x0c\x06\x55\x13\x01\x55\x03\x02\x55\x06\x03\x55\x09\x61\x50\x14\x14\x55\x00\x00\x55\x01\x04\x55\x09\x63\x50\x03\x06\x55\x01\x0d\x55\x05\x13\x05\x61\x39\x55\x39\x00\x55\x00\x00\x55\x08\x1c\x05\x63\x0a\x55\x06\x02\x55\x08\x11\x55\x0c\x61\x50\x0c\x0c\x55\x00\x00\x55\x00\x09\x55\x03\x68\x50\x00\x63\x50\x03\x02\x55\x05\x03\x55\x09\x03\x05\x68\x01\x05\x63\x08\x55\x01\x0c\x55\x01\x14\x55\x03\x68\x50\x03\x6c\x50\x0a\x00\x05\x61\x17\x55\x17\x00\x55\x00\x00\x55\x0b\xfe\x04\x68\x00\x05\x61\x13\x55\x13\x00\x55\x00\x00\x55\x0a\xfd\x54\x10\x10\x55\x00\x00\x55\x00\x09\x45\xfb\x63\x50\x03\xfc\x54\x02\xf9\x54\x04\xf4\x54\x00\xf8\x44\xff\xf6\x44\xf7\xee\x44\xfb\xfb\x44\xf5\xf9\x44\xef\xf7\x04\x73\xef\x44\xf8\xef\x44\xee\x61\x50\x11\x11\x55\x00\x00\x55\x01\xff\x44\xf6\x63\x40\xfd\xf5\x44\xfe\xe9\x44\xfe\xde\x04\x73\x00\x45\xea\xfa\x44\xe0\x63\x50\x02\xf6\x44\xf8\xed\x44\xee\xed\x04\x5a";
          paths[76] = "\x4d\x50\xd9\x76\x07\x6c\x07\x55\x01\x07\x55\x01\x07\x55\x01\x07\x55\x01";
          paths[77] = "\x4d\x50\xd9\x76\x07\x6c\x07\x55\x01\x07\x55\x01\x07\x55\x01\x07\x55\x01";
          paths[78] = "\x4d\x50\xdf\x84\x07\x6c\x07\x45\xff\x07\x45\xff\x06\x45\xff\x07\x45\xff";
          paths[79] = "\x4d\x50\xdf\x84\x07\x6c\x07\x45\xff\x07\x45\xff\x06\x45\xff\x07\x45\xff";
          paths[80] = "\x4d\x60\x4a\x88\x07\x63\x04\x55\x01\x06\x55\x00\x08\x55\x00";
          paths[81] = "\x4d\x60\x4a\x88\x07\x63\x04\x55\x01\x06\x55\x00\x08\x55\x00";
          paths[82] = "\x4d\x60\x21\x6f\x07\x63\xff\x54\x01\x00\x55\x02\x00\x55\x03";
          fill[0] = "#66c5c8";
          fill[1] = "#ff87c5";
          fill[2] = "#ccd7c7";
          fill[3] = "#fff";
          fill[4] = "#bbffa7";
          fill[5] = "#fbb19f";
          fill[6] = "#ffff8c";
          fill[7] = "#fffffa";
          fill[8] = "#fffffa";
          fill[9] = "#504650";
          fill[10] = "#fefefe";
          fill[11] = "#de6b96";
          fill[12] = "#af5366";
          fill[13] = "#ccd7c7";
          fill[14] = "#504650";
          fill[15] = "#f7931e";
          fill[16] = "#f77074";
          fill[17] = "#f7931e";
          fill[18] = "#ffde80";
          fill[19] = "#504650";
          fill[20] = "#ff81ba";
          fill[21] = "#f7931e";
          fill[22] = "#9d6cd8";
          fill[23] = "#de6b96";
          fill[24] = "#9cd41e";
          fill[25] = "#29d3c3";
          fill[26] = "#af5366";
          fill[27] = "#504650";
          fill[28] = "#a1fff5";
          fill[29] = "#504650";
          fill[30] = "#af5366";
          fill[31] = "#504650";
          fill[32] = "#fff";
          fill[33] = "#504650";
          fill[34] = "#504650";
          fill[35] = "#dd57b1";
          fill[36] = "#ffa141";
          fill[37] = "#ff79c1";
          fill[38] = "#9d6cd8";
          fill[39] = "#ffa141";
          fill[40] = "#ff79c1";
          fill[41] = "#9d6cd8";
          fill[42] = "#ff79c1";
          fill[43] = "none";
          fill[44] = "#66c5c8";
          fill[45] = "#af5395";
          fill[46] = "#de6b96";
          fill[47] = "none";
          fill[48] = "none";
          fill[49] = "none";
          fill[50] = "none";
          fill[51] = "none";
          fill[52] = "none";
          fill[53] = "#553852";
          fill[54] = "#553852";
          fill[55] = "#553852";
          fill[56] = "#553852";
          fill[57] = "#553852";
          fill[58] = "#fafaf5";
          fill[59] = "#fafaf5";
          fill[60] = "#b25cbd";
          fill[61] = "";
          fill[62] = "";
          fill[63] = "#b25cbd";
          fill[64] = "";
          fill[65] = "";
          fill[66] = "";
          fill[67] = "";
          fill[68] = "";
          fill[69] = "#fff";
          fill[70] = "#ae7d63";
          fill[71] = "#cceb84";
          fill[72] = "#cceb84";
          fill[73] = "#fafaf5";
          fill[74] = "#fafaf5";
          fill[75] = "";
          fill[76] = "#fafaf5";
          fill[77] = "none";
          fill[78] = "#fafaf5";
          fill[79] = "none";
          fill[80] = "#fafaf5";
          fill[81] = "none";
          fill[82] = "#fafaf5";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
          stroke[7] = 0;
          stroke[8] = 0;
          stroke[9] = 0;
          stroke[10] = 0;
          stroke[11] = 0;
          stroke[12] = 0;
          stroke[13] = 0;
          stroke[14] = 0;
          stroke[15] = 0;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 0;
          stroke[20] = 0;
          stroke[21] = 0;
          stroke[22] = 0;
          stroke[23] = 0;
          stroke[24] = 0;
          stroke[25] = 0;
          stroke[26] = 0;
          stroke[27] = 0;
          stroke[28] = 0;
          stroke[29] = 0;
          stroke[30] = 0;
          stroke[31] = 0;
          stroke[32] = 0;
          stroke[33] = 0;
          stroke[34] = 0;
          stroke[35] = 0;
          stroke[36] = 0;
          stroke[37] = 0;
          stroke[38] = 0;
          stroke[39] = 0;
          stroke[40] = 0;
          stroke[41] = 0;
          stroke[42] = 0;
          stroke[43] = 0;
          stroke[44] = 0;
          stroke[45] = 0;
          stroke[46] = 0;
          stroke[47] = 5;
          stroke[48] = 5;
          stroke[49] = 5;
          stroke[50] = 5;
          stroke[51] = 5;
          stroke[52] = 5;
          stroke[53] = 0;
          stroke[54] = 0;
          stroke[55] = 0;
          stroke[56] = 0;
          stroke[57] = 0;
          stroke[58] = 3;
          stroke[59] = 3;
          stroke[60] = 3;
          stroke[61] = 3;
          stroke[62] = 3;
          stroke[63] = 3;
          stroke[64] = 3;
          stroke[65] = 3;
          stroke[66] = 3;
          stroke[67] = 3;
          stroke[68] = 3;
          stroke[69] = 3;
          stroke[70] = 3;
          stroke[71] = 3;
          stroke[72] = 3;
          stroke[73] = 3;
          stroke[74] = 0;
          stroke[75] = 0;
          stroke[76] = 0;
          stroke[77] = 3;
          stroke[78] = 0;
          stroke[79] = 3;
          stroke[80] = 0;
          stroke[81] = 3;
          stroke[82] = 3;
      }
      function parts_House() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [5, 306, 964, 964];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x80\x6b\x13\x06\x63\xe7\x44\xf7\xc7\x44\xd1\xb1\x44\xc2\xf5\x44\xf6\xc5\x44\xd4\xbc\x44\xc9\xcb\x44\xe0\x77\x44\x95\x6e\x44\x8b\xfb\x54\x03\xe5\x44\xed\xd1\x44\xe9\x43\x60\xe3\x01\x65\xe7\xff\x64\xd1\x00\x05\x73\xe8\x54\x0e\xd9\x54\x17\x63\x40\xe3\x16\x45\xc1\x2d\x45\xa3\x43\x05\x43\x46\x56\x64\x29\x56\x7a\x1d\x56\x7f\x63\x40\xee\x0e\x45\xf2\x13\x45\xdb\x1b\x45\xef\x10\x45\xc1\x3a\x45\xa3\x4a\x45\xfd\x01\x45\xca\x2e\x45\xc0\x33\x05\x43\x3d\x65\x23\x29\x65\x3f\x0a\x65\x4a\x63\x40\xed\x07\x45\xf8\x1f\x45\xff\x2b\x55\x0c\x13\x55\x05\x29\x55\x0d\x3e\x55\x07\x0f\x55\x08\x1e\x55\x09\x2e\x55\x09\x28\x55\x0c\x53\x55\x10\x7c\x45\xfd\x12\x55\x05\x22\x55\x09\x34\x55\x02\x24\x55\x13\x45\x55\x14\x69\x55\x01\x0b\x55\x0c\x4a\x55\x10\x60\x55\x16\x16\x55\x0d\x31\x55\x0f\x44\x45\xff\x07\x45\xfa\x2a\x45\xfa\x2a\x05\x61\x19\x55\x19\x00\x55\x00\x00\x45\xe7\x01\x05\x63\xf6\x54\x0c\x01\x55\x21\x03\x55\x31\x21\x55\x10\x53\x55\x03\x78\x55\x05\x3c\x55\x04\x56\x45\xf8\x94\x45\xfa\x4a\x55\x02\x6e\x55\x08\xaa\x45\xff\x24\x45\xfb\x5c\x55\x08\x8c\x55\x04\x27\x45\xfd\xd9\x55\x09\xfd\x45\xf5\x11\x45\xf6\x0b\x45\xe0\xf5\x44\xcf\x61\x50\x13\x13\x55\x00\x00\x55\x00\xf7\x44\xfd\x63\x40\xfe\xe4\x54\x0b\xc7\x54\x09\xa9\x54\x00\xbb\x54\x11\x7e\x54\x12\x36\x44\xfb\xe8\x54\x08\xcb\x54\x09\xb3\x54\x06\xdc\x54\x0b\xd4\x54\x0f\xbb\x54\x0c\xb0\x54\x0e\xb0\x54\x15\x67\x04\x43\xc9\x68\x65\xb0\x68\x50\x6b\x68\x13\x5a\x00";
          paths[1] = "\x4d\x60\x28\x29\x06\x43\x55\x66\x0a\x59\x66\x06\x84\x56\xe3\x53\x60\xde\x90\x75\x10\x63\x05\x63\x0a\x45\xf8\x12\x45\xf3\x20\x55\x01\x1e\x55\x17\x3b\x55\x26\x59\x55\x3d\x15\x55\x10\x51\x55\x38\x8e\x55\x67\x18\x55\x12\x49\x55\x34\x52\x55\x3a\x20\x55\x18\x46\x55\x39\x48\x55\x46\x05\x55\x23\x00\x55\x00\x00\x55\x20\x00\x55\x2c\xf8\x54\x2c\xf1\x54\x57\x02\x55\x1b\xf0\x54\x61\xeb\x54\x7d\x73\x50\x01\x53\x45\xfa\x6b\x05\x63\xf5\x54\x5b\xf4\x54\x7d\xe9\x54\xda\xfe\x54\x13\xf1\x54\x08\xe4\x54\x08\x73\x40\xc1\xfe\x44\xb2\x04\x05\x63\xf9\x54\x00\xd2\x44\xfe\xc4\x44\xfd\xd4\x44\xfe\x2d\x54\x0a\x0d\x54\x01\xfc\x44\xfa\x1c\x54\x06\x04\x54\x02\xfa\x44\xfe\xe5\x44\xfe\xdf\x44\xfe\xf2\x44\xf9\xf8\x44\xc4\xf6\x44\xb5\xf5\x44\xce\xfd\x44\x9b\xf2\x44\x69\xff\x44\xf6\xf4\x44\xb7\xf9\x44\xa1\xff\x44\xde\xf6\x44\xbc\xf2\x44\x9a\xfb\x44\xec\x03\x45\xd7\xfe\x44\xc2\xfc\x44\xf1\x01\x45\xcf\x02\x45\xbf\x00\x55\x00\x2f\x45\xdb\x55\x45\xc0\x43\x50\xfc\x52\x66\x10\x38\x66\x28\x29\x06\x5a";
          paths[2] = "\x4d\x50\x13\x74\x06\x63\x0a\x55\x02\x6d\x55\x36\x6e\x55\x3e\x01\x55\x0e\xfb\x54\x23\xff\x54\x31\x05\x55\x15\xfd\x54\x2a\x02\x55\x40\x04\x55\x25\x10\x55\x4b\x0d\x55\x71\x00\x55\x12\x0c\x55\x22\x09\x55\x35\x00\x55\x27\x07\x55\x4d\x08\x55\x73\x01\x55\x11\xfd\x54\x22\x03\x55\x32\x73\x50\x00\x2b\x55\x05\x40\x05\x63\x01\x55\x05\xfd\x54\x11\xfd\x54\x17\x73\x50\x06\x08\x45\xfe\x08\x05\x63\xcb\x54\x00\xda\x54\x05\xd4\x44\xf7\xfd\x44\xf7\xfa\x44\xcd\xfd\x44\xc2\x03\x45\xef\xfa\x44\xde\xf3\x44\xce\x73\x50\x01\xd6\x44\xf5\xc3\x04\x63\xfc\x44\xf4\xf9\x44\xe9\xfc\x44\xdc\x61\x50\xe7\xe7\x55\x00\x00\x55\x01\xf8\x44\xda\x63\x40\xf7\xe9\x44\xf5\xd1\x44\xf1\xb9\x44\xf3\xe4\x44\xff\xc5\x44\xf4\xa8\x44\xfb\xd9\x44\xfb\xb0\x44\xef\x8a\x04\x43\x19\x65\xa1\x20\x65\x89\x13\x65\x74\x5a\x00";
          paths[3] = "\x4d\x80\x99\x42\x06\x63\x26\x55\x27\x25\x55\x33\x0d\x55\x1d\xea\x44\xf9\xa4\x44\xbb\x8c\x44\xad\xf3\x44\xf8\x7a\x44\x96\x57\x44\x7d\x53\x70\x5e\x67\x75\x3e\x54\x05\x63\xfa\x54\x00\xe2\x44\xe8\xe6\x44\xe6\x18\x45\xee\x0c\x45\xf7\x1b\x45\xfe\x26\x55\x1c\x72\x55\x53\x97\x55\x6f\x26\x55\x16\x3b\x55\x32\x5d\x55\x4d\x43\x80\x41\xff\x85\x79\x37\x86\x99\x42\x06\x5a";
          paths[4] = "\x4d\x50\x68\xd1\x08\x63\xf4\x44\xfc\xf0\x54\x01\xed\x54\x02\xf6\x54\x08\x01\x55\x15\x04\x55\x20\x21\x55\x0b\x4c\x55\x00\x71\x55\x02\x3c\x55\x02\x56\x45\xfb\x94\x45\xfc\x4a\x55\x01\x6e\x55\x05\xaa\x45\xff\x24\x45\xfc\x5c\x55\x06\x8c\x55\x03\x27\x45\xfe\xd2\x55\x08\xf6\x45\xfb\x00\x55\x00\x12\x45\xf2\xfc\x44\xe6\xf1\x44\xf8\xa1\x54\x02\x8e\x54\x03\xc2\x54\x02\x8a\x44\xfb\x4d\x44\xff\x73\x40\x84\x01\x45\x47\xff\x04\x63\xda\x44\xff\xc0\x54\x08\x9a\x54\x02\xdf\x44\xfb\xb7\x44\xfd\x95\x44\xfc\xc6\x44\xfe\xf1\x44\xfe\xcc\x44\xff\x43\x50\x85\xcf\x58\x77\xd2\x58\x68\xd1\x08\x5a";
          fill[0] = "#504650";
          fill[1] = "#fefefe";
          fill[2] = "#de6b96";
          fill[3] = "#af5366";
          fill[4] = "#ccd7c7";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
      }
      function parts_Lu_1() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 301, 408, 408];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\xa9\xb3\x06\x63\x19\x55\x0c\x1e\x55\x1a\x25\x55\x26\x61\x50\x45\x45\x55\x00\x00\x55\x01\x0e\x55\x13\x63\x50\x15\x13\x55\x1f\x1d\x55\x3a\x29\x55\x0c\x05\x55\x1d\x0e\x55\x26\x13\x05\x73\x1a\x55\x08\x1b\x55\x16\x02\x55\x16\xf9\x54\x1b\x61\x50\x17\x17\x55\x00\x00\x55\x01\xf2\x54\x02\x63\x40\xfd\xff\x44\xf7\xf5\x44\xf4\xf4\x44\xfb\xf7\x44\xf6\xff\x44\xee\xfa\x44\xe8\xf2\x44\xdf\xeb\x44\xc5\xde\x44\xf9\xfe\x44\xe2\xf1\x44\xdf\xea\x04\x73\xf4\x44\xf3\xee\x44\xef\x63\x40\xfc\xf3\x44\xdf\xe1\x44\xe7\xd0\x04";
          paths[1] = "\x4d\x50\x2c\xce\x07\x63\xf6\x44\xfe\xed\x44\xf7\xf3\x44\xee\x41\x50\x16\x16\x55\x00\x00\x55\x01\x1b\x75\xae\x63\x40\xff\xfa\x54\x03\xfa\x54\x08\xfa\x04\x73\xff\x44\xf5\x06\x45\xf4\x14\x45\xef\x1e\x45\xfd\x63\x50\x07\x07\x55\x1d\xfe\x54\x1a\x12\x55\x0a\x09\x55\x01\x10\x55\x04\x1a\x45\xfc\x05\x45\xf4\x09\x45\xee\x0e\x05\x73\xd4\x54\x0a\xd5\x44\xf9";
          paths[2] = "\x4d\x50\x9a\xd8\x07\x63\x0f\x55\x06\x37\x55\x06\x47\x55\x0a\x19\x55\x05\x28\x55\x0c\x3e\x55\x1b\x1e\x55\x16\x27\x55\x33\x2b\x55\x57\x53\x60\x51\x9d\x68\x51\xc3\x08\x63\x00\x55\x09\x0c\x55\x13\x15\x55\x19\x73\x50\x21\x09\x55\x27\x04\x05\x63\x17\x45\xee\xf4\x44\xeb\xf5\x44\xb4\x00\x45\xeb\xfc\x44\xde\xfb\x44\xca\x73\x40\xf8\xd7\x44\xf5\xc3\x04\x63\xfc\x44\xe2\xf7\x44\xd3\xe5\x44\xc0\xe9\x44\xe6\xe1\x44\xe6\xc1\x44\xdb\xea\x44\xf8\xe0\x44\xf0\xc5\x44\xe5";
          paths[3] = "\x4d\x60\x5d\x88\x08\x63\xe3\x44\xf9\xeb\x44\xaf\x11\x45\xb8\x10\x55\x04\x0b\x55\x1b\x0b\x55\x28\x43\x60\x7b\x7e\x68\x82\x87\x68\x5d\x88\x08\x5a";
          paths[4] = "\x4d\x60\x3f\x12\x08\x63\xe7\x44\xff\xf3\x44\xe1\xe4\x44\xd1\x73\x50\x09\xf5\x54\x17\xec\x04\x63\x20\x45\xf7\x37\x55\x2b\x2a\x55\x38\x43\x60\x5e\x0c\x68\x5c\x04\x68\x3f\x12\x08\x5a\x6d\x40\xe8\xf2\x04\x5a";
          paths[5] = "\x4d\x60\x40\xa7\x08\x63\x01\x45\xeb\xfa\x44\xaa\xf7\x44\x97\xfc\x44\xe2\x02\x45\xd1\xef\x44\xb2\xfc\x44\xfa\xf9\x44\xf0\xe5\x44\xe2\xef\x44\xf7\xdf\x44\xeb\xd6\x44\xe1\xf7\x44\xee\xea\x44\x5b\xe4\x44\x4e\xfc\x44\xdf\xec\x44\xad\xea\x44\x8c\x61\x50\x42\x42\x55\x00\x00\x55\x00\xe2\x44\xda\x63\x40\xf3\xf7\x44\xf7\xf9\x44\xe9\xfb\x04\x6c\xf5\x44\xff\x63\x40\xf4\x38\x45\xed\x7d\x45\xe9\xc0\x55\x01\x0a\x45\xfe\x28\x45\xff\x46\x45\xfe\x26\x55\x04\x40\x55\x15\x66\x55\x09\x10\x55\x25\x22\x55\x35\x25\x55\x19\x05\x55\x26\x0f\x55\x3b\x1e\x55\x1f\x16\x55\x27\x36\x55\x28\x58\x55\x02\x2d\x55\x0d\x41\x55\x0d\x67\x55\x00\x09\x55\x07\x23\x55\x10\x2a\x05\x73\x27\x55\x05\x2e\x55\x01\x43\x60\x67\xe8\x68\x3f\xde\x68\x40\xa7\x08\x5a";
          paths[6] = "\x4d\x60\x0f\xa3\x08\x63\xf2\x44\xf7\xf4\x44\xda\xf6\x44\xc4\x02\x45\xf1\x19\x45\xf5\x25\x45\xef\x18\x55\x02\x22\x55\x3c\x0c\x55\x46\x43\x60\x22\x99\x68\x21\xa0\x68\x0f\xa3\x08\x5a";
          paths[7] = "\x4d\x50\xfe\x2c\x08\x63\xed\x54\x00\xee\x44\xe3\xe0\x44\xdf\x73\x40\xe4\xf0\x44\xed\xec\x04\x63\x19\x45\xf5\x42\x45\xeb\x4d\x45\xf0\x10\x55\x09\x21\x55\x1e\x20\x55\x31\x43\x60\x2d\x20\x68\x07\x2e\x58\xfe\x2c\x08\x5a\x6d\x50\x31\xd4\x04\x5a";
          paths[8] = "\x4d\x50\x87\xd7\x07\x63\xe2\x44\xfb\xc6\x44\xc8\xdd\x44\xb2\x0f\x45\xfb\x16\x55\x0b\x25\x55\x04\x13\x55\x09\x26\x45\xf0\x39\x45\xf7\x04\x45\xf2\x1c\x45\xf4\x1d\x55\x02\x07\x55\x11\x29\x55\x2d\x02\x55\x2e\xfd\x54\x08\xf1\x54\x10\xe8\x54\x0b\x61\x50\x13\x13\x55\x00\x00\x55\x01\xe2\x54\x06\x43\x50\xa6\xd8\x57\x94\xd3\x57\x87\xd7\x07\x5a\x4d\x50\xeb\xa0\x07\x5a";
          paths[9] = "\x4d\x50\x67\x51\x07\x63\xe7\x44\xf9\xee\x44\xfb\xec\x44\xd8\x06\x45\xf2\xf8\x44\xe0\x12\x45\xdb\x09\x45\xfa\x0c\x55\x03\x16\x55\x02\x04\x45\xfb\x10\x45\xf9\x18\x45\xfd\x0b\x45\xf6\x14\x45\xff\x1f\x45\xfc\x1c\x45\xf9\x20\x55\x2c\x1f\x55\x39\x73\x40\xea\x05\x45\xdf\x04\x45\xe5\x09\x45\xdb\x00\x05\x43\x7e\x75\x44\x79\x75\x4e\x67\x75\x51\x5a\x00";
          paths[10] = "\x4d\x50\x7b\xc3\x06\x63\xe8\x44\xff\xea\x44\xc0\xed\x44\xb9\x01\x45\xdf\x1a\x45\xe4\x2f\x45\xf1\x53\x50\xc7\xa9\x56\xba\xb7\x06\x63\xf2\x54\x09\xe9\x54\x07\xd8\x54\x02\x43\x50\x8a\xbb\x56\x86\xc4\x56\x7b\xc3\x06\x5a";
          paths[11] = "\x4d\x60\x6d\x2b\x07\x63\x0d\x45\xfb\x0c\x45\xf9\x0b\x45\xf5\xff\x44\xec\xbd\x44\xe9\xa3\x44\xeb\x00\x55\x00\xea\x54\x05\xea\x54\x05\x6c\x40\xf9\x02\x05\x68\x00\x05\x6c\xf7\x54\x02\x63\x40\xfa\x07\x45\xf9\x0e\x55\x00\x16\x05\x43\x20\x76\x36\x43\x76\x37\x6d\x76\x2b\x5a\x00";
          paths[12] = "\x4d\x60\x36\x30\x07\x6d\xcc\x54\x00\x61\x50\x34\x15\x55\x00\x01\x55\x00\x69\x55\x00\x61\x50\x34\x15\x55\x00\x01\x55\x00\x97\x54\x00";
          paths[13] = "\x4d\x60\x09\x1c\x07\x63\xf7\x44\xfd\xee\x44\xff\xe5\x54\x03\x73\x40\xeb\x0d\x45\xe8\x19\x05\x61\x24\x55\x24\x00\x55\x00\x00\x55\x06\x21\x05\x63\x06\x55\x07\x0f\x55\x09\x17\x55\x0c\x73\x50\x0e\x05\x55\x15\x02\x55\x0d\xf6\x54\x08\xf1\x44\xf3\xfc\x44\xee\xfc\x44\xf2\xfd\x44\xee\xf7\x04\x61\x11\x55\x11\x00\x55\x00\x01\x55\x04\xea\x04\x63\x06\x45\xfc\x10\x45\xfb\x17\x45\xf9";
          paths[14] = "\x4d\x50\xf4\x27\x07\x63\xfe\x54\x16\x0c\x55\x2f\x1a\x55\x40\x73\x50\x2d\x12\x55\x43\x0a\x05\x63\x1c\x45\xf5\x2d\x45\xd4\x28\x45\xb7\x41\x50\xf3\xf3\x55\x00\x00\x55\x01\xf4\x75\x27\x5a\x00";
          paths[15] = "\x4d\x50\x81\x8e\x06\x63\xce\x44\xbf\xd8\x54\x90\xe1\x54\xa8\x0e\x55\x24\x3f\x55\x3c\x65\x55\x3d\x1e\x55\x01\x35\x45\xf1\x2e\x45\xdd\x73\x40\xd4\x00\x45\xbf\xf4\x04\x63\xf1\x44\xf3\xdd\x44\xe9\xd4\x44\xc5\xfb\x44\xea\x02\x45\x9b\xf9\x44\x87";
          paths[16] = "\x4d\x50\xf7\x7f\x06\x48\xd8\x05\x61\x3e\x66\x3e\x00\x55\x00\x00\x45\xdd\xfb\x04\x6c\xf2\x44\xff\x68\x40\xfe\x63\x40\xf9\x00\x45\xf5\xfe\x44\xee\xfa\x04\x61\x04\x55\x04\x00\x55\x00\x00\x45\xfd\xff\x04\x68\xff\x04\x61\x1a\x55\x1a\x00\x55\x00\x01\x45\xee\xfa\x54\x03\x03\x55\x00\x00\x55\x00\xfe\x44\xff\x63\x40\xed\xfc\x44\xec\xf9\x44\xea\xf5\x04\x73\xfb\x44\xf6\xf0\x44\xf0\x61\x50\x87\x87\x55\x00\x00\x55\x01\xef\x44\xc0\x06\x55\x06\x00\x55\x00\x00\x45\xff\xfd\x04\x63\xfc\x44\xfa\xfb\x44\xf2\xfa\x44\xe9\x61\x50\x49\x49\x55\x00\x00\x55\x00\xfc\x44\xea\x34\x55\x34\x00\x55\x00\x00\x45\xf7\xe9\x04\x63\xfe\x44\xfb\xfd\x44\xf6\xfb\x44\xf1\x4c\x50\x29\xb1\x05\x61\x5c\x55\x5c\x00\x55\x00\x00\x45\xfa\xef\x04\x43\x1f\x55\x97\x1b\x55\x8e\x1c\x55\x85\x61\x50\x02\x02\x55\x00\x00\x55\x00\x00\x45\xfe\xc0\x55\xc0\x00\x55\x00\x00\x45\xf7\xeb\x04\x43\x0a\x55\x5a\x00\x55\x44\x09\x55\x36\x61\x50\x06\x06\x55\x00\x00\x55\x00\x01\x45\xfd\x63\x50\x00\xf9\x54\x01\xf4\x54\x04\xf0\x04\x41\x0f\x55\x0f\x00\x55\x00\x01\x55\x18\x20\x05\x61\x25\x55\x25\x00\x55\x00\x01\x55\x1b\x0f\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x00\x43\x55\x43\x00\x55\x00\x01\x55\x0a\x14\x55\x62\x62\x55\x00\x00\x55\x00\x05\x55\x0d\x68\x50\x00\x61\x50\x40\x40\x55\x00\x00\x55\x01\x08\x55\x15\x63\x50\x00\x00\x55\x00\x01\x55\x00\x01\x05\x6c\x08\x55\x0e\x61\x50\x78\x78\x55\x00\x00\x55\x01\x0e\x55\x1d\x76\x50\x01\x63\x50\x00\x01\x55\x00\x03\x55\x01\x04\x05\x61\x21\x55\x21\x00\x55\x00\x00\x55\x01\x08\x05\x63\x00\x55\x00\x00\x55\x01\x01\x55\x01\x41\x50\x37\x37\x55\x00\x00\x55\x01\x6e\x55\xb4\x61\x50\x2a\x2a\x55\x00\x00\x55\x00\x05\x55\x1a\x63\x50\x00\x02\x55\x00\x04\x55\x00\x06\x55\x01\x0d\x55\x02\x1e\x55\x0e\x1e\x05\x68\x03\x05\x6c\x01\x45\xff\x61\x50\x17\x17\x55\x00\x00\x55\x01\x07\x45\xff\x6c\x50\x08\x01\x55\x07\x01\x05\x41\x0d\x55\x0d\x00\x55\x00\x00\x55\xa7\xed\x05\x63\x03\x45\xfc\x03\x45\xf6\x00\x45\xee\x48\x50\xa7\x63\x40\xfb\xf2\x44\xf9\xe4\x44\xf6\xd4\x04\x61\xf6\x55\xf6\x00\x55\x00\x00\x45\xfc\xe5\x04\x76\xff\x04\x61\x7e\x55\x7e\x00\x55\x00\x01\x45\xfb\xe4\x54\x8f\x8f\x55\x00\x00\x55\x00\xfa\x44\xe1\x6a\x55\x6a\x00\x55\x00\x00\x45\xfc\xde\x04\x63\xfd\x44\xf1\xfa\x44\xe8\x08\x45\xd3\x61\x50\x1f\x1f\x55\x00\x00\x55\x01\x0e\x45\xfd\x2a\x55\x2a\x00\x55\x00\x01\x55\x1f\x0f\x55\x1d\x1d\x55\x00\x00\x55\x01\x07\x55\x18\x06\x55\x06\x00\x55\x00\x00\x55\x00\x03\x05\x63\x07\x55\x0d\x08\x55\x1c\x09\x55\x2c\x61\x50\xc0\xc0\x55\x00\x00\x55\x00\x04\x55\x1f\x63\x50\x01\x09\x55\x01\x12\x55\x01\x1b\x55\x00\x12\x55\x01\x25\x55\x05\x37\x05\x61\x35\x55\x35\x00\x55\x00\x00\x55\x01\x18\x05\x63\x01\x55\x15\x12\x55\x27\x2d\x55\x2f\x6c\x50\x05\x02\x05\x63\x0d\x55\x04\x1a\x55\x09\x23\x55\x12\x68\x50\x00\x63\x50\x12\x13\x55\x14\x16\x55\x14\x27\x45\xff\x04\x45\xfe\x07\x45\xfe\x0a\x05\x61\x2b\x55\x2b\x00\x55\x00\x01\x45\xfb\x10\x55\x23\x23\x55\x00\x00\x55\x01\xee\x54\x09\x68\x40\xff\x61\x50\x29\x29\x55\x00\x00\x55\x01\xec\x54\x05\x68\x40\xff\x6c\x40\xfe\x01\x05\x43\x0a\x66\x7d\x03\x66\x7f\xf7\x65\x7f\x5a\x00";
          paths[17] = "\x4d\x50\x9f\x0a\x05\x61\x26\x55\x26\x00\x55\x00\x01\x55\x1b\x0d\x55\x1a\x1a\x55\x00\x00\x55\x01\x06\x55\x14\x0c\x55\x0c\x00\x55\x00\x00\x55\x01\x07\x05\x63\x06\x55\x0c\x07\x55\x1b\x09\x55\x2a\x61\x50\xa8\xa8\x55\x00\x00\x55\x00\x04\x55\x1f\x63\x50\x00\x09\x55\x01\x12\x55\x01\x1b\x05\x61\x37\x66\x37\x00\x55\x00\x00\x55\x04\x38\x55\x3c\x3c\x55\x00\x00\x55\x00\x02\x55\x19\x63\x50\x01\x17\x55\x13\x2b\x55\x30\x33\x05\x6c\x05\x55\x02\x63\x50\x0d\x04\x55\x18\x09\x55\x21\x11\x05\x76\x01\x05\x63\x11\x55\x13\x13\x55\x14\x13\x55\x23\xff\x54\x04\xfe\x54\x07\xfe\x54\x0a\x61\x50\x24\x24\x55\x00\x00\x55\x01\xfc\x54\x0d\x1e\x55\x1e\x00\x55\x00\x01\x45\xf1\x07\x05\x6c\xfd\x54\x01\x61\x50\x23\x23\x55\x00\x00\x55\x01\xee\x54\x05\x68\x40\xff\x61\x50\x0e\x0e\x55\x00\x00\x55\x00\xfb\x54\x01\x63\x40\xfa\x03\x45\xf1\x04\x45\xeb\x04\x05\x48\xd8\x05\x61\x32\x66\x32\x00\x55\x00\x00\x45\xdd\xfb\x04\x6c\xf2\x44\xff\x68\x40\xfd\x63\x40\xfa\x00\x45\xf8\xff\x44\xf1\xfb\x04\x61\x09\x55\x09\x00\x55\x00\x00\x45\xfa\xfe\x04\x68\xff\x04\x61\x14\x55\x14\x00\x55\x00\x01\x45\xf1\xfb\x54\x0b\x0b\x55\x00\x00\x55\x00\xfc\x44\xfe\x63\x40\xf0\xfc\x44\xef\xfa\x44\xed\xf7\x04\x61\x27\x55\x27\x00\x55\x00\x00\x45\xef\xef\x54\x85\x85\x55\x00\x00\x55\x01\xf0\x44\xc3\x0a\x55\x0a\x00\x55\x00\x00\x45\xfe\xfb\x04\x63\xfd\x44\xfb\xfc\x44\xf3\xfb\x44\xec\x61\x50\x4a\x4a\x55\x00\x00\x55\x00\xfb\x44\xe9\x37\x55\x37\x00\x55\x00\x00\x45\xf6\xe8\x04\x63\xff\x44\xfb\xfd\x44\xf6\xfc\x44\xf1\x61\x50\x29\x29\x55\x00\x00\x55\x00\xfe\x44\xfa\x78\x55\x78\x00\x55\x00\x00\x45\xfa\xee\x04\x63\xfc\x44\xf7\xf9\x44\xef\xf9\x44\xe7\x61\x50\x0c\x0c\x55\x00\x00\x55\x00\x00\x45\xfd\x63\x40\xfe\xfa\x44\xfb\xf2\x44\xf7\xeb\x44\xf8\xee\x44\xee\xd9\x44\xf5\xcd\x04\x61\x09\x55\x09\x00\x55\x00\x00\x55\x02\xfa\x04\x41\x11\x55\x11\x00\x55\x00\x01\x55\x11\x27\x05\x61\x0b\x55\x0b\x00\x55\x00\x01\x55\x07\xfe\x04\x41\x1f\x55\x1f\x00\x55\x00\x01\x55\x30\x32\x05\x61\x01\x55\x01\x00\x55\x00\x01\x55\x00\x01\x05\x63\x04\x55\x04\x06\x55\x0b\x09\x55\x12\x41\x50\x6a\x6a\x55\x00\x00\x55\x00\x3e\x55\x52\x6c\x50\x01\x01\x05\x41\x40\x55\x40\x00\x55\x00\x01\x55\x46\x66\x05\x6c\x01\x55\x03\x63\x50\x03\x05\x55\x05\x0a\x55\x08\x0e\x05\x61\x68\x55\x68\x00\x55\x00\x01\x55\x0e\x1c\x05\x63\x00\x55\x00\x00\x55\x01\x00\x55\x01\x73\x50\x00\x02\x55\x00\x03\x05\x61\x1f\x55\x1f\x00\x55\x00\x00\x55\x01\x09\x05\x6c\x01\x55\x02\x61\x50\x31\x31\x55\x00\x00\x55\x01\x08\x55\x13\x31\x55\x31\x00\x55\x00\x00\x55\x05\x1c\x55\x12\x12\x55\x00\x00\x55\x01\x00\x55\x04\x63\x50\x01\x0d\x55\x02\x23\x55\x13\x23\x05\x6c\x04\x45\xff\x02\x45\xff\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\x05\x45\xff\x6c\x50\x07\x01\x55\x08\x01\x05\x61\x11\x55\x11\x00\x55\x00\x00\x55\x0f\xfa\x04\x63\x05\x45\xfa\x03\x45\xf0\x01\x45\xe9\x61\x50\x01\x01\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xfb\xf3\x44\xf9\xe5\x44\xf7\xd5\x44\xff\xf7\x44\xfe\xee\x44\xfc\xe4\x54\x00\x00\x55\x00\xff\x54\x00\xff\x04\x61\x85\x55\x85\x00\x55\x00\x01\x45\xfb\xe5\x54\xa6\xa6\x55\x00\x00\x55\x00\xfa\x44\xe1\x77\x55\x77\x00\x55\x00\x00\x45\xfc\xdd\x04\x63\xfd\x44\xf2\xfb\x44\xeb\x06\x45\xd9\x41\x50\x17\x17\x55\x00\x00\x55\x01\x9f\x55\x0a\x6d\x50\x00\xf6\x04\x61\x22\x55\x22\x00\x55\x00\x00\x45\xef\x04\x05\x63\xe7\x54\x25\xfd\x54\x2c\xfb\x54\x54\x07\x55\x13\x05\x55\x28\x0c\x55\x3c\x73\x50\x05\x32\x55\x0e\x48\x05\x63\x04\x55\x0e\x01\x55\x10\xfa\x54\x10\x73\x40\xf6\xff\x44\xf1\xff\x04\x61\x18\x55\x18\x00\x55\x00\x00\x45\xf6\x02\x05\x68\xfe\x04\x63\xf6\x54\x00\xf7\x44\xe8\xf6\x44\xe0\x61\x50\x28\x28\x55\x00\x00\x55\x01\xfb\x44\xe7\x3d\x55\x3d\x00\x55\x00\x00\x45\xf6\xe8\x04\x63\xff\x44\xfc\x00\x45\xf7\xfe\x44\xf4\xfc\x44\xef\xf1\x44\xe3\xea\x44\xd4\x41\x50\x43\x43\x55\x00\x00\x55\x00\x47\x55\x4d\x63\x40\xfb\xf5\x44\xf8\xe8\x44\xf0\xdf\x04\x41\x2a\x55\x2a\x00\x55\x00\x00\x55\x18\x1b\x05\x63\xf4\x54\x00\xeb\x54\x07\xec\x54\x19\xf2\x54\x16\x0b\x55\x39\x12\x55\x51\x00\x55\x10\x0a\x55\x1e\x0e\x55\x2e\x02\x55\x07\x04\x55\x0f\x07\x55\x17\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\x09\x55\x16\x63\x50\x07\x0f\x55\x02\x20\x55\x0b\x2f\x05\x61\x8a\x55\x8a\x00\x55\x00\x00\x55\x12\x44\x05\x63\x1a\x55\x0e\x04\x55\x14\x28\x55\x1c\x61\x50\x1f\x1f\x55\x00\x00\x55\x00\x15\x55\x07\x68\x50\x01\x61\x50\x1e\x1e\x55\x00\x00\x55\x00\x14\x55\x07\x68\x50\x02\x63\x50\x14\x02\x55\x1e\x02\x55\x31\x07\x05\x68\x07\x05\x6c\x18\x55\x01\x63\x50\x0a\x00\x55\x13\xff\x54\x1b\xfb\x04\x68\x01\x05\x61\x2b\x55\x2b\x00\x55\x00\x00\x55\x17\xfa\x54\x25\x25\x55\x00\x00\x55\x00\x15\x45\xf5\x63\x50\x06\xf6\x54\x05\xef\x54\x09\xe4\x54\x00\xec\x44\xfd\xe9\x44\xea\xd4\x44\xf5\xf4\x44\xe5\xf0\x44\xd6\xea\x04\x53\xdf\x55\xfd\xde\x55\xe5\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\xff\x44\xe9\x63\x40\xfa\xe5\x44\xfc\xc8\x44\xfa\xad\x04\x53\xd6\x55\x45\xca\x55\x2e\x43\x50\xcf\x15\x55\xb6\x00\x55\x9f\x00\x05\x5a";
          paths[18] = "\x4d\x50\x12\x3a\x06\x6c\x12\x55\x02\x11\x55\x02\x12\x55\x02\x11\x55\x02";
          paths[19] = "\x4d\x50\x12\x3a\x06\x6c\x12\x55\x02\x11\x55\x02\x12\x55\x02\x11\x55\x02";
          paths[20] = "\x4d\x50\x20\x5b\x06\x6c\x10\x45\xfd\x10\x45\xfd\x10\x45\xfe\x10\x45\xfd";
          paths[21] = "\x4d\x50\x20\x5b\x06\x6c\x10\x45\xfd\x10\x45\xfd\x10\x45\xfe\x10\x45\xfd";
          paths[22] = "\x4d\x60\x24\x65\x06\x63\x0a\x55\x03\x0f\x55\x01\x13\x55\x01";
          paths[23] = "\x4d\x60\x24\x65\x06\x63\x0a\x55\x03\x0f\x55\x01\x13\x55\x01";
          paths[24] = "\x4d\x50\xbf\x2a\x06\x63\xff\x54\x02\x00\x55\x05\x00\x55\x07";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#fff";
          fill[12] = "#ae7d63";
          fill[13] = "#cceb84";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "#fafaf5";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Lu_1_R() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 301, 408, 408];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\xa9\xb3\x06\x63\x19\x55\x0c\x1e\x55\x1a\x25\x55\x26\x61\x50\x45\x45\x55\x00\x00\x55\x01\x0e\x55\x13\x63\x50\x15\x13\x55\x1f\x1d\x55\x3a\x29\x55\x0c\x05\x55\x1d\x0f\x55\x26\x13\x55\x29\x12\x55\x07\x2d\x45\xe9\x22\x05\x73\xdf\x44\xeb\xc5\x44\xde\x63\x40\xf9\xfe\x44\xe2\xf1\x44\xdf\xea\x04\x73\xf4\x44\xf3\xee\x44\xef\x63\x40\xfc\xf3\x44\xdf\xe1\x44\xe7\xd0\x04";
          paths[1] = "\x4d\x50\x2c\xce\x07\x63\xf6\x44\xfe\xed\x44\xf7\xf3\x44\xee\x41\x50\x16\x16\x55\x00\x00\x55\x01\x1b\x75\xae\x63\x40\xff\xfa\x54\x03\xfa\x54\x08\xfa\x04\x73\xff\x44\xf5\x06\x45\xf4\x14\x45\xef\x1e\x45\xfd\x63\x50\x07\x07\x55\x1d\xfe\x54\x1a\x12\x55\x0a\x09\x55\x01\x10\x55\x04\x1a\x45\xfc\x05\x45\xf4\x09\x45\xee\x0e\x05\x73\xd4\x54\x0a\xd5\x44\xf9";
          paths[2] = "\x4d\x50\x9a\xd8\x07\x63\x0f\x55\x06\x37\x55\x06\x47\x55\x0a\x19\x55\x05\x28\x55\x0c\x3e\x55\x1b\x1e\x55\x16\x27\x55\x33\x2b\x55\x57\x53\x60\x51\x9d\x68\x51\xc3\x08\x63\x00\x55\x09\x0c\x55\x13\x15\x55\x19\x73\x50\x21\x09\x55\x27\x04\x05\x63\x17\x45\xee\xf4\x44\xeb\xf5\x44\xb4\x00\x45\xeb\xfc\x44\xde\xfb\x44\xca\x73\x40\xf8\xd7\x44\xf5\xc3\x04\x63\xfc\x44\xe2\xf7\x44\xd3\xe5\x44\xc0\xe9\x44\xe6\xe1\x44\xe6\xc1\x44\xdb\xea\x44\xf8\xe0\x44\xf0\xc5\x44\xe5";
          paths[3] = "\x4d\x60\x5d\x88\x08\x63\xe3\x44\xf9\xeb\x44\xaf\x11\x45\xb8\x10\x55\x04\x0b\x55\x1b\x0b\x55\x28\x43\x60\x7b\x7e\x68\x82\x87\x68\x5d\x88\x08\x5a";
          paths[4] = "\x4d\x60\x3f\x12\x08\x63\xe7\x44\xff\xf3\x44\xe1\xe4\x44\xd1\x73\x50\x09\xf5\x54\x17\xec\x04\x63\x20\x45\xf7\x37\x55\x2b\x2a\x55\x38\x43\x60\x5e\x0c\x68\x5c\x04\x68\x3f\x12\x08\x5a\x6d\x40\xe8\xf2\x04\x5a";
          paths[5] = "\x4d\x60\x40\xa7\x08\x63\x01\x45\xeb\xfa\x44\xaa\xf7\x44\x97\xfc\x44\xe2\x02\x45\xd1\xef\x44\xb2\xfc\x44\xfa\xf9\x44\xf0\xe5\x44\xe2\xef\x44\xf7\xdf\x44\xeb\xd6\x44\xe1\xf7\x44\xee\xea\x44\x5b\xe4\x44\x4e\xfc\x44\xdf\xec\x44\xad\xea\x44\x8c\x61\x50\x42\x42\x55\x00\x00\x55\x00\xe2\x44\xda\x63\x40\xf3\xf7\x44\xf7\xf9\x44\xe9\xfb\x04\x6c\xf5\x44\xff\x63\x40\xf4\x38\x45\xed\x7d\x45\xe9\xc0\x55\x01\x0a\x45\xfe\x28\x45\xff\x46\x45\xfe\x26\x55\x04\x40\x55\x15\x66\x55\x09\x10\x55\x25\x22\x55\x35\x25\x55\x19\x05\x55\x26\x0f\x55\x3b\x1e\x55\x1f\x16\x55\x27\x36\x55\x28\x58\x55\x02\x2d\x55\x0d\x41\x55\x0d\x67\x55\x00\x09\x55\x07\x23\x55\x10\x2a\x05\x73\x27\x55\x05\x2e\x55\x01\x43\x60\x67\xe8\x68\x3f\xde\x68\x40\xa7\x08\x5a";
          paths[6] = "\x4d\x60\x0f\xa3\x08\x63\xf2\x44\xf7\xf4\x44\xda\xf6\x44\xc4\x02\x45\xf1\x19\x45\xf5\x25\x45\xef\x18\x55\x02\x22\x55\x3c\x0c\x55\x46\x43\x60\x22\x99\x68\x21\xa0\x68\x0f\xa3\x08\x5a";
          paths[7] = "\x4d\x50\xfe\x2c\x08\x63\xed\x54\x00\xee\x44\xe3\xe0\x44\xdf\x73\x40\xe4\xf0\x44\xed\xec\x04\x63\x19\x45\xf5\x42\x45\xeb\x4d\x45\xf0\x10\x55\x09\x21\x55\x1e\x20\x55\x31\x43\x60\x2d\x20\x68\x07\x2e\x58\xfe\x2c\x08\x5a\x6d\x50\x31\xd4\x04\x5a";
          paths[8] = "\x4d\x50\x87\xd7\x07\x63\xe2\x44\xfb\xc6\x44\xc8\xdd\x44\xb2\x0f\x45\xfb\x16\x55\x0b\x25\x55\x04\x13\x55\x09\x26\x45\xf0\x39\x45\xf7\x04\x45\xf2\x1c\x45\xf4\x1d\x55\x02\x07\x55\x11\x29\x55\x2d\x02\x55\x2e\xfd\x54\x08\xf1\x54\x10\xe8\x54\x0b\x61\x50\x13\x13\x55\x00\x00\x55\x01\xe2\x54\x06\x43\x50\xa6\xd8\x57\x94\xd3\x57\x87\xd7\x07\x5a\x4d\x50\xeb\xa0\x07\x5a";
          paths[9] = "\x4d\x50\x67\x51\x07\x63\xe7\x44\xf9\xee\x44\xfb\xec\x44\xd8\x06\x45\xf2\xf8\x44\xe0\x12\x45\xdb\x09\x45\xfa\x0c\x55\x03\x16\x55\x02\x04\x45\xfb\x10\x45\xf9\x18\x45\xfd\x0b\x45\xf6\x14\x45\xff\x1f\x45\xfc\x1c\x45\xf9\x20\x55\x2c\x1f\x55\x39\x73\x40\xea\x05\x45\xdf\x04\x45\xe5\x09\x45\xdb\x00\x05\x43\x7e\x75\x44\x79\x75\x4e\x67\x75\x51\x5a\x00";
          paths[10] = "\x4d\x50\x7b\xc3\x06\x63\xe8\x44\xff\xea\x44\xc0\xed\x44\xb9\x01\x45\xdf\x1a\x45\xe4\x2f\x45\xf1\x53\x50\xc7\xa9\x56\xba\xb7\x06\x63\xf2\x54\x09\xe9\x54\x07\xd8\x54\x02\x43\x50\x8a\xbb\x56\x86\xc4\x56\x7b\xc3\x06\x5a";
          paths[11] = "\x4d\x60\x09\x1c\x07\x63\xf7\x44\xfd\xee\x44\xff\xe5\x54\x03\x73\x40\xeb\x0d\x45\xe8\x19\x05\x61\x24\x55\x24\x00\x55\x00\x00\x55\x06\x21\x05\x63\x06\x55\x07\x0f\x55\x09\x17\x55\x0c\x73\x50\x0e\x05\x55\x15\x02\x55\x0d\xf6\x54\x08\xf1\x44\xf3\xfc\x44\xee\xfc\x44\xf2\xfd\x44\xee\xf7\x04\x61\x11\x55\x11\x00\x55\x00\x01\x55\x04\xea\x04\x63\x06\x45\xfc\x10\x45\xfb\x17\x45\xf9";
          paths[12] = "\x4d\x60\x6d\x2b\x07\x63\x0d\x45\xfb\x0c\x45\xf9\x0b\x45\xf5\xff\x44\xec\xbd\x44\xe9\xa3\x44\xeb\x00\x55\x00\xea\x54\x05\xea\x54\x05\x73\x40\xe3\x07\x45\xf0\x1a\x05\x43\x20\x76\x36\x43\x76\x37\x6d\x76\x2b\x5a\x00";
          paths[13] = "\x4d\x60\x36\x30\x07\x6d\xcc\x54\x00\x61\x50\x34\x15\x55\x00\x01\x55\x00\x69\x55\x00\x61\x50\x34\x15\x55\x00\x01\x55\x00\x97\x54\x00";
          paths[14] = "\x4d\x50\xf4\x27\x07\x63\xfe\x54\x16\x0c\x55\x2f\x1a\x55\x40\x73\x50\x2d\x12\x55\x43\x0a\x05\x63\x1c\x45\xf5\x2d\x45\xd4\x28\x45\xb7\x41\x50\xf3\xf3\x55\x00\x00\x55\x01\xf4\x75\x27\x5a\x00";
          paths[15] = "\x4d\x50\x81\x8e\x06\x63\xce\x44\xbf\xd8\x54\x90\xe1\x54\xa8\x0e\x55\x24\x3f\x55\x3c\x65\x55\x3d\x1e\x55\x01\x35\x45\xf1\x2e\x45\xdd\x73\x40\xd4\x00\x45\xbf\xf4\x04\x63\xf1\x44\xf3\xdd\x44\xe9\xd4\x44\xc5\xfb\x44\xea\x02\x45\x9b\xf9\x44\x87";
          paths[16] = "\x4d\x50\xf7\x7f\x06\x48\xd8\x05\x61\x3e\x66\x3e\x00\x55\x00\x00\x45\xdd\xfb\x04\x6c\xf2\x44\xff\x68\x40\xfe\x63\x40\xf9\x00\x45\xf5\xfe\x44\xee\xfa\x04\x61\x04\x55\x04\x00\x55\x00\x00\x45\xfd\xff\x04\x68\xff\x04\x61\x1a\x55\x1a\x00\x55\x00\x01\x45\xee\xfa\x54\x03\x03\x55\x00\x00\x55\x00\xfe\x44\xff\x63\x40\xed\xfc\x44\xec\xf9\x44\xea\xf5\x04\x73\xfb\x44\xf6\xf0\x44\xf0\x61\x50\x87\x87\x55\x00\x00\x55\x01\xef\x44\xc0\x06\x55\x06\x00\x55\x00\x00\x45\xff\xfd\x04\x63\xfc\x44\xfa\xfb\x44\xf2\xfa\x44\xe9\x61\x50\x49\x49\x55\x00\x00\x55\x00\xfc\x44\xea\x34\x55\x34\x00\x55\x00\x00\x45\xf7\xe9\x04\x63\xfe\x44\xfb\xfd\x44\xf6\xfb\x44\xf1\x4c\x50\x29\xb1\x05\x61\x5c\x55\x5c\x00\x55\x00\x00\x45\xfa\xef\x04\x43\x1f\x55\x97\x1b\x55\x8e\x1c\x55\x85\x61\x50\x02\x02\x55\x00\x00\x55\x00\x00\x45\xfe\xc0\x55\xc0\x00\x55\x00\x00\x45\xf7\xeb\x04\x43\x0a\x55\x5a\x00\x55\x44\x09\x55\x36\x61\x50\x06\x06\x55\x00\x00\x55\x00\x01\x45\xfd\x63\x50\x00\xf9\x54\x01\xf4\x54\x04\xf0\x04\x41\x0f\x55\x0f\x00\x55\x00\x01\x55\x18\x20\x05\x61\x25\x55\x25\x00\x55\x00\x01\x55\x1b\x0f\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x00\x43\x55\x43\x00\x55\x00\x01\x55\x0a\x14\x55\x62\x62\x55\x00\x00\x55\x00\x05\x55\x0d\x68\x50\x00\x61\x50\x40\x40\x55\x00\x00\x55\x01\x08\x55\x15\x63\x50\x00\x00\x55\x00\x01\x55\x00\x01\x05\x6c\x08\x55\x0e\x61\x50\x78\x78\x55\x00\x00\x55\x01\x0e\x55\x1d\x76\x50\x01\x63\x50\x00\x01\x55\x00\x03\x55\x01\x04\x05\x61\x21\x55\x21\x00\x55\x00\x00\x55\x01\x08\x05\x63\x00\x55\x00\x00\x55\x01\x01\x55\x01\x41\x50\x37\x37\x55\x00\x00\x55\x01\x6e\x55\xb4\x61\x50\x2a\x2a\x55\x00\x00\x55\x00\x05\x55\x1a\x63\x50\x00\x02\x55\x00\x04\x55\x00\x06\x55\x01\x0d\x55\x02\x1e\x55\x0e\x1e\x05\x68\x03\x05\x6c\x01\x45\xff\x61\x50\x17\x17\x55\x00\x00\x55\x01\x07\x45\xff\x6c\x50\x08\x01\x55\x07\x01\x05\x41\x0d\x55\x0d\x00\x55\x00\x00\x55\xa7\xed\x05\x63\x03\x45\xfc\x03\x45\xf6\x00\x45\xee\x48\x50\xa7\x63\x40\xfb\xf2\x44\xf9\xe4\x44\xf6\xd4\x04\x61\xf6\x55\xf6\x00\x55\x00\x00\x45\xfc\xe5\x04\x76\xff\x04\x61\x7e\x55\x7e\x00\x55\x00\x01\x45\xfb\xe4\x54\x8f\x8f\x55\x00\x00\x55\x00\xfa\x44\xe1\x6a\x55\x6a\x00\x55\x00\x00\x45\xfc\xde\x04\x63\xfd\x44\xf1\xfa\x44\xe8\x08\x45\xd3\x61\x50\x1f\x1f\x55\x00\x00\x55\x01\x0e\x45\xfd\x2a\x55\x2a\x00\x55\x00\x01\x55\x1f\x0f\x55\x1d\x1d\x55\x00\x00\x55\x01\x07\x55\x18\x06\x55\x06\x00\x55\x00\x00\x55\x00\x03\x05\x63\x07\x55\x0d\x08\x55\x1c\x09\x55\x2c\x61\x50\xc0\xc0\x55\x00\x00\x55\x00\x04\x55\x1f\x63\x50\x01\x09\x55\x01\x12\x55\x01\x1b\x55\x00\x12\x55\x01\x25\x55\x05\x37\x05\x61\x35\x55\x35\x00\x55\x00\x00\x55\x01\x18\x05\x63\x01\x55\x15\x12\x55\x27\x2d\x55\x2f\x6c\x50\x05\x02\x05\x63\x0d\x55\x04\x1a\x55\x09\x23\x55\x12\x68\x50\x00\x63\x50\x12\x13\x55\x14\x16\x55\x14\x27\x45\xff\x04\x45\xfe\x07\x45\xfe\x0a\x05\x61\x2b\x55\x2b\x00\x55\x00\x01\x45\xfb\x10\x55\x23\x23\x55\x00\x00\x55\x01\xee\x54\x09\x68\x40\xff\x61\x50\x29\x29\x55\x00\x00\x55\x01\xec\x54\x05\x68\x40\xff\x6c\x40\xfe\x01\x05\x43\x0a\x66\x7d\x03\x66\x7f\xf7\x65\x7f\x5a\x00";
          paths[17] = "\x4d\x50\x9f\x0a\x05\x61\x26\x55\x26\x00\x55\x00\x01\x55\x1b\x0d\x55\x1a\x1a\x55\x00\x00\x55\x01\x06\x55\x14\x0c\x55\x0c\x00\x55\x00\x00\x55\x01\x07\x05\x63\x06\x55\x0c\x07\x55\x1b\x09\x55\x2a\x61\x50\xa8\xa8\x55\x00\x00\x55\x00\x04\x55\x1f\x63\x50\x00\x09\x55\x01\x12\x55\x01\x1b\x05\x61\x37\x66\x37\x00\x55\x00\x00\x55\x04\x38\x55\x3c\x3c\x55\x00\x00\x55\x00\x02\x55\x19\x63\x50\x01\x17\x55\x13\x2b\x55\x30\x33\x05\x6c\x05\x55\x02\x63\x50\x0d\x04\x55\x18\x09\x55\x21\x11\x05\x76\x01\x05\x63\x11\x55\x13\x13\x55\x14\x13\x55\x23\xff\x54\x04\xfe\x54\x07\xfe\x54\x0a\x61\x50\x24\x24\x55\x00\x00\x55\x01\xfc\x54\x0d\x1e\x55\x1e\x00\x55\x00\x01\x45\xf1\x07\x05\x6c\xfd\x54\x01\x61\x50\x23\x23\x55\x00\x00\x55\x01\xee\x54\x05\x68\x40\xff\x61\x50\x0e\x0e\x55\x00\x00\x55\x00\xfb\x54\x01\x63\x40\xfa\x03\x45\xf1\x04\x45\xeb\x04\x05\x48\xd8\x05\x61\x32\x66\x32\x00\x55\x00\x00\x45\xdd\xfb\x04\x6c\xf2\x44\xff\x68\x40\xfd\x63\x40\xfa\x00\x45\xf8\xff\x44\xf1\xfb\x04\x61\x09\x55\x09\x00\x55\x00\x00\x45\xfa\xfe\x04\x68\xff\x04\x61\x14\x55\x14\x00\x55\x00\x01\x45\xf1\xfb\x54\x0b\x0b\x55\x00\x00\x55\x00\xfc\x44\xfe\x63\x40\xf0\xfc\x44\xef\xfa\x44\xed\xf7\x04\x61\x27\x55\x27\x00\x55\x00\x00\x45\xef\xef\x54\x85\x85\x55\x00\x00\x55\x01\xf0\x44\xc3\x0a\x55\x0a\x00\x55\x00\x00\x45\xfe\xfb\x04\x63\xfd\x44\xfb\xfc\x44\xf3\xfb\x44\xec\x61\x50\x4a\x4a\x55\x00\x00\x55\x00\xfb\x44\xe9\x37\x55\x37\x00\x55\x00\x00\x45\xf6\xe8\x04\x63\xff\x44\xfb\xfd\x44\xf6\xfc\x44\xf1\x61\x50\x29\x29\x55\x00\x00\x55\x00\xfe\x44\xfa\x78\x55\x78\x00\x55\x00\x00\x45\xfa\xee\x04\x63\xfc\x44\xf7\xf9\x44\xef\xf9\x44\xe7\x61\x50\x0c\x0c\x55\x00\x00\x55\x00\x00\x45\xfd\x63\x40\xfe\xfa\x44\xfb\xf2\x44\xf7\xeb\x44\xf8\xee\x44\xee\xd9\x44\xf5\xcd\x04\x61\x09\x55\x09\x00\x55\x00\x00\x55\x02\xfa\x04\x41\x11\x55\x11\x00\x55\x00\x01\x55\x11\x27\x05\x61\x0b\x55\x0b\x00\x55\x00\x01\x55\x07\xfe\x04\x41\x1f\x55\x1f\x00\x55\x00\x01\x55\x30\x32\x05\x61\x01\x55\x01\x00\x55\x00\x01\x55\x00\x01\x05\x63\x04\x55\x04\x06\x55\x0b\x09\x55\x12\x41\x50\x6a\x6a\x55\x00\x00\x55\x00\x3e\x55\x52\x6c\x50\x01\x01\x05\x41\x40\x55\x40\x00\x55\x00\x01\x55\x46\x66\x05\x6c\x01\x55\x03\x63\x50\x03\x05\x55\x05\x0a\x55\x08\x0e\x05\x61\x68\x55\x68\x00\x55\x00\x01\x55\x0e\x1c\x05\x63\x00\x55\x00\x00\x55\x01\x00\x55\x01\x73\x50\x00\x02\x55\x00\x03\x05\x61\x1f\x55\x1f\x00\x55\x00\x00\x55\x01\x09\x05\x6c\x01\x55\x02\x61\x50\x31\x31\x55\x00\x00\x55\x01\x08\x55\x13\x31\x55\x31\x00\x55\x00\x00\x55\x05\x1c\x55\x12\x12\x55\x00\x00\x55\x01\x00\x55\x04\x63\x50\x01\x0d\x55\x02\x23\x55\x13\x23\x05\x6c\x04\x45\xff\x02\x45\xff\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\x05\x45\xff\x6c\x50\x07\x01\x55\x08\x01\x05\x61\x11\x55\x11\x00\x55\x00\x00\x55\x0f\xfa\x04\x63\x05\x45\xfa\x03\x45\xf0\x01\x45\xe9\x61\x50\x01\x01\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xfb\xf3\x44\xf9\xe5\x44\xf7\xd5\x44\xff\xf7\x44\xfe\xee\x44\xfc\xe4\x54\x00\x00\x55\x00\xff\x54\x00\xff\x04\x61\x85\x55\x85\x00\x55\x00\x01\x45\xfb\xe5\x54\xa6\xa6\x55\x00\x00\x55\x00\xfa\x44\xe1\x77\x55\x77\x00\x55\x00\x00\x45\xfc\xdd\x04\x63\xfd\x44\xf2\xfb\x44\xeb\x06\x45\xd9\x41\x50\x17\x17\x55\x00\x00\x55\x01\x9f\x55\x0a\x6d\x50\x00\xf6\x04\x61\x22\x55\x22\x00\x55\x00\x00\x45\xef\x04\x05\x63\xe7\x54\x25\xfd\x54\x2c\xfb\x54\x54\x07\x55\x13\x05\x55\x28\x0c\x55\x3c\x73\x50\x05\x32\x55\x0e\x48\x05\x63\x04\x55\x0e\x01\x55\x10\xfa\x54\x10\x73\x40\xf6\xff\x44\xf1\xff\x04\x61\x18\x55\x18\x00\x55\x00\x00\x45\xf6\x02\x05\x68\xfe\x04\x63\xf6\x54\x00\xf7\x44\xe8\xf6\x44\xe0\x61\x50\x28\x28\x55\x00\x00\x55\x01\xfb\x44\xe7\x3d\x55\x3d\x00\x55\x00\x00\x45\xf6\xe8\x04\x63\xff\x44\xfc\x00\x45\xf7\xfe\x44\xf4\xfc\x44\xef\xf1\x44\xe3\xea\x44\xd4\x41\x50\x43\x43\x55\x00\x00\x55\x00\x47\x55\x4d\x63\x40\xfb\xf5\x44\xf8\xe8\x44\xf0\xdf\x04\x41\x2a\x55\x2a\x00\x55\x00\x00\x55\x18\x1b\x05\x63\xf4\x54\x00\xeb\x54\x07\xec\x54\x19\xf2\x54\x16\x0b\x55\x39\x12\x55\x51\x00\x55\x10\x0a\x55\x1e\x0e\x55\x2e\x02\x55\x07\x04\x55\x0f\x07\x55\x17\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\x09\x55\x16\x63\x50\x07\x0f\x55\x02\x20\x55\x0b\x2f\x05\x61\x8a\x55\x8a\x00\x55\x00\x00\x55\x12\x44\x05\x63\x1a\x55\x0e\x04\x55\x14\x28\x55\x1c\x61\x50\x1f\x1f\x55\x00\x00\x55\x00\x15\x55\x07\x68\x50\x01\x61\x50\x1e\x1e\x55\x00\x00\x55\x00\x14\x55\x07\x68\x50\x02\x63\x50\x14\x02\x55\x1e\x02\x55\x31\x07\x05\x68\x07\x05\x6c\x18\x55\x01\x63\x50\x0a\x00\x55\x13\xff\x54\x1b\xfb\x04\x68\x01\x05\x61\x2b\x55\x2b\x00\x55\x00\x00\x55\x17\xfa\x54\x25\x25\x55\x00\x00\x55\x00\x15\x45\xf5\x63\x50\x06\xf6\x54\x05\xef\x54\x09\xe4\x54\x00\xec\x44\xfd\xe9\x44\xea\xd4\x44\xf5\xf4\x44\xe5\xf0\x44\xd6\xea\x04\x53\xdf\x55\xfd\xde\x55\xe5\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\xff\x44\xe9\x63\x40\xfa\xe5\x44\xfc\xc8\x44\xfa\xad\x04\x53\xd6\x55\x45\xca\x55\x2e\x43\x50\xcf\x15\x55\xb6\x00\x55\x9f\x00\x05\x5a";
          paths[18] = "\x4d\x50\x12\x3a\x06\x6c\x12\x55\x02\x11\x55\x02\x12\x55\x02\x11\x55\x02";
          paths[19] = "\x4d\x50\x12\x3a\x06\x6c\x12\x55\x02\x11\x55\x02\x12\x55\x02\x11\x55\x02";
          paths[20] = "\x4d\x50\x20\x5b\x06\x6c\x10\x45\xfd\x10\x45\xfd\x10\x45\xfe\x10\x45\xfd";
          paths[21] = "\x4d\x50\x20\x5b\x06\x6c\x10\x45\xfd\x10\x45\xfd\x10\x45\xfe\x10\x45\xfd";
          paths[22] = "\x4d\x60\x24\x65\x06\x63\x0a\x55\x03\x0f\x55\x01\x13\x55\x01";
          paths[23] = "\x4d\x60\x24\x65\x06\x63\x0a\x55\x03\x0f\x55\x01\x13\x55\x01";
          paths[24] = "\x4d\x50\xbf\x2a\x06\x63\xff\x54\x02\x00\x55\x05\x00\x55\x07";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#cceb84";
          fill[12] = "#fff";
          fill[13] = "#ae7d63";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "#fafaf5";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Lu_2_artboard() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 814, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x60\xf2\xa0\x06\x63\x0a\x55\x0b\x09\x55\x2c\x12\x55\x33\x14\x55\x11\x2d\x55\x07\x29\x55\x17\xfe\x54\x0a\xe1\x54\x02\xd8\x44\xfd\xf4\x44\xfa\xe2\x44\xd2\xe5\x44\xc4";
          paths[1] = "\x4d\x60\xc6\x17\x07\x63\xfc\x44\xff\xf9\x44\xfd\xfb\x44\xf9\x61\x50\x08\x08\x55\x00\x00\x55\x01\xfe\x44\xfb\x63\x50\x00\xfe\x54\x01\xfe\x54\x03\xfe\x04\x73\x00\x45\xfc\x02\x45\xfc\x07\x45\xfa\x0b\x45\xff\x63\x50\x03\x03\x55\x0b\xff\x54\x0a\x07\x55\x04\x03\x55\x01\x06\x55\x01\x0a\x45\xfe\x02\x45\xfc\x03\x45\xfa\x05\x05\x73\xf0\x54\x04\xf0\x44\xfd";
          paths[2] = "\x4d\x60\xee\x1b\x07\x63\x06\x55\x02\x14\x55\x02\x1a\x55\x03\x09\x55\x02\x0f\x55\x04\x17\x55\x0a\x0b\x55\x08\x0f\x55\x13\x10\x55\x20\x73\x50\x03\x1b\x55\x03\x29\x05\x63\x00\x55\x03\x04\x55\x07\x08\x55\x09\x73\x50\x0c\x03\x55\x0e\x02\x05\x63\x09\x45\xf9\xfc\x44\xf8\xfc\x44\xe4\x00\x45\xf8\xfe\x44\xf4\xfe\x44\xec\x73\x40\xfd\xf1\x44\xfc\xea\x04\x63\xfe\x44\xf5\xfd\x44\xef\xf6\x44\xe8\xf7\x44\xf6\xf4\x44\xf6\xe9\x44\xf2\xf8\x44\xfd\xf4\x44\xfa\xea\x44\xf6";
          paths[3] = "\x4d\x70\x36\x5c\x07\x63\xf5\x44\xfd\xf8\x44\xe2\x06\x45\xe5\x06\x55\x02\x04\x55\x0a\x04\x55\x0f\x43\x70\x41\x58\x77\x44\x5c\x77\x36\x5c\x07\x5a";
          paths[4] = "\x4d\x70\x2c\x31\x07\x63\xfb\x44\xfe\xf8\x44\xf6\xf3\x44\xf0\x73\x50\x03\xfc\x54\x09\xf8\x04\x63\x0c\x45\xfd\x16\x55\x11\x15\x55\x14\x53\x70\x37\x2b\x77\x2c\x31\x07\x5a\x6d\x40\xf4\xfc\x04\x68\x00\x05\x5a";
          paths[5] = "\x4d\x70\x2c\x68\x07\x63\x00\x45\xf8\xfd\x44\xe0\xfc\x44\xd9\xfe\x44\xf5\x01\x45\xef\xfa\x44\xe3\xff\x44\xfe\xfd\x44\xfa\xf6\x44\xf5\xfa\x44\xfd\xf4\x44\xf8\xf1\x44\xf5\xfc\x44\xf9\xf4\x44\xc2\xf2\x44\xbd\xfe\x44\xf4\xf7\x44\xde\xf7\x44\xd2\xfe\x44\xfa\x00\x45\xf9\xfa\x44\xf6\x73\x40\xfd\xfd\x44\xf8\xfe\x04\x6c\xfc\x54\x00\x61\x70\xae\xae\x57\x00\x00\x55\x00\xf7\x54\x47\x63\x50\x00\x04\x45\xff\x0f\x45\xff\x1a\x45\xff\x0e\x55\x02\x18\x55\x08\x26\x55\x04\x06\x55\x0e\x0c\x55\x13\x0e\x55\x09\x02\x55\x0e\x06\x55\x16\x0b\x55\x0b\x08\x55\x0e\x14\x55\x0f\x21\x55\x01\x11\x55\x05\x18\x55\x05\x26\x55\x00\x03\x55\x03\x0d\x55\x06\x0f\x05\x73\x0f\x55\x02\x11\x55\x00\x43\x70\x3a\x80\x77\x2b\x7c\x77\x2c\x68\x07\x5a";
          paths[6] = "\x4d\x70\x1a\x66\x07\x63\xfd\x44\xfc\xff\x44\xf1\xfc\x44\xea\xfe\x44\xfb\x09\x45\xfc\x0e\x45\xf9\x09\x55\x01\x08\x55\x0d\x08\x55\x15\x53\x70\x20\x65\x77\x1a\x66\x07\x5a";
          paths[7] = "\x4d\x70\x13\x3a\x07\x63\xf9\x54\x00\xf9\x44\xf6\xf4\x44\xf4\x73\x40\xf5\xfa\x44\xf9\xf9\x04\x63\x09\x45\xfc\x18\x45\xf8\x1c\x45\xfa\x06\x55\x03\x0c\x55\x0b\x0c\x55\x12\x43\x70\x25\x36\x77\x17\x3b\x77\x13\x3a\x07\x5a\x6d\x50\x12\xf0\x04\x5a";
          paths[8] = "\x4d\x60\xe2\x19\x07\x63\xfc\x44\xfe\xf6\x44\xec\xf9\x44\xe6\x73\x50\x08\x04\x55\x0e\x01\x05\x63\x07\x55\x03\x0e\x45\xfa\x15\x45\xfd\x01\x45\xfb\x07\x45\xfb\x07\x55\x01\x03\x55\x06\x13\x55\x11\x04\x55\x11\xff\x54\x03\xfb\x54\x06\xf7\x54\x04\xfe\x54\x04\xf6\x54\x03\xf2\x54\x00\x43\x60\xf0\x19\x67\xe6\x17\x67\xe2\x19\x07\x5a\x6d\x50\x2a\xee\x04\x5a\x6d\x40\xcb\xfe\x04";
          paths[9] = "\x4d\x60\xdb\xe9\x06\x63\xf7\x44\xfd\xfa\x44\xfd\xfc\x44\xf0\x01\x45\xfc\xfe\x44\xf2\x03\x45\xf3\x73\x50\x05\x01\x55\x08\x01\x05\x63\x02\x45\xfe\x06\x45\xfd\x09\x45\xff\x04\x45\xfc\x08\x55\x01\x0b\x45\xff\x73\x50\x05\x12\x55\x07\x18\x45\xfc\xff\x44\xf8\xfe\x44\xf6\x03\x45\xf2\x00\x05\x43\xe4\x66\xe4\xe2\x66\xe8\xdb\x66\xe9\x5a\x00";
          paths[10] = "\x4d\x60\xdb\xb0\x06\x63\xfd\x44\xff\x03\x45\xe7\x04\x45\xe4\x01\x45\xf4\x07\x45\xfa\x0e\x55\x01\x02\x55\x02\x08\x55\x13\x06\x55\x1a\x73\x40\xf9\x01\x45\xf2\xff\x04\x43\xe3\x66\xaf\xdf\x66\xb0\xdb\x66\xb0\x5a\x00";
          paths[11] = "\x4d\x70\x4b\x77\x06\x63\x03\x45\xfc\x02\x45\xfb\x01\x45\xfb\xfb\x44\xfa\xe7\x54\x08\xe0\x54\x0e\x00\x55\x00\xfa\x54\x06\xfb\x54\x06\x6c\x40\xfe\x02\x05\x68\x00\x05\x6c\xfe\x54\x03\x63\x50\x00\x03\x55\x01\x06\x55\x05\x07\x05\x43\x36\x67\x8b\x41\x67\x84\x4b\x67\x77\x5a\x00";
          paths[12] = "\x4d\x70\x3b\x86\x06\x6d\xea\x54\x00\x61\x50\x16\x08\x55\x00\x01\x55\x00\x2c\x55\x00\x61\x50\x16\x08\x55\x00\x01\x55\x00\xd4\x54\x00";
          paths[13] = "\x4d\x70\x28\x90\x06\x63\xfd\x54\x02\xfc\x54\x04\xfb\x54\x07\x73\x40\xff\x08\x55\x02\x0b\x05\x61\x0c\x55\x0c\x00\x55\x00\x00\x55\x0a\x05\x05\x63\x03\x55\x00\x05\x45\xfe\x08\x45\xfc\x73\x50\x04\xfd\x54\x05\xfb\x54\x00\xfb\x44\xfe\xfb\x44\xfc\x02\x45\xfb\x04\x45\xfc\x03\x45\xfa\x03\x05\x61\x05\x55\x05\x00\x55\x00\x01\x45\xfb\xfb\x04\x63\x00\x45\xfd\x02\x45\xfb\x03\x45\xf9";
          paths[14] = "\x4d\x70\x26\x90\x06\x63\x04\x55\x07\x0e\x55\x0b\x16\x55\x0d\x73\x50\x11\xfb\x54\x16\xf4\x04\x63\x06\x45\xf7\x04\x45\xe9\xfc\x44\xe2\x41\x50\x59\x59\x55\x00\x00\x55\x01\x26\x67\x90\x5a\x00";
          paths[15] = "\x4d\x60\xe8\x9e\x06\x63\xe2\x54\x00\x0d\x55\x23\x17\x55\x25\x12\x55\x06\x25\x45\xfe\x2e\x45\xf3\x07\x45\xf7\x07\x45\xed\x00\x45\xeb\x73\x40\xf6\x0d\x45\xe9\x12\x05\x63\xf9\x54\x03\xf6\x54\x04\xea\x44\xfe\xf8\x44\xfc\xf0\x44\xee\xe8\x44\xec";
          paths[16] = "\x4d\x60\xf3\x95\x06\x61\x0b\x55\x0b\x00\x55\x00\x01\x45\xfb\xff\x04\x68\xff\x04\x6c\xfd\x54\x00\x61\x50\x0a\x0a\x55\x00\x00\x55\x01\xfc\x44\xff\x6c\x40\xff\x00\x05\x63\xf9\x54\x00\xf8\x44\xff\xf7\x44\xfe\x73\x40\xfe\xfd\x44\xf9\xfb\x04\x61\x33\x55\x33\x00\x55\x00\x01\x45\xf5\xea\x54\x01\x01\x55\x00\x00\x55\x00\xff\x44\xff\x63\x40\xfe\xfe\x44\xfd\xfb\x44\xfc\xf8\x04\x61\x19\x55\x19\x00\x55\x00\x00\x45\xfd\xf8\x54\x12\x12\x55\x00\x00\x55\x00\xfb\x44\xf8\x6c\x40\xfd\xfb\x44\xff\xfe\x04\x61\x2b\x55\x2b\x00\x55\x00\x00\x45\xfc\xfa\x04\x63\xfe\x44\xfd\xfc\x44\xfa\xfb\x44\xf7\x00\x55\x00\x00\x45\xff\x00\x45\xff\xff\x44\xfe\xfd\x44\xfc\xfb\x44\xf9\xfb\x44\xfa\xf6\x44\xf2\xf8\x44\xed\x61\x50\x04\x04\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xff\xfe\x44\xff\xfb\x54\x01\xfa\x04\x61\x07\x55\x07\x00\x55\x00\x01\x55\x06\xfe\x54\x0e\x0e\x55\x00\x00\x55\x01\x09\x55\x04\x68\x50\x00\x61\x50\x16\x16\x55\x00\x00\x55\x01\x05\x55\x06\x6c\x50\x03\x04\x05\x68\x00\x05\x61\x1b\x55\x1b\x00\x55\x00\x01\x55\x05\x07\x55\x01\x01\x55\x00\x00\x55\x00\x00\x55\x01\x63\x50\x01\x02\x55\x03\x03\x55\x04\x04\x05\x61\x2c\x55\x2c\x00\x55\x00\x01\x55\x07\x09\x05\x63\x00\x55\x00\x00\x55\x00\x00\x55\x00\x61\x50\x04\x04\x55\x00\x00\x55\x01\x01\x55\x02\x0f\x55\x0f\x00\x55\x00\x00\x55\x01\x03\x05\x6c\x00\x55\x00\x61\x50\x13\x13\x55\x00\x00\x55\x01\x05\x55\x07\x63\x50\x01\x04\x55\x01\x06\x55\x04\x09\x55\x00\x01\x55\x00\x01\x55\x01\x02\x55\x01\x05\x55\x03\x0a\x55\x07\x0a\x05\x61\x04\x55\x04\x00\x55\x00\x00\x55\x02\x00\x05\x6c\x00\x55\x00\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\x06\x45\xff\x63\x50\x02\x00\x55\x05\xff\x54\x06\xfd\x04\x73\x00\x45\xfb\xff\x44\xf9\x61\x50\x00\x00\x55\x00\x00\x55\x01\x00\x55\x00\x63\x40\xfd\xfc\x44\xfb\xf6\x44\xf9\xf1\x04\x61\x62\x55\x62\x00\x55\x00\x00\x45\xfc\xf6\x04\x63\x00\x55\x00\x00\x55\x00\x00\x55\x00\x61\x50\x31\x31\x55\x00\x00\x55\x01\xfc\x44\xf6\x2f\x55\x2f\x00\x55\x00\x00\x45\xfb\xf5\x54\x25\x25\x55\x00\x00\x55\x00\xfc\x44\xf4\x63\x40\xfe\xfb\x44\xfc\xf8\x44\xff\xef\x04\x61\x0b\x55\x0b\x00\x55\x00\x01\x55\x07\xfe\x04\x63\x07\x55\x00\x0e\x55\x05\x0e\x55\x0c\x61\x50\x02\x02\x55\x00\x00\x55\x00\x00\x55\x01\x63\x50\x04\x04\x55\x05\x0a\x55\x07\x0f\x05\x61\x46\x55\x46\x00\x55\x00\x00\x55\x04\x0b\x05\x63\x01\x55\x03\x02\x55\x07\x02\x55\x0a\x02\x55\x07\x03\x55\x0d\x06\x55\x14\x61\x50\x13\x13\x55\x00\x00\x55\x00\x03\x55\x09\x63\x50\x02\x08\x55\x09\x0d\x55\x14\x0d\x05\x6c\x02\x55\x00\x63\x50\x05\x01\x55\x0a\x01\x55\x0e\x04\x05\x68\x00\x05\x63\x08\x55\x06\x09\x55\x06\x0a\x55\x0d\x00\x55\x02\x00\x55\x03\x00\x55\x04\x61\x50\x11\x11\x55\x00\x00\x55\x01\xff\x54\x06\x0d\x55\x0d\x00\x55\x00\x01\x45\xfa\x05\x05\x6c\xff\x54\x00\x61\x50\x0f\x0f\x55\x00\x00\x55\x01\xf9\x54\x04\x6c\x40\xff\x01\x05\x63\xfd\x54\x03\xf8\x54\x03\xf3\x54\x04\xfd\x54\x01\xfb\x54\x01\xf9\x54\x02\x48\x70\x06\x61\x50\x69\x69\x55\x00\x00\x55\x00\xf5\x54\x01\x6c\x40\xfb\x01\x05\x68\x00\x05\x5a";
          paths[17] = "\x4d\x60\xda\x11\x06\x63\x06\x55\x00\x0c\x55\x04\x0c\x55\x0a\x61\x50\x03\x03\x55\x00\x00\x55\x00\x01\x55\x02\x63\x50\x03\x04\x55\x05\x09\x55\x06\x0f\x05\x61\x40\x55\x40\x00\x55\x00\x00\x55\x04\x0b\x05\x63\x01\x55\x03\x02\x55\x06\x02\x55\x0a\x61\x50\x72\x72\x55\x00\x00\x55\x00\x06\x55\x14\x12\x55\x12\x00\x55\x00\x00\x55\x03\x09\x05\x63\x02\x55\x08\x0a\x55\x0e\x15\x55\x0f\x6c\x50\x02\x00\x05\x63\x05\x55\x01\x0a\x55\x01\x0d\x55\x04\x68\x50\x00\x63\x50\x08\x06\x55\x08\x06\x55\x09\x0b\x55\x00\x02\x55\x00\x03\x55\x00\x04\x05\x61\x11\x55\x11\x00\x55\x00\x01\x45\xff\x05\x55\x0b\x0b\x55\x00\x00\x55\x01\xfb\x54\x04\x6c\x40\xff\x01\x05\x61\x0d\x55\x0d\x00\x55\x00\x01\x45\xfa\x03\x55\x04\x04\x55\x00\x00\x55\x00\xfe\x54\x01\x63\x40\xfd\x02\x45\xf8\x03\x45\xf4\x04\x45\xfe\x01\x45\xfb\x01\x45\xf9\x02\x05\x48\x06\x07\x61\x6e\x55\x6e\x00\x55\x00\x00\x45\xf4\x01\x05\x6c\xfb\x54\x01\x68\x40\xff\x6c\x40\xfe\x00\x05\x61\x08\x55\x08\x00\x55\x00\x01\x45\xfc\xff\x04\x6c\xfe\x54\x00\x68\x40\xff\x6c\x40\xfe\x00\x05\x61\x07\x55\x07\x00\x55\x00\x01\x45\xfc\xff\x54\x03\x03\x55\x00\x00\x55\x00\xfe\x44\xff\x63\x40\xfa\x00\x45\xf9\xff\x44\xf9\xfe\x04\x61\x0e\x55\x0e\x00\x55\x00\x00\x45\xf9\xfb\x54\x30\x30\x55\x00\x00\x55\x01\xf6\x44\xeb\x03\x55\x03\x00\x55\x00\x00\x45\xff\xfe\x04\x63\xfe\x44\xfe\xfe\x44\xfc\xfd\x44\xf9\x61\x50\x1a\x1a\x55\x00\x00\x55\x00\xfd\x44\xf8\x16\x55\x16\x00\x55\x00\x00\x45\xfb\xf8\x04\x63\xff\x44\xfe\xfe\x44\xfd\xfd\x44\xfb\x6c\x40\xff\xfe\x04\x61\x2f\x55\x2f\x00\x55\x00\x00\x45\xfc\xfa\x04\x63\xfe\x44\xfd\xfc\x44\xfa\xfc\x44\xf7\x61\x50\x05\x05\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xff\xfe\x44\xfd\xfb\x44\xfb\xf9\x44\xfc\xfa\x44\xf7\xf3\x44\xf8\xee\x04\x61\x04\x55\x04\x00\x55\x00\x00\x55\x00\xfe\x04\x63\x00\x45\xfe\xff\x44\xfc\x00\x45\xfb\x61\x50\x05\x05\x55\x00\x00\x55\x01\x04\x45\xfe\x0c\x55\x0c\x00\x55\x00\x01\x55\x08\x03\x05\x6c\x00\x55\x00\x63\x50\x02\x01\x55\x03\x04\x55\x05\x06\x05\x61\x2b\x55\x2b\x00\x55\x00\x00\x55\x03\x04\x05\x6c\x00\x55\x00\x61\x50\x1a\x1a\x55\x00\x00\x55\x01\x04\x55\x07\x02\x55\x02\x00\x55\x00\x00\x55\x01\x01\x05\x6c\x04\x55\x05\x61\x50\x25\x25\x55\x00\x00\x55\x01\x07\x55\x09\x00\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x0c\x0c\x55\x00\x00\x55\x01\x00\x55\x01\x0e\x55\x0e\x00\x55\x00\x00\x55\x01\x03\x05\x6c\x01\x55\x01\x61\x50\x12\x12\x55\x00\x00\x55\x01\x04\x55\x06\x13\x55\x13\x00\x55\x00\x00\x55\x04\x0a\x05\x63\x00\x55\x00\x00\x55\x01\x01\x55\x02\x01\x55\x05\x03\x55\x0b\x08\x55\x0b\x61\x50\x07\x07\x55\x00\x00\x55\x00\x03\x45\xff\x6c\x50\x01\x00\x05\x63\x01\x45\xff\x03\x45\xff\x05\x45\xff\x73\x50\x06\xff\x54\x08\xfd\x54\x00\xfa\x44\xff\xf7\x04\x6c\x00\x55\x00\x63\x40\xfd\xfc\x44\xfb\xf7\x44\xf9\xf1\x04\x61\x67\x55\x67\x00\x55\x00\x00\x45\xfc\xf6\x04\x56\x42\x06\x61\x36\x55\x36\x00\x55\x00\x01\x45\xfc\xf6\x54\x38\x38\x55\x00\x00\x55\x00\xfc\x44\xf5\x30\x55\x30\x00\x55\x00\x00\x45\xfc\xf4\x04\x63\xfe\x44\xfb\xfc\x44\xf9\xff\x44\xf1\x61\x50\x0a\x0a\x55\x00\x00\x55\x01\x06\x45\xfe\x6d\x50\x00\xfc\x04\x61\x0e\x55\x0e\x00\x55\x00\x00\x45\xf7\x03\x05\x63\xfa\x54\x0f\x02\x55\x10\x04\x55\x1f\x04\x55\x07\x05\x55\x0e\x09\x55\x15\x73\x50\x06\x12\x55\x0b\x19\x05\x63\x05\x55\x0a\xfb\x54\x05\xf6\x54\x08\x61\x50\x02\x02\x55\x00\x00\x55\x01\xff\x54\x00\x63\x40\xfd\x00\x45\xfb\xf8\x44\xfa\xf5\x04\x73\xfd\x44\xfb\xfc\x44\xf7\x61\x50\x18\x18\x55\x00\x00\x55\x00\xfb\x44\xf8\x63\x40\xff\xff\x44\xff\xfd\x44\xfe\xfc\x44\xfd\xfa\x44\xf9\xf7\x44\xf5\xf2\x04\x61\x1b\x55\x1b\x00\x55\x00\x00\x45\xfb\xf8\x04\x63\xfd\x44\xfd\xfb\x44\xf8\xf8\x44\xf5\x61\x50\x0f\x0f\x55\x00\x00\x55\x00\xf6\x44\xfc\x63\x40\xfb\x00\x45\xf6\x03\x45\xf8\x0b\x45\xfd\x09\x55\x08\x14\x55\x0d\x1c\x55\x01\x06\x55\x06\x0a\x55\x08\x10\x05\x6c\x04\x55\x08\x61\x50\x0f\x0f\x55\x00\x00\x55\x01\x05\x55\x07\x63\x50\x04\x05\x55\x03\x0c\x55\x08\x10\x05\x41\x33\x55\x33\x00\x55\x00\x00\x65\xd4\x8e\x06\x63\x0a\x55\x03\x03\x55\x07\x11\x55\x07\x61\x50\x0a\x0a\x55\x00\x00\x55\x00\x05\x55\x01\x6c\x50\x03\x00\x05\x61\x0d\x55\x0d\x00\x55\x00\x00\x55\x05\x01\x55\x0c\x0c\x55\x00\x00\x55\x00\x03\x45\xff\x9b\x55\x9b\x00\x55\x00\x01\x55\x10\xff\x04\x68\x02\x05\x63\x06\x45\xfe\x10\x45\xfe\x15\x45\xfa\x61\x50\x12\x12\x55\x00\x00\x55\x00\x08\x45\xfc\x0e\x55\x0e\x00\x55\x00\x00\x55\x07\xfa\x04\x63\x01\x45\xfc\x01\x45\xfa\x01\x45\xf5\xff\x44\xf9\xfd\x44\xf8\xf5\x44\xf2\xfb\x44\xfc\xf5\x44\xfc\xef\x44\xfb\x73\x40\xf0\xfc\x44\xee\xf4\x04\x61\x11\x55\x11\x00\x55\x00\x01\x45\xfe\xf8\x04\x63\xfc\x44\xf7\xfa\x44\xec\xf8\x44\xe2\x73\x40\xfc\xed\x44\xf5\xe5\x04\x63\x00\x45\xf8\xf8\x44\xf3\xf0\x44\xf3\x5a\x00";
          paths[18] = "\x4d\x60\xbb\x8a\x06\x63\x03\x55\x00\x03\x45\xff\x07\x45\xff\x6c\x50\x06\xff\x54\x07\xff\x54\x07\xff\x04";
          paths[19] = "\x4d\x60\xbb\x8a\x06\x63\x03\x55\x00\x03\x45\xff\x07\x45\xff\x6c\x50\x06\xff\x54\x07\xff\x54\x07\xff\x04";
          paths[20] = "\x4d\x60\xc3\x95\x06\x6c\x06\x45\xfe\x06\x45\xfe\x06\x45\xfe\x63\x50\x03\xff\x54\x03\xff\x54\x06\xfe\x04";
          paths[21] = "\x4d\x60\xc3\x95\x06\x6c\x06\x45\xfe\x06\x45\xfe\x06\x45\xfe\x63\x50\x03\xff\x54\x03\xff\x54\x06\xfe\x04";
          paths[22] = "\x4d\x70\x21\x85\x06\x63\x04\x55\x01\x06\x45\xff\x07\x45\xff";
          paths[23] = "\x4d\x70\x21\x85\x06\x63\x04\x55\x01\x06\x45\xff\x07\x45\xff";
          paths[24] = "\x4d\x60\xfa\x79\x06\x63\x02\x55\x06\x09\x55\x03\x06\x45\xfe";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#fff";
          fill[12] = "#ae7d63";
          fill[13] = "#cceb84";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "none";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Lu_drink() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 302, 485, 485];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\xd8\x8c\x06\x63\x1c\x55\x1c\x18\x55\x77\x30\x55\x8a\x36\x55\x2d\x78\x55\x13\x6e\x55\x3d\xfa\x54\x1a\xac\x54\x05\x93\x44\xf8\xdf\x44\xef\xb0\x44\x83\xb7\x44\x5e";
          paths[1] = "\x4d\x50\x61\xce\x07\x63\xf5\x44\xfe\xed\x44\xf7\xf3\x44\xee\x61\x50\x17\x17\x55\x00\x00\x55\x01\xfc\x44\xf2\x63\x40\xff\xfa\x54\x04\xfa\x54\x08\xfa\x04\x73\x00\x45\xf5\x06\x45\xf4\x14\x45\xef\x1d\x45\xfe\x63\x50\x07\x07\x55\x1d\xfe\x54\x1a\x12\x55\x09\x08\x55\x01\x10\x55\x04\x19\x45\xfc\x06\x45\xf4\x09\x45\xee\x0f\x05\x73\xd5\x54\x09\xd6\x44\xf8";
          paths[2] = "\x4d\x50\xce\xd8\x07\x63\x0f\x55\x06\x37\x55\x06\x47\x55\x09\x19\x55\x05\x28\x55\x0c\x3d\x55\x1b\x1e\x55\x16\x28\x55\x33\x2b\x55\x56\x73\x50\x08\x4a\x55\x08\x70\x05\x63\x00\x55\x09\x0c\x55\x13\x15\x55\x19\x73\x50\x20\x08\x55\x26\x04\x05\x63\x18\x45\xee\xf5\x44\xeb\xf6\x44\xb4\x00\x45\xec\xfc\x44\xdf\xfb\x44\xca\x73\x40\xf9\xd7\x44\xf6\xc4\x04\x63\xfc\x44\xe3\xf7\x44\xd3\xe5\x44\xc0\xe9\x44\xe7\xe1\x44\xe6\xc2\x44\xdb\xea\x44\xf8\xe0\x44\xf0\xc5\x44\xe5";
          paths[3] = "\x4d\x60\x90\x87\x08\x63\xe3\x44\xf9\xeb\x44\xb0\x11\x45\xb8\x11\x55\x05\x0b\x55\x1b\x0c\x55\x28\x43\x60\xaf\x7d\x68\xb5\x86\x68\x90\x87\x08\x5a";
          paths[4] = "\x4d\x60\x76\x12\x08\x63\xf2\x44\xfb\xeb\x44\xe5\xdc\x44\xd5\x73\x50\x09\xf4\x54\x17\xeb\x04\x63\x20\x45\xf8\x3b\x55\x2f\x38\x55\x35\x53\x60\x92\x04\x68\x76\x12\x08\x5a\x6d\x40\xdf\xf5\x04\x5a";
          paths[5] = "\x4d\x60\x74\xa6\x08\x63\x00\x45\xec\xf9\x44\xab\xf7\x44\x97\xfc\x44\xe3\x02\x45\xd2\xef\x44\xb2\x61\x50\x4b\x4b\x55\x00\x00\x55\x00\xe5\x44\xe2\x63\x40\xef\xf8\x44\xdf\xeb\x44\xd7\xe1\x44\xf7\xee\x44\xdf\x5a\x44\xd9\x4c\x44\xfc\xdf\x44\xe9\xa4\x44\xe7\x83\x44\xfc\xf0\x44\xff\xee\x44\xf0\xe5\x04\x73\xf8\x44\xf9\xe9\x44\xfb\x6c\x40\xf6\xff\x04\x61\x35\xcc\x35\x00\x55\x00\x00\x45\xe9\xbf\x05\x63\x01\x55\x0a\xfe\x54\x28\xff\x54\x46\xfe\x54\x26\x04\x55\x40\x15\x55\x66\x09\x55\x10\x25\x55\x21\x34\x55\x25\x19\x55\x05\x26\x55\x0f\x3b\x55\x1e\x1f\x55\x16\x27\x55\x36\x28\x55\x58\x02\x55\x2d\x0d\x55\x40\x0d\x55\x67\x00\x55\x09\x07\x55\x24\x0f\x55\x29\x73\x50\x28\x06\x55\x2e\x01\x05\x43\x9a\x86\xe7\x73\x86\xdd\x74\x86\xa6\x5a\x00";
          paths[6] = "\x4d\x60\x43\xa2\x08\x63\xf8\x44\xf6\xfd\x44\xd9\xf7\x44\xc5\xfb\x44\xf1\x19\x45\xf5\x25\x45\xee\x18\x55\x02\x15\x55\x24\x15\x55\x38\x53\x60\x54\x9f\x68\x43\xa2\x08\x5a";
          paths[7] = "\x4d\x60\x32\x2b\x08\x63\xed\x54\x00\xee\x44\xe4\xe0\x44\xdf\x73\x40\xe4\xf0\x44\xec\xed\x04\x63\x19\x45\xf5\x41\x45\xeb\x4d\x45\xef\x73\x50\x21\x1d\x55\x20\x31\x05\x43\x61\x86\x20\x3b\x86\x2d\x32\x86\x2b\x5a\x00\x6d\x30\x45\xd5\x5a\x00";
          paths[8] = "\x4d\x50\xac\xd1\x07\x63\xf4\x44\xfb\xe4\x44\xca\xec\x44\xb9\x73\x50\x16\x0b\x55\x25\x03\x05\x63\x13\x55\x08\x25\x45\xf0\x39\x45\xf8\x04\x45\xf2\x12\x45\xf3\x13\x55\x02\x07\x55\x11\x33\x55\x2d\x0c\x55\x2f\xfd\x54\x08\xf1\x54\x10\xe7\x54\x0b\xfc\x54\x0c\xe5\x54\x09\xdb\x54\x01\x43\x50\xd3\xd2\x57\xb9\xcd\x57\xac\xd1\x07\x5a\x6d\x50\x72\xcf\x04\x5a";
          paths[9] = "\x4d\x50\x9b\x51\x07\x63\xe7\x44\xf9\xf0\x44\xf8\xf7\x44\xd5\x02\x45\xf4\xfb\x44\xda\x07\x45\xde\x73\x50\x0c\x04\x55\x16\x02\x05\x63\x04\x45\xfb\x10\x45\xf9\x17\x45\xfd\x0b\x45\xf6\x16\x55\x01\x1f\x45\xfd\x73\x50\x0f\x31\x55\x14\x41\x45\xf5\xfd\x44\xea\xfc\x44\xe6\x09\x45\xdb\x00\x05\x43\xb2\x75\x45\xad\x75\x4e\x9b\x75\x51\x5a\x00";
          paths[10] = "\x4d\x50\x9b\xb7\x06\x63\xf9\x44\xfe\x08\x45\xbc\x0c\x45\xb5\x01\x45\xdf\x13\x45\xf1\x25\x55\x02\x06\x55\x05\x15\x55\x34\x12\x55\x46\x73\x40\xec\x04\x45\xdb\xff\x04\x43\xb0\x65\xb4\xa5\x65\xb8\x9b\x65\xb7\x5a\x00";
          paths[11] = "\x4d\x60\xc8\x1c\x06\x63\x07\x45\xf4\x05\x45\xf3\x02\x45\xf1\xf3\x44\xf0\xbd\x54\x14\xa9\x54\x25\x00\x55\x00\xf1\x54\x11\xf1\x54\x11\x6c\x40\xfc\x06\x05\x48\x61\x06\x6c\xfa\x54\x07\x63\x40\xff\x09\x55\x03\x10\x55\x0d\x12\x05\x43\x91\x66\x53\xad\x66\x3f\xc8\x66\x1c\x5a\x00";
          paths[12] = "\x4d\x60\x9e\x46\x06\x6d\xc5\x54\x00\x61\x50\x3b\x15\x55\x00\x01\x55\x00\x77\x55\x00\x61\x50\x3b\x15\x55\x00\x01\x55\x00\x89\x54\x00";
          paths[13] = "\x4d\x60\x69\x60\x06\x63\xf9\x54\x05\xf6\x54\x0c\xf4\x54\x14\x73\x40\xfe\x15\x55\x04\x1e\x05\x61\x20\x55\x20\x00\x55\x00\x00\x55\x1a\x0d\x05\x63\x08\x55\x00\x0e\x45\xfb\x15\x45\xf6\x73\x50\x0b\xf9\x54\x0d\xf2\x54\x00\xf3\x44\xfa\xf3\x44\xf7\x06\x45\xf3\x0a\x05\x61\x13\x55\x13\x00\x55\x00\x01\x45\xf0\x07\x55\x0e\x0e\x55\x00\x00\x55\x01\xf3\x44\xf1\x63\x50\x01\xf9\x54\x05\xf2\x54\x07\xec\x04";
          paths[14] = "\x4d\x60\x64\x61\x06\x63\x0b\x55\x13\x25\x55\x1f\x3a\x55\x25\x73\x50\x2f\xf3\x54\x3b\xe0\x04\x63\x10\x45\xe7\x0b\x45\xc3\xf5\x44\xae\x41\x50\xf1\xf1\x55\x00\x00\x55\x01\x64\x66\x61\x5a\x00";
          paths[15] = "\x4d\x50\xbf\x88\x06\x63\xaf\x54\x00\x24\x55\x5d\x3d\x55\x65\x2f\x55\x0f\x65\x45\xfb\x7d\x45\xdd\x13\x45\xe9\x14\x45\xcd\x00\x45\xc6\x73\x40\xe6\x23\x45\xc3\x30\x05\x63\xed\x54\x07\xe5\x54\x0b\xc3\x44\xfc\xeb\x44\xf7\xd6\x44\xd0\xc1\x44\xcb";
          paths[16] = "\x4d\x50\xda\x6f\x06\x61\x20\x55\x20\x00\x55\x00\x01\x45\xf4\xfd\x04\x68\xfd\x04\x6c\xf8\x54\x01\x61\x50\x17\x17\x55\x00\x00\x55\x01\xf4\x44\xfd\x6c\x40\xfe\xff\x04\x63\xed\x54\x00\xeb\x44\xfd\xe8\x44\xfa\x73\x40\xfa\xf8\x44\xed\xf4\x04\x41\x85\x55\x85\x00\x55\x00\x01\x55\x6d\x1a\x06\x61\x05\x55\x05\x00\x55\x00\x00\x45\xff\xfe\x04\x63\xfa\x44\xfb\xf8\x44\xf3\xf6\x44\xeb\x61\x50\x43\x43\x55\x00\x00\x55\x00\xf7\x44\xeb\x2f\x55\x2f\x00\x55\x00\x00\x45\xf2\xeb\x04\x63\xfd\x44\xfb\xfb\x44\xf7\xf8\x44\xf2\x6c\x40\xfd\xfa\x04\x61\x75\x55\x75\x00\x55\x00\x00\x45\xf6\xf1\x04\x63\xfb\x44\xf8\xf5\x44\xf0\xf3\x44\xe7\x00\x45\xff\x00\x45\xff\xff\x44\xfe\x73\x40\xf8\xf4\x44\xf3\xee\x04\x43\x0f\x55\x78\x01\x55\x64\x06\x55\x55\x61\x50\x05\x05\x55\x00\x00\x55\x00\x00\x45\xfd\x63\x40\xff\xfb\x44\xfe\xf4\x54\x02\xef\x04\x61\x12\x55\x12\x00\x55\x00\x01\x55\x0f\xfa\x54\x26\x26\x55\x00\x00\x55\x01\x18\x55\x09\x68\x50\x00\x63\x50\x06\x04\x55\x0a\x0b\x55\x0e\x11\x05\x61\x80\x55\x80\x00\x55\x00\x00\x55\x07\x0b\x05\x68\x00\x05\x41\x3c\x55\x3c\x00\x55\x00\x01\x55\x51\x74\x05\x61\x02\x55\x02\x00\x55\x00\x00\x55\x01\x01\x05\x63\x03\x55\x04\x07\x55\x08\x0b\x55\x0c\x61\x50\x63\x63\x55\x00\x00\x55\x01\x13\x55\x19\x76\x50\x01\x61\x50\x19\x19\x55\x00\x00\x55\x01\x02\x55\x04\x18\x55\x18\x00\x55\x00\x00\x55\x02\x07\x05\x6c\x01\x55\x01\x61\x50\x38\x38\x55\x00\x00\x55\x01\x0d\x55\x13\x2b\x55\x2b\x00\x55\x00\x00\x55\x0b\x19\x05\x63\x00\x55\x01\x01\x55\x03\x01\x55\x05\x03\x55\x0c\x08\x55\x1a\x12\x55\x1a\x61\x50\x0b\x0b\x55\x00\x00\x55\x00\x04\x45\xff\x6c\x50\x01\xff\x04\x61\x1f\x55\x1f\x00\x55\x00\x01\x55\x0f\xfc\x04\x63\x06\x45\xff\x0d\x45\xff\x10\x45\xf9\x73\x50\x00\xf3\x44\xfd\xed\x04\x68\x00\x05\x63\xf8\x44\xf4\xf3\x44\xe6\xee\x44\xd7\x43\x50\xad\xa3\x55\xaa\x9a\x55\xa6\x92\x05\x63\x00\x55\x00\x00\x55\x00\x00\x45\xff\x41\x50\x9a\x9a\x55\x00\x00\x55\x01\x9b\x55\x77\x61\x50\x8e\x8e\x55\x00\x00\x55\x00\xf4\x44\xe3\x41\x50\x79\x79\x55\x00\x00\x55\x00\x84\x55\x39\x63\x40\xfa\xf2\x44\xf5\xea\x44\xfe\xd3\x04\x61\x20\x55\x20\x00\x55\x00\x01\x55\x14\xfa\x04\x63\x12\x55\x00\x25\x55\x0d\x26\x55\x20\x61\x50\x06\x06\x55\x00\x00\x55\x00\x01\x55\x03\x63\x50\x09\x0c\x55\x0e\x1a\x55\x12\x29\x05\x61\xe9\x55\xe9\x00\x55\x00\x00\x55\x0a\x1d\x05\x63\x02\x55\x08\x04\x55\x12\x06\x55\x1a\x61\x60\x34\x34\x56\x00\x00\x55\x00\x10\x55\x35\x41\x50\x34\x34\x55\x00\x00\x55\x00\xf6\x55\xd6\x63\x50\x05\x15\x55\x19\x22\x55\x35\x24\x05\x6c\x05\x55\x01\x63\x50\x0e\x02\x55\x1b\x03\x55\x26\x0b\x05\x68\x01\x05\x63\x15\x55\x0f\x18\x55\x12\x1b\x55\x22\x00\x55\x04\x00\x55\x07\x00\x55\x0b\x61\x50\x2e\x2e\x55\x00\x00\x55\x01\xfe\x54\x10\x23\x55\x23\x00\x55\x00\x01\x45\xf0\x0d\x05\x6c\xff\x54\x01\x61\x50\x28\x28\x55\x00\x00\x55\x01\xec\x54\x09\x6c\x40\xfe\x01\x05\x63\xf8\x54\x07\xea\x54\x09\xdd\x54\x0b\xf9\x54\x01\xf3\x54\x02\xed\x54\x04\x48\x60\x0f\x61\x60\x1f\x1f\x56\x00\x00\x55\x00\xe1\x54\x02\x6c\x40\xf2\x01\x05\x68\xff\x04\x5a";
          paths[17] = "\x4d\x50\x97\x0a\x05\x43\xa6\x55\x0a\xb7\x55\x15\xb7\x55\x25\x61\x50\x0a\x0a\x55\x00\x00\x55\x00\x02\x55\x06\x63\x50\x09\x0b\x55\x0d\x19\x55\x11\x28\x05\x61\xcf\x55\xcf\x00\x55\x00\x00\x55\x0a\x1e\x05\x63\x02\x55\x08\x04\x55\x11\x06\x55\x1a\x04\x55\x12\x08\x55\x24\x10\x55\x35\x61\x50\x36\x36\x55\x00\x00\x55\x00\x07\x55\x18\x63\x50\x06\x17\x55\x1b\x26\x55\x39\x28\x05\x6c\x05\x55\x01\x63\x50\x0e\x02\x55\x1a\x04\x55\x24\x0a\x05\x68\x00\x05\x63\x15\x55\x0f\x17\x55\x10\x19\x55\x1e\x00\x55\x04\x00\x55\x07\x00\x55\x0a\x61\x50\x26\x26\x55\x00\x00\x55\x01\xff\x54\x0e\x1d\x55\x1d\x00\x55\x00\x01\x45\xf3\x0a\x05\x6c\xfd\x54\x02\x61\x50\x22\x22\x55\x00\x00\x55\x01\xef\x54\x09\x0c\x55\x0c\x00\x55\x00\x00\x45\xfb\x02\x05\x63\xf9\x54\x06\xec\x54\x08\xe0\x54\x0b\x61\x50\x8b\x8b\x55\x00\x00\x55\x00\xed\x54\x04\x48\x60\x0f\x61\x60\x21\x21\x56\x00\x00\x55\x00\xe1\x54\x02\x6c\x40\xf2\x01\x05\x68\xff\x04\x6c\xf9\x54\x01\x61\x50\x16\x16\x55\x00\x00\x55\x01\xf6\x44\xfd\x6c\x40\xfc\xff\x04\x68\xfe\x04\x6c\xf9\x54\x01\x61\x50\x12\x12\x55\x00\x00\x55\x01\xf7\x44\xfe\x0b\x55\x0b\x00\x55\x00\x00\x45\xfb\xff\x04\x63\xef\x54\x00\xee\x44\xfe\xec\x44\xfc\x61\x50\x29\x29\x55\x00\x00\x55\x00\xec\x44\xf2\x41\x50\x84\x84\x55\x00\x00\x55\x01\x71\x65\x19\x61\x50\x08\x08\x55\x00\x00\x55\x00\xfd\x44\xfb\x63\x40\xfc\xfb\x44\xfa\xf4\x44\xf7\xed\x04\x61\x4e\x55\x4e\x00\x55\x00\x00\x45\xf7\xea\x54\x37\x37\x55\x00\x00\x55\x00\xf2\x44\xea\x6c\x40\xf9\xf2\x04\x4c\x44\x55\xc3\x61\x50\xb5\xb5\x55\x00\x00\x55\x00\xf6\x44\xf0\x63\x40\xfb\xf8\x44\xf5\xf1\x44\xf4\xe9\x04\x61\x17\x55\x17\x00\x55\x00\x00\x45\xff\xfd\x04\x63\xfd\x44\xfa\xf8\x44\xf4\xf3\x44\xed\xf5\x44\xf0\xe7\x44\xdd\xeb\x44\xd1\x61\x50\x09\x09\x55\x00\x00\x55\x00\x00\x45\xfa\x43\x50\x0a\x4c\x55\x09\x47\x55\x0c\x44\x05\x61\x0d\x55\x0d\x00\x55\x00\x01\x55\x0b\xfc\x54\x21\x21\x55\x00\x00\x55\x01\x15\x55\x08\x6c\x50\x01\x01\x05\x63\x05\x55\x03\x08\x55\x09\x0d\x55\x10\x4c\x50\x40\x64\x05\x6c\x01\x55\x01\x41\x50\x35\x35\x55\x00\x00\x55\x01\x4d\x55\x77\x6c\x50\x02\x02\x05\x63\x03\x55\x04\x07\x55\x08\x0b\x55\x0c\x61\x50\x6a\x6a\x55\x00\x00\x55\x01\x13\x55\x18\x63\x50\x00\x00\x55\x00\x01\x55\x00\x01\x05\x61\x0c\x55\x0c\x00\x55\x00\x01\x55\x01\x03\x55\x25\x25\x55\x00\x00\x55\x00\x03\x55\x08\x6c\x50\x02\x02\x05\x61\x36\x55\x36\x00\x55\x00\x01\x55\x0c\x11\x55\x2f\x2f\x55\x00\x00\x55\x00\x0b\x55\x1a\x23\x55\x23\x00\x55\x00\x01\x55\x01\x04\x05\x63\x04\x55\x0d\x08\x55\x1e\x17\x55\x1e\x61\x50\x0d\x0d\x55\x00\x00\x55\x00\x07\x45\xfe\x03\x55\x03\x00\x55\x00\x00\x55\x02\xff\x04\x63\x03\x45\xfe\x08\x45\xfe\x0d\x45\xfd\x73\x50\x10\xfe\x54\x14\xf7\x54\x01\xef\x44\xfd\xe9\x04\x63\x00\x55\x00\x00\x45\xff\xff\x44\xff\xf8\x44\xf5\xf3\x44\xe7\xee\x44\xd8\xfd\x44\xf8\xfa\x44\xee\xf6\x44\xe6\x6c\x40\xff\xff\x04\x61\x92\x55\x92\x00\x55\x00\x01\x45\xf6\xe6\x54\xb2\xb2\x55\x00\x00\x55\x00\xf4\x44\xe3\x6c\x55\x6c\x00\x55\x00\x00\x45\xf5\xdf\x04\x63\xfa\x44\xf3\xf7\x44\xec\xfe\x44\xd8\x41\x50\x18\x18\x55\x00\x00\x55\x01\x97\x55\x0a\x6d\x50\x00\xf6\x04\x61\x24\x55\x24\x00\x55\x00\x00\x45\xe8\x08\x05\x63\xef\x54\x2a\x06\x55\x2c\x0c\x55\x53\x0b\x55\x11\x0d\x55\x26\x17\x55\x38\x73\x50\x0f\x2f\x55\x1d\x43\x05\x63\x0e\x55\x1a\xf3\x54\x0d\xe5\x54\x17\x61\x50\x04\x04\x55\x00\x00\x55\x01\xfe\x54\x01\x63\x40\xf8\x00\x45\xf3\xea\x44\xf1\xe3\x04\x61\x28\x55\x28\x00\x55\x00\x01\x45\xf6\xe9\x54\x40\x40\x55\x00\x00\x55\x00\xf2\x44\xeb\x63\x40\xfe\xfc\x44\xfe\xf8\x44\xfc\xf4\x44\xf8\xf0\x44\xec\xe7\x44\xe1\xda\x04\x61\x49\x55\x49\x00\x55\x00\x00\x45\xf2\xeb\x04\x63\xf9\x44\xf7\xf3\x44\xea\xea\x44\xe3\x61\x50\x2c\x2c\x55\x00\x00\x55\x00\xe4\x44\xf5\x63\x40\xf1\x00\x45\xe6\x09\x45\xeb\x1d\x45\xf8\x18\x55\x16\x36\x55\x23\x4b\x55\x03\x10\x55\x10\x1c\x55\x17\x2a\x55\x04\x07\x55\x07\x0e\x55\x0b\x15\x05\x61\x29\x55\x29\x00\x55\x00\x01\x55\x0d\x14\x05\x63\x0a\x55\x0d\x08\x55\x1f\x14\x55\x2b\x61\x50\x8e\x8e\x55\x00\x00\x55\x00\x20\x55\x3e\x63\x50\x1c\x09\x55\x08\x12\x55\x2d\x13\x05\x61\x1c\x55\x1c\x00\x55\x00\x00\x55\x0e\x04\x55\x27\x27\x55\x00\x00\x55\x00\x09\x45\xff\x24\x55\x24\x00\x55\x00\x00\x55\x0e\x04\x55\x21\x21\x55\x00\x00\x55\x00\x09\x45\xff\x63\x50\x12\xff\x54\x1c\xfd\x54\x2c\xfd\x04\x68\x05\x05\x63\x10\x45\xfb\x2b\x45\xfb\x38\x45\xef\x61\x50\x2e\x2e\x55\x00\x00\x55\x00\x16\x45\xf5\x27\x55\x27\x00\x55\x00\x00\x55\x12\xf1\x04\x63\x04\x45\xf5\x02\x45\xef\x03\x45\xe3\xfd\x44\xed\xf8\x44\xea\xe2\x44\xda\x43\x60\x4c\xf9\x65\x3b\xf7\x65\x2c\xf5\x05\x53\x00\x56\xeb\xfb\x55\xd4\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\xfa\x44\xe9\x63\x40\xf5\xe7\x44\xf1\xca\x44\xe9\xb0\x04\x53\xd2\x55\x39\xc1\x55\x24\x43\x50\xc1\x0f\x55\xab\x00\x55\x97\x00\x05\x5a";
          paths[18] = "\x4d\x50\x45\x50\x06\x63\x09\x45\xff\x08\x45\xff\x11\x45\xfe\x6c\x50\x12\xff\x54\x12\xff\x54\x11\xfe\x04";
          paths[19] = "\x4d\x50\x45\x50\x06\x63\x09\x45\xff\x08\x45\xff\x11\x45\xfe\x6c\x50\x12\xff\x54\x12\xff\x54\x11\xfe\x04";
          paths[20] = "\x4d\x50\x58\x6e\x06\x6c\x0f\x45\xfa\x0f\x45\xfa\x63\x50\x07\xfd\x54\x08\xfd\x54\x0f\xfb\x04\x6c\x0f\x45\xfa";
          paths[21] = "\x4d\x50\x58\x6e\x06\x6c\x0f\x45\xfa\x0f\x45\xfa\x63\x50\x07\xfd\x54\x08\xfd\x54\x0f\xfb\x04\x6c\x0f\x45\xfa";
          paths[22] = "\x4d\x60\x58\x42\x06\x63\x0b\x55\x01\x0f\x45\xfe\x13\x45\xfd";
          paths[23] = "\x4d\x60\x58\x42\x06\x63\x0b\x55\x01\x0f\x45\xfe\x13\x45\xfd";
          paths[24] = "\x4d\x50\xee\x24\x06\x63\x06\x55\x10\x17\x55\x07\x10\x45\xfc";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#fff";
          fill[12] = "#ae7d63";
          fill[13] = "#cceb84";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "none";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Lu_drink_R() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 302, 492, 492];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\xd8\x8c\x06\x63\x1c\x55\x1c\x18\x55\x77\x30\x55\x8a\x36\x55\x2d\x78\x55\x13\x6e\x55\x3d\xfa\x54\x1a\xac\x54\x05\x93\x44\xf8\xdf\x44\xef\xb0\x44\x83\xb7\x44\x5e";
          paths[1] = "\x4d\x50\x61\xce\x07\x63\xf5\x44\xfe\xed\x44\xf7\xf3\x44\xee\x61\x50\x17\x17\x55\x00\x00\x55\x01\xfc\x44\xf2\x63\x40\xff\xfa\x54\x04\xfa\x54\x08\xfa\x04\x73\x00\x45\xf5\x06\x45\xf4\x14\x45\xef\x1d\x45\xfe\x63\x50\x07\x07\x55\x1d\xfe\x54\x1a\x12\x55\x09\x08\x55\x01\x10\x55\x04\x19\x45\xfc\x06\x45\xf4\x09\x45\xee\x0f\x05\x73\xd5\x54\x09\xd6\x44\xf8";
          paths[2] = "\x4d\x50\xce\xd8\x07\x63\x0f\x55\x06\x37\x55\x06\x47\x55\x09\x19\x55\x05\x28\x55\x0c\x3d\x55\x1b\x1e\x55\x16\x28\x55\x33\x2b\x55\x56\x73\x50\x08\x4a\x55\x08\x70\x05\x63\x00\x55\x09\x0c\x55\x13\x15\x55\x19\x73\x50\x20\x08\x55\x26\x04\x05\x63\x18\x45\xee\xf5\x44\xeb\xf6\x44\xb4\x00\x45\xec\xfc\x44\xdf\xfb\x44\xca\x73\x40\xf9\xd7\x44\xf6\xc4\x04\x63\xfc\x44\xe3\xf7\x44\xd3\xe5\x44\xc0\xe9\x44\xe7\xe1\x44\xe6\xc2\x44\xdb\xea\x44\xf8\xe0\x44\xf0\xc5\x44\xe5";
          paths[3] = "\x4d\x60\x90\x87\x08\x63\xe3\x44\xf9\xeb\x44\xb0\x11\x45\xb8\x11\x55\x05\x0b\x55\x1b\x0c\x55\x28\x43\x60\xaf\x7d\x68\xb5\x86\x68\x90\x87\x08\x5a";
          paths[4] = "\x4d\x60\x76\x12\x08\x63\xf2\x44\xfb\xeb\x44\xe5\xdc\x44\xd5\x73\x50\x09\xf4\x54\x17\xeb\x04\x63\x20\x45\xf8\x3b\x55\x2f\x38\x55\x35\x53\x60\x92\x04\x68\x76\x12\x08\x5a\x6d\x40\xdf\xf5\x04\x5a";
          paths[5] = "\x4d\x60\x74\xa6\x08\x63\x00\x45\xec\xf9\x44\xab\xf7\x44\x97\xfc\x44\xe3\x02\x45\xd2\xef\x44\xb2\x61\x50\x4b\x4b\x55\x00\x00\x55\x00\xe5\x44\xe2\x63\x40\xef\xf8\x44\xdf\xeb\x44\xd7\xe1\x44\xf7\xee\x44\xdf\x5a\x44\xd9\x4c\x44\xfc\xdf\x44\xe9\xa4\x44\xe7\x83\x44\xfc\xf0\x44\xff\xee\x44\xf0\xe5\x04\x73\xf8\x44\xf9\xe9\x44\xfb\x6c\x40\xf6\xff\x04\x61\x35\xcc\x35\x00\x55\x00\x00\x45\xe9\xbf\x05\x63\x01\x55\x0a\xfe\x54\x28\xff\x54\x46\xfe\x54\x26\x04\x55\x40\x15\x55\x66\x09\x55\x10\x25\x55\x21\x34\x55\x25\x19\x55\x05\x26\x55\x0f\x3b\x55\x1e\x1f\x55\x16\x27\x55\x36\x28\x55\x58\x02\x55\x2d\x0d\x55\x40\x0d\x55\x67\x00\x55\x09\x07\x55\x24\x0f\x55\x29\x73\x50\x28\x06\x55\x2e\x01\x05\x43\x9a\x86\xe7\x73\x86\xdd\x74\x86\xa6\x5a\x00";
          paths[6] = "\x4d\x60\x43\xa2\x08\x63\xf8\x44\xf6\xfd\x44\xd9\xf7\x44\xc5\xfb\x44\xf1\x19\x45\xf5\x25\x45\xee\x18\x55\x02\x15\x55\x24\x15\x55\x38\x53\x60\x54\x9f\x68\x43\xa2\x08\x5a";
          paths[7] = "\x4d\x60\x32\x2b\x08\x63\xed\x54\x00\xee\x44\xe4\xe0\x44\xdf\x73\x40\xe4\xf0\x44\xec\xed\x04\x63\x19\x45\xf5\x41\x45\xeb\x4d\x45\xef\x73\x50\x21\x1d\x55\x20\x31\x05\x43\x61\x86\x20\x3b\x86\x2d\x32\x86\x2b\x5a\x00\x6d\x30\x45\xd5\x5a\x00";
          paths[8] = "\x4d\x50\xac\xd1\x07\x63\xf4\x44\xfb\xe4\x44\xca\xec\x44\xb9\x73\x50\x16\x0b\x55\x25\x03\x05\x63\x13\x55\x08\x25\x45\xf0\x39\x45\xf8\x04\x45\xf2\x12\x45\xf3\x13\x55\x02\x07\x55\x11\x33\x55\x2d\x0c\x55\x2f\xfd\x54\x08\xf1\x54\x10\xe7\x54\x0b\xfc\x54\x0c\xe5\x54\x09\xdb\x54\x01\x43\x50\xd3\xd2\x57\xb9\xcd\x57\xac\xd1\x07\x5a\x6d\x50\x72\xcf\x04\x5a";
          paths[9] = "\x4d\x50\x9b\x51\x07\x63\xe7\x44\xf9\xf0\x44\xf8\xf7\x44\xd5\x02\x45\xf4\xfb\x44\xda\x07\x45\xde\x73\x50\x0c\x04\x55\x16\x02\x05\x63\x04\x45\xfb\x10\x45\xf9\x17\x45\xfd\x0b\x45\xf6\x16\x55\x01\x1f\x45\xfd\x73\x50\x0f\x31\x55\x14\x41\x45\xf5\xfd\x44\xea\xfc\x44\xe6\x09\x45\xdb\x00\x05\x43\xb2\x75\x45\xad\x75\x4e\x9b\x75\x51\x5a\x00";
          paths[10] = "\x4d\x50\x9b\xb7\x06\x63\xf9\x44\xfe\x08\x45\xbc\x0c\x45\xb5\x01\x45\xdf\x13\x45\xf1\x25\x55\x02\x06\x55\x05\x15\x55\x34\x12\x55\x46\x73\x40\xec\x04\x45\xdb\xff\x04\x43\xb0\x65\xb4\xa5\x65\xb8\x9b\x65\xb7\x5a\x00";
          paths[11] = "\x4d\x60\x6e\x5e\x06\x63\xf9\x54\x05\xf5\x54\x0c\xf4\x54\x14\x73\x40\xfe\x15\x55\x04\x1e\x05\x61\x1f\x55\x1f\x00\x55\x00\x00\x55\x1a\x0d\x05\x63\x08\x55\x00\x1d\x45\xf7\x26\x45\xe7\x02\x45\xfc\xfc\x44\xf4\xf6\x44\xf5\x73\x40\xf7\x06\x45\xf3\x0a\x45\xf6\x08\x45\xf0\x07\x05\x61\x0e\x55\x0e\x00\x55\x00\x01\x45\xf3\xf1\x04\x63\x00\x45\xf9\x04\x45\xf2\x07\x45\xec";
          paths[12] = "\x4d\x60\xc3\x2e\x06\x63\x0a\x45\xf5\x10\x45\xe4\x0d\x45\xe1\xf3\x44\xf0\xc6\x54\x08\xb2\x54\x19\x61\x50\x85\x85\x55\x00\x00\x55\x00\xe3\x54\x1f\x63\x40\xfb\x08\x45\xf8\x17\x55\x07\x18\x05\x43\x94\x66\x5b\xab\x66\x4a\xc3\x66\x2e\x5a\x00";
          paths[13] = "\x4d\x60\x64\x5b\x06\x63\xfb\x44\xf8\x0a\x45\xe6\x2b\x45\xd7\x27\x45\xef\x44\x45\xec\x47\x45\xf6\x04\x55\x13\xe2\x54\x26\xd5\x54\x2b\x53\x60\x6e\x6b\x66\x64\x5b\x06\x5a";
          paths[14] = "\x4d\x60\x68\x5f\x06\x63\x0b\x55\x13\x25\x55\x1f\x3a\x55\x25\x73\x50\x2f\xf3\x54\x3b\xe0\x04\x63\x10\x45\xe7\x0a\x45\xc3\xf5\x44\xae\x43\x60\xc8\x2c\x66\x91\x50\x66\x68\x5f\x06\x5a";
          paths[15] = "\x4d\x50\xbf\x88\x06\x63\xaf\x54\x00\x24\x55\x5d\x3d\x55\x65\x2f\x55\x0f\x65\x45\xfb\x7d\x45\xdd\x13\x45\xe9\x14\x45\xcd\x00\x45\xc6\x73\x40\xe6\x23\x45\xc3\x30\x05\x63\xed\x54\x07\xe5\x54\x0b\xc3\x44\xfc\xeb\x44\xf7\xd6\x44\xd0\xc1\x44\xcb";
          paths[16] = "\x4d\x50\xda\x6f\x06\x61\x20\x55\x20\x00\x55\x00\x01\x45\xf4\xfd\x04\x68\xfd\x04\x6c\xf8\x54\x01\x61\x50\x17\x17\x55\x00\x00\x55\x01\xf4\x44\xfd\x6c\x40\xfe\xff\x04\x63\xed\x54\x00\xeb\x44\xfd\xe8\x44\xfa\x73\x40\xfa\xf8\x44\xed\xf4\x04\x41\x85\x55\x85\x00\x55\x00\x01\x55\x6d\x1a\x06\x61\x05\x55\x05\x00\x55\x00\x00\x45\xff\xfe\x04\x63\xfa\x44\xfb\xf8\x44\xf3\xf6\x44\xeb\x61\x50\x43\x43\x55\x00\x00\x55\x00\xf7\x44\xeb\x2f\x55\x2f\x00\x55\x00\x00\x45\xf2\xeb\x04\x63\xfd\x44\xfb\xfb\x44\xf7\xf8\x44\xf2\x6c\x40\xfd\xfa\x04\x61\x75\x55\x75\x00\x55\x00\x00\x45\xf6\xf1\x04\x63\xfb\x44\xf8\xf5\x44\xf0\xf3\x44\xe7\x00\x45\xff\x00\x45\xff\xff\x44\xfe\x73\x40\xf8\xf4\x44\xf3\xee\x04\x43\x0f\x55\x78\x01\x55\x64\x06\x55\x55\x61\x50\x05\x05\x55\x00\x00\x55\x00\x00\x45\xfd\x63\x40\xff\xfb\x44\xfe\xf4\x54\x02\xef\x04\x61\x12\x55\x12\x00\x55\x00\x01\x55\x0f\xfa\x54\x26\x26\x55\x00\x00\x55\x01\x18\x55\x09\x68\x50\x00\x63\x50\x06\x04\x55\x0a\x0b\x55\x0e\x11\x05\x61\x80\x55\x80\x00\x55\x00\x00\x55\x07\x0b\x05\x68\x00\x05\x41\x3c\x55\x3c\x00\x55\x00\x01\x55\x51\x74\x05\x61\x02\x55\x02\x00\x55\x00\x00\x55\x01\x01\x05\x63\x03\x55\x04\x07\x55\x08\x0b\x55\x0c\x61\x50\x63\x63\x55\x00\x00\x55\x01\x13\x55\x19\x76\x50\x01\x61\x50\x19\x19\x55\x00\x00\x55\x01\x02\x55\x04\x18\x55\x18\x00\x55\x00\x00\x55\x02\x07\x05\x6c\x01\x55\x01\x61\x50\x38\x38\x55\x00\x00\x55\x01\x0d\x55\x13\x2b\x55\x2b\x00\x55\x00\x00\x55\x0b\x19\x05\x63\x00\x55\x01\x01\x55\x03\x01\x55\x05\x03\x55\x0c\x08\x55\x1a\x12\x55\x1a\x61\x50\x0b\x0b\x55\x00\x00\x55\x00\x04\x45\xff\x6c\x50\x01\xff\x04\x61\x1f\x55\x1f\x00\x55\x00\x01\x55\x0f\xfc\x04\x63\x06\x45\xff\x0d\x45\xff\x10\x45\xf9\x73\x50\x00\xf3\x44\xfd\xed\x04\x68\x00\x05\x63\xf8\x44\xf4\xf3\x44\xe6\xee\x44\xd7\x43\x50\xad\xa3\x55\xaa\x9a\x55\xa6\x92\x05\x63\x00\x55\x00\x00\x55\x00\x00\x45\xff\x41\x50\x9a\x9a\x55\x00\x00\x55\x01\x9b\x55\x77\x61\x50\x8e\x8e\x55\x00\x00\x55\x00\xf4\x44\xe3\x41\x50\x79\x79\x55\x00\x00\x55\x00\x84\x55\x39\x63\x40\xfa\xf2\x44\xf5\xea\x44\xfe\xd3\x04\x61\x20\x55\x20\x00\x55\x00\x01\x55\x14\xfa\x04\x63\x12\x55\x00\x25\x55\x0d\x26\x55\x20\x61\x50\x06\x06\x55\x00\x00\x55\x00\x01\x55\x03\x63\x50\x09\x0c\x55\x0e\x1a\x55\x12\x29\x05\x61\xe9\x55\xe9\x00\x55\x00\x00\x55\x0a\x1d\x05\x63\x02\x55\x08\x04\x55\x12\x06\x55\x1a\x61\x60\x34\x34\x56\x00\x00\x55\x00\x10\x55\x35\x41\x50\x34\x34\x55\x00\x00\x55\x00\xf6\x55\xd6\x63\x50\x05\x15\x55\x19\x22\x55\x35\x24\x05\x6c\x05\x55\x01\x63\x50\x0e\x02\x55\x1b\x03\x55\x26\x0b\x05\x68\x01\x05\x63\x15\x55\x0f\x18\x55\x12\x1b\x55\x22\x00\x55\x04\x00\x55\x07\x00\x55\x0b\x61\x50\x2e\x2e\x55\x00\x00\x55\x01\xfe\x54\x10\x23\x55\x23\x00\x55\x00\x01\x45\xf0\x0d\x05\x6c\xff\x54\x01\x61\x50\x28\x28\x55\x00\x00\x55\x01\xec\x54\x09\x6c\x40\xfe\x01\x05\x63\xf8\x54\x07\xea\x54\x09\xdd\x54\x0b\xf9\x54\x01\xf3\x54\x02\xed\x54\x04\x48\x60\x0f\x61\x60\x1f\x1f\x56\x00\x00\x55\x00\xe1\x54\x02\x6c\x40\xf2\x01\x05\x68\xff\x04\x5a";
          paths[17] = "\x4d\x50\x97\x0a\x05\x43\xa6\x55\x0a\xb7\x55\x15\xb7\x55\x25\x61\x50\x0a\x0a\x55\x00\x00\x55\x00\x02\x55\x06\x63\x50\x09\x0b\x55\x0d\x19\x55\x11\x28\x05\x61\xcf\x55\xcf\x00\x55\x00\x00\x55\x0a\x1e\x05\x63\x02\x55\x08\x04\x55\x11\x06\x55\x1a\x04\x55\x12\x08\x55\x24\x10\x55\x35\x61\x50\x36\x36\x55\x00\x00\x55\x00\x07\x55\x18\x63\x50\x06\x17\x55\x1b\x26\x55\x39\x28\x05\x6c\x05\x55\x01\x63\x50\x0e\x02\x55\x1a\x04\x55\x24\x0a\x05\x68\x00\x05\x63\x15\x55\x0f\x17\x55\x10\x19\x55\x1e\x00\x55\x04\x00\x55\x07\x00\x55\x0a\x61\x50\x26\x26\x55\x00\x00\x55\x01\xff\x54\x0e\x1d\x55\x1d\x00\x55\x00\x01\x45\xf3\x0a\x05\x6c\xfd\x54\x02\x61\x50\x22\x22\x55\x00\x00\x55\x01\xef\x54\x09\x0c\x55\x0c\x00\x55\x00\x00\x45\xfb\x02\x05\x63\xf9\x54\x06\xec\x54\x08\xe0\x54\x0b\x61\x50\x8b\x8b\x55\x00\x00\x55\x00\xed\x54\x04\x48\x60\x0f\x61\x60\x21\x21\x56\x00\x00\x55\x00\xe1\x54\x02\x6c\x40\xf2\x01\x05\x68\xff\x04\x6c\xf9\x54\x01\x61\x50\x16\x16\x55\x00\x00\x55\x01\xf6\x44\xfd\x6c\x40\xfc\xff\x04\x68\xfe\x04\x6c\xf9\x54\x01\x61\x50\x12\x12\x55\x00\x00\x55\x01\xf7\x44\xfe\x0b\x55\x0b\x00\x55\x00\x00\x45\xfb\xff\x04\x63\xef\x54\x00\xee\x44\xfe\xec\x44\xfc\x61\x50\x29\x29\x55\x00\x00\x55\x00\xec\x44\xf2\x41\x50\x84\x84\x55\x00\x00\x55\x01\x71\x65\x19\x61\x50\x08\x08\x55\x00\x00\x55\x00\xfd\x44\xfb\x63\x40\xfc\xfb\x44\xfa\xf4\x44\xf7\xed\x04\x61\x4e\x55\x4e\x00\x55\x00\x00\x45\xf7\xea\x54\x37\x37\x55\x00\x00\x55\x00\xf2\x44\xea\x6c\x40\xf9\xf2\x04\x4c\x44\x55\xc3\x61\x50\xb5\xb5\x55\x00\x00\x55\x00\xf6\x44\xf0\x63\x40\xfb\xf8\x44\xf5\xf1\x44\xf4\xe9\x04\x61\x17\x55\x17\x00\x55\x00\x00\x45\xff\xfd\x04\x63\xfd\x44\xfa\xf8\x44\xf4\xf3\x44\xed\xf5\x44\xf0\xe7\x44\xdd\xeb\x44\xd1\x61\x50\x09\x09\x55\x00\x00\x55\x00\x00\x45\xfa\x43\x50\x0a\x4c\x55\x09\x47\x55\x0c\x44\x05\x61\x0d\x55\x0d\x00\x55\x00\x01\x55\x0b\xfc\x54\x21\x21\x55\x00\x00\x55\x01\x15\x55\x08\x6c\x50\x01\x01\x05\x63\x05\x55\x03\x08\x55\x09\x0d\x55\x10\x4c\x50\x40\x64\x05\x6c\x01\x55\x01\x41\x50\x35\x35\x55\x00\x00\x55\x01\x4d\x55\x77\x6c\x50\x02\x02\x05\x63\x03\x55\x04\x07\x55\x08\x0b\x55\x0c\x61\x50\x6a\x6a\x55\x00\x00\x55\x01\x13\x55\x18\x63\x50\x00\x00\x55\x00\x01\x55\x00\x01\x05\x61\x0c\x55\x0c\x00\x55\x00\x01\x55\x01\x03\x55\x25\x25\x55\x00\x00\x55\x00\x03\x55\x08\x6c\x50\x02\x02\x05\x61\x36\x55\x36\x00\x55\x00\x01\x55\x0c\x11\x55\x2f\x2f\x55\x00\x00\x55\x00\x0b\x55\x1a\x23\x55\x23\x00\x55\x00\x01\x55\x01\x04\x05\x63\x04\x55\x0d\x08\x55\x1e\x17\x55\x1e\x61\x50\x0d\x0d\x55\x00\x00\x55\x00\x07\x45\xfe\x03\x55\x03\x00\x55\x00\x00\x55\x02\xff\x04\x63\x03\x45\xfe\x08\x45\xfe\x0d\x45\xfd\x73\x50\x10\xfe\x54\x14\xf7\x54\x01\xef\x44\xfd\xe9\x04\x63\x00\x55\x00\x00\x45\xff\xff\x44\xff\xf8\x44\xf5\xf3\x44\xe7\xee\x44\xd8\xfd\x44\xf8\xfa\x44\xee\xf6\x44\xe6\x6c\x40\xff\xff\x04\x61\x92\x55\x92\x00\x55\x00\x01\x45\xf6\xe6\x54\xb2\xb2\x55\x00\x00\x55\x00\xf4\x44\xe3\x6c\x55\x6c\x00\x55\x00\x00\x45\xf5\xdf\x04\x63\xfa\x44\xf3\xf7\x44\xec\xfe\x44\xd8\x41\x50\x18\x18\x55\x00\x00\x55\x01\x97\x55\x0a\x6d\x50\x00\xf6\x04\x61\x24\x55\x24\x00\x55\x00\x00\x45\xe8\x08\x05\x63\xef\x54\x2a\x06\x55\x2c\x0c\x55\x53\x0b\x55\x11\x0d\x55\x26\x17\x55\x38\x73\x50\x0f\x2f\x55\x1d\x43\x05\x63\x0e\x55\x1a\xf3\x54\x0d\xe5\x54\x17\x61\x50\x04\x04\x55\x00\x00\x55\x01\xfe\x54\x01\x63\x40\xf8\x00\x45\xf3\xea\x44\xf1\xe3\x04\x61\x28\x55\x28\x00\x55\x00\x01\x45\xf6\xe9\x54\x40\x40\x55\x00\x00\x55\x00\xf2\x44\xeb\x63\x40\xfe\xfc\x44\xfe\xf8\x44\xfc\xf4\x44\xf8\xf0\x44\xec\xe7\x44\xe1\xda\x04\x61\x49\x55\x49\x00\x55\x00\x00\x45\xf2\xeb\x04\x63\xf9\x44\xf7\xf3\x44\xea\xea\x44\xe3\x61\x50\x2c\x2c\x55\x00\x00\x55\x00\xe4\x44\xf5\x63\x40\xf1\x00\x45\xe6\x09\x45\xeb\x1d\x45\xf8\x18\x55\x16\x36\x55\x23\x4b\x55\x03\x10\x55\x10\x1c\x55\x17\x2a\x55\x04\x07\x55\x07\x0e\x55\x0b\x15\x05\x61\x29\x55\x29\x00\x55\x00\x01\x55\x0d\x14\x05\x63\x0a\x55\x0d\x08\x55\x1f\x14\x55\x2b\x61\x50\x8e\x8e\x55\x00\x00\x55\x00\x20\x55\x3e\x63\x50\x1c\x09\x55\x08\x12\x55\x2d\x13\x05\x61\x1c\x55\x1c\x00\x55\x00\x00\x55\x0e\x04\x55\x27\x27\x55\x00\x00\x55\x00\x09\x45\xff\x24\x55\x24\x00\x55\x00\x00\x55\x0e\x04\x55\x21\x21\x55\x00\x00\x55\x00\x09\x45\xff\x63\x50\x12\xff\x54\x1c\xfd\x54\x2c\xfd\x04\x68\x05\x05\x63\x10\x45\xfb\x2b\x45\xfb\x38\x45\xef\x61\x50\x2e\x2e\x55\x00\x00\x55\x00\x16\x45\xf5\x27\x55\x27\x00\x55\x00\x00\x55\x12\xf1\x04\x63\x04\x45\xf5\x02\x45\xef\x03\x45\xe3\xfd\x44\xed\xf8\x44\xea\xe2\x44\xda\x43\x60\x4c\xf9\x65\x3b\xf7\x65\x2c\xf5\x05\x53\x00\x56\xeb\xfb\x55\xd4\x61\x50\x2d\x2d\x55\x00\x00\x55\x01\xfa\x44\xe9\x63\x40\xf5\xe7\x44\xf1\xca\x44\xe9\xb0\x04\x53\xd2\x55\x39\xc1\x55\x24\x43\x50\xc1\x0f\x55\xab\x00\x55\x97\x00\x05\x5a";
          paths[18] = "\x4d\x50\x45\x50\x06\x63\x09\x45\xff\x08\x45\xff\x11\x45\xfe\x6c\x50\x12\xff\x54\x12\xff\x54\x11\xfe\x04";
          paths[19] = "\x4d\x50\x45\x50\x06\x63\x09\x45\xff\x08\x45\xff\x11\x45\xfe\x6c\x50\x12\xff\x54\x12\xff\x54\x11\xfe\x04";
          paths[20] = "\x4d\x50\x58\x6e\x06\x6c\x0f\x45\xfa\x0f\x45\xfa\x63\x50\x07\xfd\x54\x08\xfd\x54\x0f\xfb\x04\x6c\x0f\x45\xfa";
          paths[21] = "\x4d\x50\x58\x6e\x06\x6c\x0f\x45\xfa\x0f\x45\xfa\x63\x50\x07\xfd\x54\x08\xfd\x54\x0f\xfb\x04\x6c\x0f\x45\xfa";
          paths[22] = "\x4d\x60\x58\x42\x06\x63\x0b\x55\x01\x0f\x45\xfe\x13\x45\xfd";
          paths[23] = "\x4d\x60\x58\x42\x06\x63\x0b\x55\x01\x0f\x45\xfe\x13\x45\xfd";
          paths[24] = "\x4d\x50\xee\x24\x06\x63\x06\x55\x10\x17\x55\x07\x10\x45\xfc";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#cceb84";
          fill[12] = "#fff";
          fill[13] = "#ae7d63";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "none";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Lu_drink_board() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [25, 814, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x60\xf2\xa0\x06\x63\x0a\x55\x0b\x09\x55\x2c\x12\x55\x33\x14\x55\x11\x2d\x55\x07\x29\x55\x17\xfe\x54\x0a\xe1\x54\x02\xd8\x44\xfd\xf4\x44\xfa\xe2\x44\xd2\xe5\x44\xc4";
          paths[1] = "\x4d\x60\xc6\x17\x07\x63\xfc\x44\xff\xf9\x44\xfd\xfb\x44\xf9\x61\x50\x08\x08\x55\x00\x00\x55\x01\xfe\x44\xfb\x63\x50\x00\xfe\x54\x01\xfe\x54\x03\xfe\x04\x73\x00\x45\xfc\x02\x45\xfc\x07\x45\xfa\x0b\x45\xff\x63\x50\x03\x03\x55\x0b\xff\x54\x0a\x07\x55\x04\x03\x55\x01\x06\x55\x01\x0a\x45\xfe\x02\x45\xfc\x03\x45\xfa\x05\x05\x73\xf0\x54\x04\xf0\x44\xfd";
          paths[2] = "\x4d\x60\xee\x1b\x07\x63\x06\x55\x02\x14\x55\x02\x1a\x55\x03\x09\x55\x02\x0f\x55\x04\x17\x55\x0a\x0b\x55\x08\x0f\x55\x13\x10\x55\x20\x73\x50\x03\x1b\x55\x03\x29\x05\x63\x00\x55\x03\x04\x55\x07\x08\x55\x09\x73\x50\x0c\x03\x55\x0e\x02\x05\x63\x09\x45\xf9\xfc\x44\xf8\xfc\x44\xe4\x00\x45\xf8\xfe\x44\xf4\xfe\x44\xec\x73\x40\xfd\xf1\x44\xfc\xea\x04\x63\xfe\x44\xf5\xfd\x44\xef\xf6\x44\xe8\xf7\x44\xf6\xf4\x44\xf6\xe9\x44\xf2\xf8\x44\xfd\xf4\x44\xfa\xea\x44\xf6";
          paths[3] = "\x4d\x70\x36\x5c\x07\x63\xf5\x44\xfd\xf8\x44\xe2\x06\x45\xe5\x06\x55\x02\x04\x55\x0a\x04\x55\x0f\x43\x70\x41\x58\x77\x44\x5c\x77\x36\x5c\x07\x5a";
          paths[4] = "\x4d\x70\x2c\x31\x07\x63\xfb\x44\xfe\xf8\x44\xf6\xf3\x44\xf0\x73\x50\x03\xfc\x54\x09\xf8\x04\x63\x0c\x45\xfd\x16\x55\x11\x15\x55\x14\x53\x70\x37\x2b\x77\x2c\x31\x07\x5a\x6d\x40\xf4\xfc\x04\x68\x00\x05\x5a";
          paths[5] = "\x4d\x70\x2c\x68\x07\x63\x00\x45\xf8\xfd\x44\xe0\xfc\x44\xd9\xfe\x44\xf5\x01\x45\xef\xfa\x44\xe3\xff\x44\xfe\xfd\x44\xfa\xf6\x44\xf5\xfa\x44\xfd\xf4\x44\xf8\xf1\x44\xf5\xfc\x44\xf9\xf4\x44\xc2\xf2\x44\xbd\xfe\x44\xf4\xf7\x44\xde\xf7\x44\xd2\xfe\x44\xfa\x00\x45\xf9\xfa\x44\xf6\x73\x40\xfd\xfd\x44\xf8\xfe\x04\x6c\xfc\x54\x00\x61\x70\xae\xae\x57\x00\x00\x55\x00\xf7\x54\x47\x63\x50\x00\x04\x45\xff\x0f\x45\xff\x1a\x45\xff\x0e\x55\x02\x18\x55\x08\x26\x55\x04\x06\x55\x0e\x0c\x55\x13\x0e\x55\x09\x02\x55\x0e\x06\x55\x16\x0b\x55\x0b\x08\x55\x0e\x14\x55\x0f\x21\x55\x01\x11\x55\x05\x18\x55\x05\x26\x55\x00\x03\x55\x03\x0d\x55\x06\x0f\x05\x73\x0f\x55\x02\x11\x55\x00\x43\x70\x3a\x80\x77\x2b\x7c\x77\x2c\x68\x07\x5a";
          paths[6] = "\x4d\x70\x1a\x66\x07\x63\xfd\x44\xfc\xff\x44\xf1\xfc\x44\xea\xfe\x44\xfb\x09\x45\xfc\x0e\x45\xf9\x09\x55\x01\x08\x55\x0d\x08\x55\x15\x53\x70\x20\x65\x77\x1a\x66\x07\x5a";
          paths[7] = "\x4d\x70\x13\x3a\x07\x63\xf9\x54\x00\xf9\x44\xf6\xf4\x44\xf4\x73\x40\xf5\xfa\x44\xf9\xf9\x04\x63\x09\x45\xfc\x18\x45\xf8\x1c\x45\xfa\x06\x55\x03\x0c\x55\x0b\x0c\x55\x12\x43\x70\x25\x36\x77\x17\x3b\x77\x13\x3a\x07\x5a\x6d\x50\x12\xf0\x04\x5a";
          paths[8] = "\x4d\x60\xe2\x19\x07\x63\xfc\x44\xfe\xf6\x44\xec\xf9\x44\xe6\x73\x50\x08\x04\x55\x0e\x01\x05\x63\x07\x55\x03\x0e\x45\xfa\x15\x45\xfd\x01\x45\xfb\x07\x45\xfb\x07\x55\x01\x03\x55\x06\x13\x55\x11\x04\x55\x11\xff\x54\x03\xfb\x54\x06\xf7\x54\x04\xfe\x54\x04\xf6\x54\x03\xf2\x54\x00\x43\x60\xf0\x19\x67\xe6\x17\x67\xe2\x19\x07\x5a\x6d\x50\x2a\xee\x04\x5a\x6d\x40\xcb\xfe\x04";
          paths[9] = "\x4d\x60\xdb\xe9\x06\x63\xf7\x44\xfd\xfa\x44\xfd\xfc\x44\xf0\x01\x45\xfc\xfe\x44\xf2\x03\x45\xf3\x73\x50\x05\x01\x55\x08\x01\x05\x63\x02\x45\xfe\x06\x45\xfd\x09\x45\xff\x04\x45\xfc\x08\x55\x01\x0b\x45\xff\x73\x50\x05\x12\x55\x07\x18\x45\xfc\xff\x44\xf8\xfe\x44\xf6\x03\x45\xf2\x00\x05\x43\xe4\x66\xe4\xe2\x66\xe8\xdb\x66\xe9\x5a\x00";
          paths[10] = "\x4d\x60\xdb\xb0\x06\x63\xfd\x44\xff\x03\x45\xe7\x04\x45\xe4\x01\x45\xf4\x07\x45\xfa\x0e\x55\x01\x02\x55\x02\x08\x55\x13\x06\x55\x1a\x73\x40\xf9\x01\x45\xf2\xff\x04\x43\xe3\x66\xaf\xdf\x66\xb0\xdb\x66\xb0\x5a\x00";
          paths[11] = "\x4d\x70\x29\x8f\x06\x63\xfd\x54\x02\xfc\x54\x04\xfc\x54\x07\x73\x40\xff\x08\x55\x01\x0b\x05\x61\x0c\x55\x0c\x00\x55\x00\x00\x55\x0a\x05\x05\x63\x03\x55\x00\x0b\x45\xfd\x0e\x45\xf7\x01\x45\xff\xff\x44\xfc\xfc\x44\xfc\x73\x40\xfd\x02\x45\xfb\x04\x05\x61\x07\x55\x07\x00\x55\x00\x01\x45\xfa\x03\x55\x05\x05\x55\x00\x00\x55\x01\xfb\x44\xfb\x63\x50\x00\xfd\x54\x02\xfb\x54\x03\xf9\x04";
          paths[12] = "\x4d\x70\x49\x7d\x06\x63\x04\x45\xfc\x06\x45\xf5\x05\x45\xf5\xfb\x44\xfa\xeb\x54\x03\xe3\x54\x09\x61\x50\x31\x31\x55\x00\x00\x55\x00\xf5\x54\x0c\x63\x40\xfe\x03\x45\xfd\x09\x55\x03\x09\x05\x43\x38\x67\x8e\x40\x67\x88\x49\x67\x7d\x5a\x00";
          paths[13] = "\x4d\x70\x26\x8e\x06\x63\xfe\x44\xfd\x04\x45\xf6\x10\x45\xf1\x0e\x45\xfa\x19\x45\xf9\x1a\x45\xfc\x02\x55\x07\xf5\x54\x0e\xf0\x54\x10\x53\x70\x29\x94\x76\x26\x8e\x06\x5a";
          paths[14] = "\x4d\x70\x27\x8f\x06\x63\x04\x55\x07\x0e\x55\x0b\x16\x55\x0d\x73\x50\x11\xfb\x54\x16\xf4\x04\x63\x06\x45\xf7\x04\x45\xe9\xfc\x44\xe2\x43\x70\x4b\x7c\x76\x36\x8a\x76\x27\x8f\x06\x5a";
          paths[15] = "\x4d\x60\xe8\x9e\x06\x63\xe2\x54\x00\x0d\x55\x23\x17\x55\x25\x12\x55\x06\x25\x45\xfe\x2e\x45\xf3\x07\x45\xf7\x07\x45\xed\x00\x45\xeb\x73\x40\xf6\x0d\x45\xe9\x12\x05\x63\xf9\x54\x03\xf6\x54\x04\xea\x44\xfe\xf8\x44\xfc\xf0\x44\xee\xe8\x44\xec";
          paths[16] = "\x4d\x60\xf3\x95\x06\x61\x0b\x55\x0b\x00\x55\x00\x01\x45\xfb\xff\x04\x68\xff\x04\x6c\xfd\x54\x00\x61\x50\x0a\x0a\x55\x00\x00\x55\x01\xfc\x44\xff\x6c\x40\xff\x00\x05\x63\xf9\x54\x00\xf8\x44\xff\xf7\x44\xfe\x73\x40\xfe\xfd\x44\xf9\xfb\x04\x61\x33\x55\x33\x00\x55\x00\x01\x45\xf5\xea\x54\x01\x01\x55\x00\x00\x55\x00\xff\x44\xff\x63\x40\xfe\xfe\x44\xfd\xfb\x44\xfc\xf8\x04\x61\x19\x55\x19\x00\x55\x00\x00\x45\xfd\xf8\x54\x12\x12\x55\x00\x00\x55\x00\xfb\x44\xf8\x6c\x40\xfd\xfb\x44\xff\xfe\x04\x61\x2b\x55\x2b\x00\x55\x00\x00\x45\xfc\xfa\x04\x63\xfe\x44\xfd\xfc\x44\xfa\xfb\x44\xf7\x00\x55\x00\x00\x45\xff\x00\x45\xff\xff\x44\xfe\xfd\x44\xfc\xfb\x44\xf9\xfb\x44\xfa\xf6\x44\xf2\xf8\x44\xed\x61\x50\x04\x04\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xff\xfe\x44\xff\xfb\x54\x01\xfa\x04\x61\x07\x55\x07\x00\x55\x00\x01\x55\x06\xfe\x54\x0e\x0e\x55\x00\x00\x55\x01\x09\x55\x04\x68\x50\x00\x61\x50\x16\x16\x55\x00\x00\x55\x01\x05\x55\x06\x6c\x50\x03\x04\x05\x68\x00\x05\x61\x1b\x55\x1b\x00\x55\x00\x01\x55\x05\x07\x55\x01\x01\x55\x00\x00\x55\x00\x00\x55\x01\x63\x50\x01\x02\x55\x03\x03\x55\x04\x04\x05\x61\x2c\x55\x2c\x00\x55\x00\x01\x55\x07\x09\x05\x63\x00\x55\x00\x00\x55\x00\x00\x55\x00\x61\x50\x04\x04\x55\x00\x00\x55\x01\x01\x55\x02\x0f\x55\x0f\x00\x55\x00\x00\x55\x01\x03\x05\x6c\x00\x55\x00\x61\x50\x13\x13\x55\x00\x00\x55\x01\x05\x55\x07\x63\x50\x01\x04\x55\x01\x06\x55\x04\x09\x55\x00\x01\x55\x00\x01\x55\x01\x02\x55\x01\x05\x55\x03\x0a\x55\x07\x0a\x05\x61\x04\x55\x04\x00\x55\x00\x00\x55\x02\x00\x05\x6c\x00\x55\x00\x61\x50\x0b\x0b\x55\x00\x00\x55\x01\x06\x45\xff\x63\x50\x02\x00\x55\x05\xff\x54\x06\xfd\x04\x73\x00\x45\xfb\xff\x44\xf9\x61\x50\x00\x00\x55\x00\x00\x55\x01\x00\x55\x00\x63\x40\xfd\xfc\x44\xfb\xf6\x44\xf9\xf1\x04\x61\x62\x55\x62\x00\x55\x00\x00\x45\xfc\xf6\x04\x63\x00\x55\x00\x00\x55\x00\x00\x55\x00\x61\x50\x31\x31\x55\x00\x00\x55\x01\xfc\x44\xf6\x2f\x55\x2f\x00\x55\x00\x00\x45\xfb\xf5\x54\x25\x25\x55\x00\x00\x55\x00\xfc\x44\xf4\x63\x40\xfe\xfb\x44\xfc\xf8\x44\xff\xef\x04\x61\x0b\x55\x0b\x00\x55\x00\x01\x55\x07\xfe\x04\x63\x07\x55\x00\x0e\x55\x05\x0e\x55\x0c\x61\x50\x02\x02\x55\x00\x00\x55\x00\x00\x55\x01\x63\x50\x04\x04\x55\x05\x0a\x55\x07\x0f\x05\x61\x46\x55\x46\x00\x55\x00\x00\x55\x04\x0b\x05\x63\x01\x55\x03\x02\x55\x07\x02\x55\x0a\x02\x55\x07\x03\x55\x0d\x06\x55\x14\x61\x50\x13\x13\x55\x00\x00\x55\x00\x03\x55\x09\x63\x50\x02\x08\x55\x09\x0d\x55\x14\x0d\x05\x6c\x02\x55\x00\x63\x50\x05\x01\x55\x0a\x01\x55\x0e\x04\x05\x68\x00\x05\x63\x08\x55\x06\x09\x55\x06\x0a\x55\x0d\x00\x55\x02\x00\x55\x03\x00\x55\x04\x61\x50\x11\x11\x55\x00\x00\x55\x01\xff\x54\x06\x0d\x55\x0d\x00\x55\x00\x01\x45\xfa\x05\x05\x6c\xff\x54\x00\x61\x50\x0f\x0f\x55\x00\x00\x55\x01\xf9\x54\x04\x6c\x40\xff\x01\x05\x63\xfd\x54\x03\xf8\x54\x03\xf3\x54\x04\xfd\x54\x01\xfb\x54\x01\xf9\x54\x02\x48\x70\x06\x61\x50\x69\x69\x55\x00\x00\x55\x00\xf5\x54\x01\x6c\x40\xfb\x01\x05\x68\x00\x05\x5a";
          paths[17] = "\x4d\x60\xda\x11\x06\x63\x06\x55\x00\x0c\x55\x04\x0c\x55\x0a\x61\x50\x03\x03\x55\x00\x00\x55\x00\x01\x55\x02\x63\x50\x03\x04\x55\x05\x09\x55\x06\x0f\x05\x61\x40\x55\x40\x00\x55\x00\x00\x55\x04\x0b\x05\x63\x01\x55\x03\x02\x55\x06\x02\x55\x0a\x61\x50\x72\x72\x55\x00\x00\x55\x00\x06\x55\x14\x12\x55\x12\x00\x55\x00\x00\x55\x03\x09\x05\x63\x02\x55\x08\x0a\x55\x0e\x15\x55\x0f\x6c\x50\x02\x00\x05\x63\x05\x55\x01\x0a\x55\x01\x0d\x55\x04\x68\x50\x00\x63\x50\x08\x06\x55\x08\x06\x55\x09\x0b\x55\x00\x02\x55\x00\x03\x55\x00\x04\x05\x61\x11\x55\x11\x00\x55\x00\x01\x45\xff\x05\x55\x0b\x0b\x55\x00\x00\x55\x01\xfb\x54\x04\x6c\x40\xff\x01\x05\x61\x0d\x55\x0d\x00\x55\x00\x01\x45\xfa\x03\x55\x04\x04\x55\x00\x00\x55\x00\xfe\x54\x01\x63\x40\xfd\x02\x45\xf8\x03\x45\xf4\x04\x45\xfe\x01\x45\xfb\x01\x45\xf9\x02\x05\x48\x06\x07\x61\x6e\x55\x6e\x00\x55\x00\x00\x45\xf4\x01\x05\x6c\xfb\x54\x01\x68\x40\xff\x6c\x40\xfe\x00\x05\x61\x08\x55\x08\x00\x55\x00\x01\x45\xfc\xff\x04\x6c\xfe\x54\x00\x68\x40\xff\x6c\x40\xfe\x00\x05\x61\x07\x55\x07\x00\x55\x00\x01\x45\xfc\xff\x54\x03\x03\x55\x00\x00\x55\x00\xfe\x44\xff\x63\x40\xfa\x00\x45\xf9\xff\x44\xf9\xfe\x04\x61\x0e\x55\x0e\x00\x55\x00\x00\x45\xf9\xfb\x54\x30\x30\x55\x00\x00\x55\x01\xf6\x44\xeb\x03\x55\x03\x00\x55\x00\x00\x45\xff\xfe\x04\x63\xfe\x44\xfe\xfe\x44\xfc\xfd\x44\xf9\x61\x50\x1a\x1a\x55\x00\x00\x55\x00\xfd\x44\xf8\x16\x55\x16\x00\x55\x00\x00\x45\xfb\xf8\x04\x63\xff\x44\xfe\xfe\x44\xfd\xfd\x44\xfb\x6c\x40\xff\xfe\x04\x61\x2f\x55\x2f\x00\x55\x00\x00\x45\xfc\xfa\x04\x63\xfe\x44\xfd\xfc\x44\xfa\xfc\x44\xf7\x61\x50\x05\x05\x55\x00\x00\x55\x00\x00\x45\xff\x63\x40\xff\xfe\x44\xfd\xfb\x44\xfb\xf9\x44\xfc\xfa\x44\xf7\xf3\x44\xf8\xee\x04\x61\x04\x55\x04\x00\x55\x00\x00\x55\x00\xfe\x04\x63\x00\x45\xfe\xff\x44\xfc\x00\x45\xfb\x61\x50\x05\x05\x55\x00\x00\x55\x01\x04\x45\xfe\x0c\x55\x0c\x00\x55\x00\x01\x55\x08\x03\x05\x6c\x00\x55\x00\x63\x50\x02\x01\x55\x03\x04\x55\x05\x06\x05\x61\x2b\x55\x2b\x00\x55\x00\x00\x55\x03\x04\x05\x6c\x00\x55\x00\x61\x50\x1a\x1a\x55\x00\x00\x55\x01\x04\x55\x07\x02\x55\x02\x00\x55\x00\x00\x55\x01\x01\x05\x6c\x04\x55\x05\x61\x50\x25\x25\x55\x00\x00\x55\x01\x07\x55\x09\x00\x55\x00\x00\x55\x00\x00\x55\x00\x00\x55\x0c\x0c\x55\x00\x00\x55\x01\x00\x55\x01\x0e\x55\x0e\x00\x55\x00\x00\x55\x01\x03\x05\x6c\x01\x55\x01\x61\x50\x12\x12\x55\x00\x00\x55\x01\x04\x55\x06\x13\x55\x13\x00\x55\x00\x00\x55\x04\x0a\x05\x63\x00\x55\x00\x00\x55\x01\x01\x55\x02\x01\x55\x05\x03\x55\x0b\x08\x55\x0b\x61\x50\x07\x07\x55\x00\x00\x55\x00\x03\x45\xff\x6c\x50\x01\x00\x05\x63\x01\x45\xff\x03\x45\xff\x05\x45\xff\x73\x50\x06\xff\x54\x08\xfd\x54\x00\xfa\x44\xff\xf7\x04\x6c\x00\x55\x00\x63\x40\xfd\xfc\x44\xfb\xf7\x44\xf9\xf1\x04\x61\x67\x55\x67\x00\x55\x00\x00\x45\xfc\xf6\x04\x56\x42\x06\x61\x36\x55\x36\x00\x55\x00\x01\x45\xfc\xf6\x54\x38\x38\x55\x00\x00\x55\x00\xfc\x44\xf5\x30\x55\x30\x00\x55\x00\x00\x45\xfc\xf4\x04\x63\xfe\x44\xfb\xfc\x44\xf9\xff\x44\xf1\x61\x50\x0a\x0a\x55\x00\x00\x55\x01\x06\x45\xfe\x6d\x50\x00\xfc\x04\x61\x0e\x55\x0e\x00\x55\x00\x00\x45\xf7\x03\x05\x63\xfa\x54\x0f\x02\x55\x10\x04\x55\x1f\x04\x55\x07\x05\x55\x0e\x09\x55\x15\x73\x50\x06\x12\x55\x0b\x19\x05\x63\x05\x55\x0a\xfb\x54\x05\xf6\x54\x08\x61\x50\x02\x02\x55\x00\x00\x55\x01\xff\x54\x00\x63\x40\xfd\x00\x45\xfb\xf8\x44\xfa\xf5\x04\x73\xfd\x44\xfb\xfc\x44\xf7\x61\x50\x18\x18\x55\x00\x00\x55\x00\xfb\x44\xf8\x63\x40\xff\xff\x44\xff\xfd\x44\xfe\xfc\x44\xfd\xfa\x44\xf9\xf7\x44\xf5\xf2\x04\x61\x1b\x55\x1b\x00\x55\x00\x00\x45\xfb\xf8\x04\x63\xfd\x44\xfd\xfb\x44\xf8\xf8\x44\xf5\x61\x50\x0f\x0f\x55\x00\x00\x55\x00\xf6\x44\xfc\x63\x40\xfb\x00\x45\xf6\x03\x45\xf8\x0b\x45\xfd\x09\x55\x08\x14\x55\x0d\x1c\x55\x01\x06\x55\x06\x0a\x55\x08\x10\x05\x6c\x04\x55\x08\x61\x50\x0f\x0f\x55\x00\x00\x55\x01\x05\x55\x07\x63\x50\x04\x05\x55\x03\x0c\x55\x08\x10\x05\x41\x33\x55\x33\x00\x55\x00\x00\x65\xd4\x8e\x06\x63\x0a\x55\x03\x03\x55\x07\x11\x55\x07\x61\x50\x0a\x0a\x55\x00\x00\x55\x00\x05\x55\x01\x6c\x50\x03\x00\x05\x61\x0d\x55\x0d\x00\x55\x00\x00\x55\x05\x01\x55\x0c\x0c\x55\x00\x00\x55\x00\x03\x45\xff\x9b\x55\x9b\x00\x55\x00\x01\x55\x10\xff\x04\x68\x02\x05\x63\x06\x45\xfe\x10\x45\xfe\x15\x45\xfa\x61\x50\x12\x12\x55\x00\x00\x55\x00\x08\x45\xfc\x0e\x55\x0e\x00\x55\x00\x00\x55\x07\xfa\x04\x63\x01\x45\xfc\x01\x45\xfa\x01\x45\xf5\xff\x44\xf9\xfd\x44\xf8\xf5\x44\xf2\xfb\x44\xfc\xf5\x44\xfc\xef\x44\xfb\x73\x40\xf0\xfc\x44\xee\xf4\x04\x61\x11\x55\x11\x00\x55\x00\x01\x45\xfe\xf8\x04\x63\xfc\x44\xf7\xfa\x44\xec\xf8\x44\xe2\x73\x40\xfc\xed\x44\xf5\xe5\x04\x63\x00\x45\xf8\xf8\x44\xf3\xf0\x44\xf3\x5a\x00";
          paths[18] = "\x4d\x60\xbb\x8a\x06\x63\x03\x55\x00\x03\x45\xff\x07\x45\xff\x6c\x50\x06\xff\x54\x07\xff\x54\x07\xff\x04";
          paths[19] = "\x4d\x60\xbb\x8a\x06\x63\x03\x55\x00\x03\x45\xff\x07\x45\xff\x6c\x50\x06\xff\x54\x07\xff\x54\x07\xff\x04";
          paths[20] = "\x4d\x60\xc3\x95\x06\x6c\x06\x45\xfe\x06\x45\xfe\x06\x45\xfe\x63\x50\x03\xff\x54\x03\xff\x54\x06\xfe\x04";
          paths[21] = "\x4d\x60\xc3\x95\x06\x6c\x06\x45\xfe\x06\x45\xfe\x06\x45\xfe\x63\x50\x03\xff\x54\x03\xff\x54\x06\xfe\x04";
          paths[22] = "\x4d\x70\x21\x85\x06\x63\x04\x55\x01\x06\x45\xff\x07\x45\xff";
          paths[23] = "\x4d\x70\x21\x85\x06\x63\x04\x55\x01\x06\x45\xff\x07\x45\xff";
          paths[24] = "\x4d\x60\xfa\x79\x06\x63\x02\x55\x06\x09\x55\x03\x06\x45\xfe";
          fill[0] = "#fafaf5";
          fill[1] = "#fafaf5";
          fill[2] = "#b25cbd";
          fill[3] = "";
          fill[4] = "";
          fill[5] = "#b25cbd";
          fill[6] = "";
          fill[7] = "";
          fill[8] = "";
          fill[9] = "";
          fill[10] = "";
          fill[11] = "#cceb84";
          fill[12] = "#fff";
          fill[13] = "#ae7d63";
          fill[14] = "#cceb84";
          fill[15] = "#fafaf5";
          fill[16] = "#fafaf5";
          fill[17] = "";
          fill[18] = "#fafaf5";
          fill[19] = "none";
          fill[20] = "#fafaf5";
          fill[21] = "none";
          fill[22] = "#fafaf5";
          fill[23] = "none";
          fill[24] = "none";
          stroke[0] = 3;
          stroke[1] = 3;
          stroke[2] = 3;
          stroke[3] = 3;
          stroke[4] = 3;
          stroke[5] = 3;
          stroke[6] = 3;
          stroke[7] = 3;
          stroke[8] = 3;
          stroke[9] = 3;
          stroke[10] = 3;
          stroke[11] = 3;
          stroke[12] = 3;
          stroke[13] = 3;
          stroke[14] = 3;
          stroke[15] = 3;
          stroke[16] = 0;
          stroke[17] = 0;
          stroke[18] = 0;
          stroke[19] = 3;
          stroke[20] = 0;
          stroke[21] = 3;
          stroke[22] = 0;
          stroke[23] = 3;
          stroke[24] = 3;
      }
      function parts_Roof5() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [7, 169, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x80\x2a\x01\x05\x53\x12\x75\x52\x01\x75\x65\x73\x50\xb6\x9a\x55\xe0\x83\x05\x63\x5a\x45\xd0\x0e\x46\x3e\xbc\x36\xaf\x73\x60\x56\xd4\x63\x69\xcd\x03\x43\x05\x59\x65\x58\x48\xf3\x2a\x58\x01\x5a\x00";
          paths[1] = "\x4d\x50\xba\xea\x06\x63\xd0\x54\x22\x6f\x54\x69\x4e\x54\x81\x0f\x55\x1e\x30\x55\x1e\x5b\x55\x30\x6c\x50\x46\x22\x05\x63\x23\x55\x1e\x16\x55\x13\x40\x55\x26\x1e\x45\xe8\x76\x45\xaf\xb0\x45\x7d\x43\x60\x57\x30\x67\x04\x0f\x57\xba\xea\x06\x5a";
          paths[2] = "\x4d\x60\x3a\x8a\x56\xf4\xc0\x56\xd4\xd7\x06\x63\x45\x55\x2e\x8f\x55\x52\xd5\x55\x7c\x6c\x50\x61\xab\x04\x43\xc8\x66\xd1\x86\x66\xa5\x3a\x66\x8a\x5a\x00";
          paths[3] = "\x4d\x60\xb1\x31\x66\x4b\x7e\x06\x63\x47\x55\x23\x8b\x55\x47\xcc\x55\x75\x21\x45\xe3\x3d\x45\xcb\x4f\x45\xbc\x43\x70\x2d\x80\x66\xf0\x5a\x66\xb1\x31\x06\x5a";
          paths[4] = "\x4d\x70\x31\xe6\x05\x63\xfd\x44\xfe\xf6\x44\xfb\xf0\x44\xf6\x4c\x60\xc1\x24\x06\x43\xff\x66\x4c\x3a\x67\x76\x74\x67\xa3\x6c\x50\x06\xfc\x04\x63\x08\x45\xfc\x32\x45\xd9\x68\x45\xac\x43\x70\xa7\x2b\x76\x6f\x09\x76\x31\xe6\x05\x5a";
          paths[5] = "\x4d\x70\x93\x87\x75\x34\xce\x05\x63\x3b\x55\x34\x80\x55\x4b\xc2\x55\x6c\x6c\x50\x58\xb5\x04\x43\x12\x58\xc7\xd5\x57\x9f\x93\x57\x87\x5a\x00";
          paths[6] = "\x4d\x80\xab\x3e\x05\x63\xec\x44\xef\x92\x44\xcf\x86\x44\xd1\x53\x80\x09\x37\x85\x09\x37\x05\x61\xff\x77\xff\x00\x55\x00\x00\x45\x9f\x40\x75\x7a\x7a\x57\x00\x00\x55\x01\x5b\x55\x35\x63\x50\x20\x15\x55\x41\x2f\x55\x5b\x37\x55\x3b\xb7\x54\x6b\xa5\x54\x7f\x8c\x04\x53\xbf\x58\x4e\xab\x58\x3e\x5a\x00";
          fill[0] = "#504650";
          fill[1] = "#ff81ba";
          fill[2] = "#f7931e";
          fill[3] = "#9d6cd8";
          fill[4] = "#de6b96";
          fill[5] = "#9cd41e";
          fill[6] = "#29d3c3";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
          stroke[4] = 0;
          stroke[5] = 0;
          stroke[6] = 0;
      }
      function parts_TX_sweet() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [6, 126, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x50\xb6\x92\x05\x63\xf5\x54\x2e\x48\x55\x18\x5a\x45\xff\x43\x60\x4d\x8e\x44\xa9\x54\x55\x51\xfb\x05\x63\x69\x56\xb8\x55\x64\x50\xd8\x54\x4f";
          paths[1] = "\x4d\x60\x22\x1c\x06\x43\xca\x65\xa6\x55\x76\x3e\x67\x66\x3d\x63\x40\xe4\x05\x56\x9c\x3c\x55\x40\xd7\x04";
          paths[2] = "\x4d\x60\xec\x72\x06\x63\x1d\x45\xf5\x71\x45\xf9\x6c\x45\xca\x8e\x44\x69\x45\x64\x0b\xf5\x54\x70";
          paths[3] = "\x4d\x70\x91\x67\x06\x63\x73\x55\x29\xc9\x45\x7c\x1c\x45\xc6\xb0\x54\x53\xf1\x54\xf2\x5c\x55\x82";
          paths[4] = "\x4d\x80\x43\x0d\x06\x63\x26\x45\xf9\x59\x45\xed\x7a\x45\xea";
          paths[5] = "\x4d\x80\x96\xb3\x05\x63\x9a\x54\x89\xd6\x64\xb6\x5d\x55\x9e";
          fill[0] = "none";
          fill[1] = "none";
          fill[2] = "none";
          fill[3] = "none";
          fill[4] = "none";
          fill[5] = "none";
          stroke[0] = 5;
          stroke[1] = 5;
          stroke[2] = 5;
          stroke[3] = 5;
          stroke[4] = 5;
          stroke[5] = 5;
      }
      function parts_Window1() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [4, 39, 971, 971];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x80\x46\xee\x08\x6c\xeb\x44\xfb\x63\x40\x7d\xf3\x34\xe7\xee\x34\x64\xeb\x04\x43\xd2\x85\xd1\x69\x85\xcb\x44\x85\xb4\x4c\x50\x35\xa9\x08\x56\x97\x08\x61\x7a\x00\x7a\x00\x55\x00\x00\x45\xf8\xb0\x03\x63\xf5\x44\x65\xeb\x34\xc5\x00\x35\x35\xfd\x44\xe3\xfb\x44\xc9\x0d\x45\xb6\x61\x50\x3a\x3a\x55\x00\x00\x55\x01\x2d\x45\xf0\x68\x50\xa8\x61\x60\x21\x21\x56\x00\x00\x55\x01\x6c\x55\x10\x68\x50\x05\x63\x50\x3a\x20\x55\xcd\x20\x65\x43\x20\x05\x73\xdf\x55\x03\xf4\x55\x2a\x6c\x50\x08\x0b\x05\x76\x0d\x05\x61\x07\xaa\x07\x00\x55\x00\x00\x45\xe6\x19\xa6\x75\x75\x5a\x00\x00\x55\x01\xe8\x64\x21\x68\x40\xfd\x61\x80\x1c\x1c\x58\x00\x00\x55\x00\xfd\x54\x59\x63\x40\xfd\x51\x45\xfb\x86\x45\xee\xa0\x05\x61\x2f\x55\x2f\x00\x55\x00\x01\x45\xd3\x20\x05\x5a";
          paths[1] = "\x4d\x50\x66\x42\x05\x48\xa8\x05\x6c\x66\x45\xfb\x61\x50\xfc\xfc\x55\x00\x00\x55\x01\x61\x55\x10\x63\x50\x7b\x42\x75\x0d\x0b\x75\x2a\x3c\x45\xd3\xca\x45\xfb\x70\x46\xd1\x3c\x47\xf3\x1d\x55\x00\xcd\x45\xeb\xf4\x05\x73\xf5\x54\x10\xf0\x54\x10\x6c\x40\xf3\xfb\x04\x43\x12\x87\xa7\x90\x85\xbe\x57\x85\x97\x63\x50\x0d\x09\x44\xd3\xde\x42\xf5\xe7\x41\xfd\xd1\x44\xfd\xc4\x54\x1a\xc4\x04\x4d\x66\x55\x00\x56\x50\x00\x41\x50\x61\x61\x55\x00\x00\x55\x00\x20\x55\x1d\x79\x55\x79\x00\x55\x00\x00\x55\x0b\x7b\x05\x43\xf8\x64\x0e\x03\x65\xaf\x0b\x75\x4a\x41\x00\x4b\x4b\x50\x00\x00\x55\x01\x15\x85\x94\x76\x50\x25\x6c\x50\x20\x15\x05\x63\x2d\x55\x20\x8e\x55\x22\x62\x56\x27\x81\x55\x03\x14\x56\x05\x94\x56\x15\x6c\x50\x1d\x05\x05\x61\x54\x55\x54\x00\x55\x00\x00\x55\x4c\xcb\x04\x63\x10\x45\xe0\x12\x45\xa9\x12\x45\x53\x61\x70\x9b\x9b\x57\x00\x00\x55\x01\x03\x45\xb1\x68\x50\x03\x76\x40\xfb\x61\xa0\xd1\xd1\x5a\x00\x00\x55\x00\x1a\x35\xda\xec\x99\xec\x00\x55\x00\x01\x55\x18\xea\x03\x6c\x05\x45\xe8\xf3\x44\xe8\x43\x80\xb1\x35\x85\x62\x35\x75\xc2\x35\x75\x57\x35\x65\xc4\x35\x65\x8c\x18\x05\x68\xfb\x04\x41\x4b\x66\x4b\x00\x55\x00\x00\x65\x0e\x00\x05\x48\x66\x05\x5a";
          paths[2] = "\x4d\x70\xcf\x4b\x08\x61\x98\x55\x98\x00\x55\x00\x01\x45\xdb\xf8\x54\x4f\x4f\x55\x00\x00\x55\x00\xe3\x44\xf5\x48\x60\xc9\x61\x60\x9f\x9f\x56\x00\x00\x55\x00\x94\x54\x0b\x48\x60\x40\x41\x50\x47\x47\x55\x00\x00\x55\x01\xf4\x75\xf9\x48\x50\xf2\x61\xc0\xaf\xaf\x5c\x00\x00\x55\x00\xf8\x44\x29\x2a\xdd\x2a\x00\x55\x00\x01\x45\xf8\xff\x53\x37\x37\x55\x00\x00\x55\x01\x0d\x45\xe0\x63\x50\x10\xf0\x54\x2a\xeb\x54\x57\xeb\x04\x6c\x81\x55\x08\x57\x55\x08\x68\x50\x64\x6c\x50\x47\xf8\x04\x61\x76\x55\x76\x00\x55\x00\x01\x55\x54\x1d\x55\x5f\x5f\x55\x00\x00\x55\x01\x18\x55\x44\x68\x50\x00\x76\x50\x05\x63\x40\xdb\x69\x45\xd9\xd5\x45\xd3\x46\x56\x00\x27\x45\xfd\x4f\x45\xfb\x76\x05\x53\xdd\x87\x4b\xcf\x87\x4b\x5a\x00";
          paths[3] = "\x4d\x60\x46\x09\x06\x63\x44\x55\x00\xa8\x55\x10\xd7\x55\x10\x68\x50\x2d\x63\x50\x25\x00\x55\x57\xf5\x54\x7e\xf5\x04\x73\x4c\x55\x0b\x4a\x55\x3c\x43\x70\xdf\xe0\x76\xea\x79\x77\xdf\x11\x08\x63\xfd\x54\x15\xf8\x54\x1a\xf0\x54\x1a\x73\x40\xd9\xee\x44\xbe\xee\x04\x48\x69\x07\x4c\xc9\x86\x14\x61\x60\x8f\x8f\x56\x00\x00\x55\x00\x8c\x54\x0d\x68\x40\xeb\x61\x50\x2a\x2a\x55\x00\x00\x55\x01\xd3\x44\xd3\x63\x50\x05\x62\x44\xe6\xc5\x43\xf0\x2a\x53\x00\xee\x54\x1a\xe8\x54\x42\xe8\x04\x6d\x00\x45\xbe\x41\x50\x96\x96\x55\x00\x00\x55\x00\xd7\x55\xea\x61\x50\x4a\x4a\x55\x00\x00\x55\x00\xeb\x54\x35\xad\xbb\xad\x00\x55\x00\x00\x55\x08\x04\x06\x41\x97\xcc\x97\x00\x55\x00\x01\x55\xd2\xf7\x07\x48\xd2\x05\x61\x6c\x55\x6c\x00\x55\x00\x00\x55\x6e\x69\x05\x6c\x22\x45\xfb\x68\x50\x03\x61\x60\x60\x60\x56\x00\x00\x55\x01\x64\x45\xf5\x68\x50\xc5\x6c\x50\x10\x05\x05\x61\x7e\x55\x7e\x00\x55\x00\x00\x55\x32\x0d\x55\x57\x57\x55\x00\x00\x55\x00\x51\x45\xac\x68\x50\x00\x63\x50\x03\xd9\x54\x03\xaf\x54\x05\x87\x54\x03\x92\x54\x08\x29\x54\x2a\xc5\x03\x76\xee\x04\x61\x7b\x55\x7b\x00\x55\x00\x00\x45\xe0\xa4\x54\x96\x96\x55\x00\x00\x55\x00\x94\x44\xdb\x6c\x40\xb6\x05\x45\xcb\x05\x05\x68\xf5\x04\x6c\xf3\x44\xfb\x68\x40\xeb\x4c\x60\xc9\xd2\x05\x61\x7e\x99\x7e\x00\x55\x00\x00\x45\x7d\xf5\x04\x5a";
          fill[0] = "#af5366";
          fill[1] = "#504650";
          fill[2] = "#fff";
          fill[3] = "#504650";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
      }
      function parts_Window2() internal pure returns(uint16[4] memory sizes, bytes[] memory paths, string[] memory fill, uint8[] memory stroke) {
          sizes = [4, 41, 1024, 1024];
          paths = new bytes[](sizes[0]);
          fill = new string[](sizes[0]);
          stroke = new uint8[](sizes[0]);

          paths[0] = "\x4d\x80\x63\xae\x08\x68\xfb\x04\x63\xce\x44\xef\x40\x44\xec\xb9\x43\xea\x01\x44\xfb\x64\x43\xf4\x32\x43\xc4\x4c\x50\x41\x51\x08\x76\xf9\x04\x43\x1b\x75\xa5\x1e\x65\xb0\x20\x65\x0e\x61\xa0\x7e\x7e\x5a\x00\x00\x55\x00\x00\x45\x6a\x2d\x55\x2d\x00\x55\x00\x01\x55\x0a\xd6\x04\x63\x11\x45\xea\x2f\x45\xea\x52\x45\xea\x48\x50\xaf\x41\x80\x09\x09\x58\x00\x00\x55\x00\x13\x56\x32\x68\x50\x11\x61\x50\x66\x66\x55\x00\x00\x55\x00\x2f\x55\x0a\x41\x60\x27\x27\x56\x00\x00\x55\x00\xa1\x56\x32\x6c\x50\x34\xf6\x04\x63\x1e\x45\xfe\x7a\x45\xf9\xdc\x45\xf9\xf0\x55\x00\x27\x56\x23\x3b\x56\x3e\x41\x50\x3e\x3e\x55\x00\x00\x55\x01\xf6\x58\x96\x63\x40\xc9\x6d\x46\xba\x28\x47\xb3\x8e\x07\x73\xf9\x54\x89\xbf\x54\x89\x5a\x00";
          paths[1] = "\x4d\x70\xb1\x3e\x05\x63\x96\x55\x00\x3b\x56\x0f\x27\x56\x50\x90\x74\xd2\xc7\x74\xff\x90\x74\xff\x81\x44\xd3\x47\x52\x02\xf5\x41\xb5\x43\x50\x28\x55\x57\x4b\xb4\x55\x3e\x73\x55\x39\x57\x55\x50\x55\x55\x7d\x55\x05\x68\x9b\x05\x61\xa7\x55\xa7\x00\x55\x00\x00\x55\x3c\x0a\x05\x41\xe6\x99\xe6\x00\x55\x00\x00\x65\xdb\x48\x05\x63\x1e\x45\xfe\x78\x45\xf6\xd7\x45\xf6\x6d\x50\x00\xc2\x04\x61\x0f\xdd\x0f\x00\x55\x00\x00\x45\x22\x0a\x05\x68\x00\x05\x4c\x9c\x56\x14\x61\x60\xa1\xa1\x56\x00\x00\x55\x01\xb8\x54\x0a\x41\x50\x50\x50\x55\x00\x00\x55\x01\x31\x56\x19\x4c\x60\x22\x11\x05\x48\x7d\x05\x43\x5a\x55\x16\x2d\x55\x16\x11\x55\x39\x41\x50\x52\x52\x55\x00\x00\x55\x00\x02\x55\x7f\x63\x50\x02\x0f\x55\x00\x52\x55\x00\x8e\x05\x43\x00\x65\xb3\xfb\x74\xaa\x20\x85\x4f\x76\x50\x14\x6c\x50\x0f\x0c\x05\x63\x39\x55\x37\xc5\x55\x3e\xe2\x56\x43\x82\x55\x02\x10\x56\x05\x3d\x56\x16\x68\x50\x16\x61\x50\x52\x52\x55\x00\x00\x55\x00\x55\x45\xc4\x2f\x77\x2f\x00\x55\x00\x00\x55\x0c\x97\x04\x63\x07\x45\x9a\x14\x35\xde\x4b\x25\x77\x61\x50\x5a\x5a\x55\x00\x00\x55\x00\xf1\x44\xb0\x43\x80\xea\x28\x85\xab\x00\x75\xb1\x00\x05\x5a";
          paths[2] = "\x4d\x70\x87\x10\x08\x6c\x83\x44\xef\x43\x50\xe1\xd9\x57\xcd\xcf\x57\xd9\x07\x07\x63\x02\x45\xc4\x07\x45\x74\x02\x45\x09\x61\x50\x39\x39\x55\x00\x00\x55\x01\x02\x45\xcc\x34\x55\x34\x00\x55\x00\x01\x55\x32\xe7\x04\x68\x07\x05\x61\x8b\xcc\x8b\x00\x55\x00\x01\x55\xd2\x0c\x05\x63\x4b\x55\x05\x98\x55\x0a\xe6\x55\x0a\x68\x50\x2a\x61\x50\x55\x55\x55\x00\x00\x55\x01\x46\x55\x19\x7a\x55\x7a\x00\x55\x00\x01\x55\x14\x5c\x05\x63\xfb\x54\x3e\xf4\x54\x7d\xec\x54\xbb\x73\x40\xf4\x78\x45\xef\xb4\x05\x68\x00\x05\x63\xf1\x54\x4d\x8d\x54\x50\x5e\x54\x50\x68\x40\xfb\x5a\x00";
          paths[3] = "\x4d\x60\x10\xe1\x05\x68\x05\x05\x63\x93\x55\x02\x27\x56\x19\xba\x56\x19\x68\x50\x2a\x63\x50\x32\x00\x55\x41\x16\x55\x3c\x52\x45\xf4\x7a\x45\xe5\xf5\x45\xd8\x6f\x46\xf6\x34\x45\xab\x37\x45\x7e\x39\x05\x43\x6e\x75\xa5\x10\x76\xe8\xfa\x65\x09\x63\x40\xf4\xe7\x54\x02\xd8\x54\x16\xd8\x04\x6d\x00\x45\xc2\x61\x50\x55\x55\x55\x00\x00\x55\x00\xb5\x54\x28\x50\x55\x50\x00\x55\x00\x00\x45\xf9\x4b\x05\x63\x02\x55\x69\xfe\x54\xb6\xfb\x54\xf0\xfb\x54\x61\xf6\x54\xa5\x32\x55\xd4\x73\x50\x7a\x2f\x65\x1a\x46\x05\x6c\x7d\x55\x11\x68\x50\x0c\x63\x50\x2d\xfe\x54\xaa\xfb\x54\xbe\x95\x04\x68\x00\x05\x63\x07\x45\xc4\x0c\x45\x88\x14\x45\x4f\x73\x50\x0c\x81\x54\x14\x42\x04\x61\x98\x55\x98\x00\x55\x00\x00\x45\xe2\x8b\x54\x78\x78\x55\x00\x00\x55\x00\xa4\x44\xdd\x48\x70\xcf\x63\x40\xb5\x00\x45\x68\xf9\x44\x1d\xf4\x04\x6c\x2e\x44\xf4\x5a\x00";
          fill[0] = "#af5366";
          fill[1] = "#504650";
          fill[2] = "#a1fff5";
          fill[3] = "#504650";
          stroke[0] = 0;
          stroke[1] = 0;
          stroke[2] = 0;
          stroke[3] = 0;
      }
      
  function main() external pure returns(string memory output) {

      (uint16[4] memory sizes, bytes[] memory path, string[] memory fill,  uint8[] memory stroke) = parts_Lu_2_artboard();
      
      
      SVG.Element[] memory samples = new SVG.Element[](sizes[0]);
      SVG.Element[] memory samples2 = new SVG.Element[](0);
      for(uint i = 0; i < sizes[0]; i++) {
          SVG.Element memory tmp = SVG.path(Path.decode(path[i]));
          if (keccak256(abi.encodePacked(fill[i])) != keccak256(abi.encodePacked("")) &&
              keccak256(abi.encodePacked(fill[i])) != keccak256(abi.encodePacked("none"))) {
              tmp = tmp.fill(fill[i]);
          }
          if (stroke[i] != 0) {
              tmp = tmp.stroke("#000", stroke[i]);
              // tmp = tmp.style("fill:#fafaf5;stroke-linecap:round;stroke-linejoin:round;stroke-width:3;stroke:#000");
              tmp = tmp.style("stroke-linecap:round;stroke-linejoin:round;stroke-width:3");
          }
          samples[i] = tmp;
      }

      
      output = SVG.document(
                            "0 0 1024 1024",
                            SVG.list(samples2).svg(),
                            SVG.list(samples).svg()
                            );
          
  }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

import "bytes-array.sol/BytesArray.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "./IFontProvider.sol";
import "./Path.sol";
import "./Transform.sol";

library SVG {
  using Strings for uint;
  using BytesArray for bytes[];

  struct Attribute {
    string key;
    string value;
  }

  struct Element {
    bytes head;
    bytes tail;
    Attribute[] attrs;    
  }

  function path(bytes memory _path) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<path d="', _path); 
    element.tail = bytes('"/>\n');
  }

  function char(IFontProvider _font, string memory _char) internal view returns(Element memory element) {
    element = SVG.path(Path.decode(_font.pathOf(_char)));
  }

  function textWidth(IFontProvider _font, string memory _str) internal view returns(uint x) {
    bytes memory data = bytes(_str);
    bytes memory ch = new bytes(1);
    for (uint i=0; i<data.length; i++) {
      ch[0] = data[i];
      x += _font.widthOf(string(ch));
    }
  }

  function text(IFontProvider _font, string[2] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](2);
    strs[0] = _strs[0];
    strs[1] = _strs[1];
    element = text(_font, strs, _width);
  }
  function text(IFontProvider _font, string[3] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](3);
    strs[0] = _strs[0];
    strs[1] = _strs[1];
    strs[2] = _strs[2];
    element = text(_font, strs, _width);
  }

  function text(IFontProvider _font, string[4] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](4);
    for (uint i=0; i<_strs.length; i++) {
      strs[i] = _strs[i];
    }
    element = text(_font, strs, _width);
  }
  function text(IFontProvider _font, string[5] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](5);
    for (uint i=0; i<_strs.length; i++) {
      strs[i] = _strs[i];
    }
    element = text(_font, strs, _width);
  }
  function text(IFontProvider _font, string[6] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](6);
    for (uint i=0; i<_strs.length; i++) {
      strs[i] = _strs[i];
    }
    element = text(_font, strs, _width);
  }
  function text(IFontProvider _font, string[7] memory _strs, uint _width) internal view returns(Element memory element) {
    string[] memory strs = new string[](7);
    for (uint i=0; i<_strs.length; i++) {
      strs[i] = _strs[i];
    }
    element = text(_font, strs, _width);
  }

  function text(IFontProvider _font, string[] memory _strs, uint _width) internal view returns(Element memory element) {
    uint height = _font.height();
    uint maxWidth = _width;
    Element[] memory elements = new Element[](_strs.length);
    for (uint i=0; i<_strs.length; i++) {
      uint width = textWidth(_font, _strs[i]);
      if (width > maxWidth) {
        maxWidth = width;
      }
      elements[i] = transform(text(_font, _strs[i]), TX.translate(0, int(height * i)));
    }
    // extra group is necessary to let it transform 
    element = group(svg(transform(group(elements), TX.scale1000(1000 * _width / maxWidth))));
  }

  function text(IFontProvider _font, string memory _str) internal view returns(Element memory element) {
    bytes memory data = bytes(_str);
    bytes memory ch = new bytes(1);
    Element[] memory elements = new Element[](data.length);
    uint x;
    for (uint i=0; i<data.length; i++) {
      ch[0] = data[i];
      elements[i] = SVG.path(Path.decode(_font.pathOf(string(ch))));
      if (x > 0) {
        elements[i] = transform(elements[i], string(abi.encodePacked('translate(', x.toString(), ' 0)')));
      }
      x += _font.widthOf(string(ch));
    }
    element = group(elements);
  }

  function circle(int _cx, int _cy, int _radius) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<circle cx="', uint(_cx).toString(),'" cy="', uint(_cy).toString(),'" r="', uint(_radius).toString());
    element.tail = '"/>\n';
  }

  function ellipse(int _cx, int _cy, int _rx, int _ry) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<ellipse cx="', uint(_cx).toString(),'" cy="', uint(_cy).toString(),
                      '" rx="', uint(_rx).toString(), '" ry="', uint(_ry).toString());
    element.tail = '"/>\n';
  }

  function rect(int _x, int _y, uint _width, uint _height) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<rect x="', uint(_x).toString(),'" y="', uint(_y).toString(),
                                '" width="', _width.toString(), '" height="', _height.toString());
    element.tail = '"/>\n';
  }

  function rect() internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<rect width="100%" height="100%');
    element.tail = '"/>\n';
  }

  function stop(uint ratio) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<stop offset="', ratio.toString(), '%');
    element.tail = '"/>\n';
  }

  function use(string memory _id) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<use href="#', _id);
    element.tail = '"/>\n';
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function packed(Element[4] memory _elements) internal pure returns(bytes memory output) {
    bytes[] memory svgs = new bytes[](4);
    svgs[0] = svg(_elements[0]);
    svgs[1] = svg(_elements[1]);
    svgs[2] = svg(_elements[2]);
    svgs[3] = svg(_elements[3]);
    output = svgs.packed();
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function packed(Element[3] memory _elements) internal pure returns(bytes memory output) {
    bytes[] memory svgs = new bytes[](3);
    svgs[0] = svg(_elements[0]);
    svgs[1] = svg(_elements[1]);
    svgs[2] = svg(_elements[2]);
    output = svgs.packed();
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function packed(Element[2] memory _elements) internal pure returns(bytes memory output) {
    bytes[] memory svgs = new bytes[](2);
    svgs[0] = svg(_elements[0]);
    svgs[1] = svg(_elements[1]);
    output = svgs.packed();
  }

  function packed(Element[] memory _elements) internal pure returns(bytes memory output) {
    bytes[] memory svgs = new bytes[](_elements.length);
    for (uint i=0; i<_elements.length; i++) {
      svgs[i] = svg(_elements[i]);
    }
    output = svgs.packed();
  }

  function pattern(string memory _id, string memory _viewbox, string memory _width, string memory _height, bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<pattern id="', _id, '" viewBox="', _viewbox, '" width="', _width, '" height="', _height); 
    element.tail = abi.encodePacked('">', _elements, '</pattern>\n');
  }

  function pattern(string memory _id, string memory _viewbox, string memory _width, string memory _height, Element memory _element) internal pure returns(Element memory element) {
    element = pattern(_id, _viewbox, _width, _height, svg(_element));    
  }

  function filter(string memory _id, bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<filter id="', _id); 
    element.tail = abi.encodePacked('">', _elements, '</filter>\n');
  }

  function filter(string memory _id, Element memory _element) internal pure returns(Element memory element) {
    element = filter(_id, svg(_element));
  }

  function feGaussianBlur(string memory _src, string memory _stdDeviation) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<feGaussianBlur in="', _src, '" stdDeviation="', _stdDeviation);
    element.tail = '" />';
  }
  /*
      '  <feOffset result="offOut" in="SourceAlpha" dx="24" dy="32" />\n'
      '  <feGaussianBlur result="blurOut" in="offOut" stdDeviation="16" />\n'
      '  <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n'
  */
  function feOffset(string memory _src, string memory _dx, string memory _dy) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<feOffset in="', _src, '" dx="', _dx, '" dy="', _dy);
    element.tail = '" />';
  }

  function feBlend(string memory _src, string memory _src2, string memory _mode) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<feBlend in="', _src, '" in2="', _src2, '" mode="', _mode);
    element.tail = '" />';
  }

  function linearGradient(string memory _id, bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<linearGradient id="', _id); 
    element.tail = abi.encodePacked('">', _elements, '</linearGradient>\n');
  }

  function linearGradient(string memory _id, Element memory _element) internal pure returns(Element memory element) {
    element = linearGradient(_id, svg(_element));
  }

  function radialGradient(string memory _id, bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<radialGradient id="', _id); 
    element.tail = abi.encodePacked('">', _elements, '</radialGradient>\n');
  }

  function radialGradient(string memory _id, Element memory _element) internal pure returns(Element memory element) {
    element = radialGradient(_id, svg(_element));
  }

  function group(bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<g x_x="x'); // HACK: dummy header for trailing '"'
    element.tail = abi.encodePacked('">', _elements, '</g>\n');
  }

  function group(Element memory _element) internal pure returns(Element memory element) {
    element = group(svg(_element));
  }

  function group(Element[] memory _elements) internal pure returns(Element memory element) {
    element = group(packed(_elements));
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function group(Element[2] memory _elements) internal pure returns(Element memory element) {
    element = group(packed(_elements));
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function group(Element[3] memory _elements) internal pure returns(Element memory element) {
    element = group(packed(_elements));
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function group(Element[4] memory _elements) internal pure returns(Element memory element) {
    element = group(packed(_elements));
  }

  function item(bytes memory _body) internal pure returns(Element memory element) {
    element.tail = _body;
  }

  function list(Element[] memory _elements) internal pure returns(Element memory element) {
    element.tail = packed(_elements);
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function list(Element[2] memory _elements) internal pure returns(Element memory element) {
    element.tail = packed(_elements);
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function list(Element[3] memory _elements) internal pure returns(Element memory element) {
    element.tail = packed(_elements);
  }

  // HACK: Solidity does not support literal expression of dynamic array yet
  function list(Element[4] memory _elements) internal pure returns(Element memory element) {
    element.tail = packed(_elements);
  }

  function mask(bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<mask x_x="x'); // HACK: dummy header for trailing '"'
    element.tail = abi.encodePacked(
      '">' 
      '<rect x="0" y="0" width="100%" height="100%" fill="black"/>'
      '<g fill="white">',
      _elements,
      '</g>' 
      '</mask>\n');
  }

  function mask(Element memory _element) internal pure returns(Element memory element) {
    element = mask(svg(_element));
  }

  function stencil(bytes memory _elements) internal pure returns(Element memory element) {
    element.head = abi.encodePacked('<mask x_x="x'); // HACK: dummy header for trailing '"'
    element.tail = abi.encodePacked(
      '">' 
      '<rect x="0" y="0" width="100%" height="100%" fill="white"/>'
      '<g fill="black">',
      _elements,
      '</g>' 
      '</mask>\n');
  }

  function stencil(Element memory _element) internal pure returns(Element memory element) {
    element = stencil(svg(_element));
  }

  function _append(Element memory _element, Attribute memory _attr) internal pure returns(Element memory element) {
    element.head = _element.head;
    element.tail = _element.tail;
    element.attrs = new Attribute[](_element.attrs.length + 1);
    for (uint i=0; i<_element.attrs.length; i++) {
      element.attrs[i] = _element.attrs[i];
    }
    element.attrs[_element.attrs.length] = _attr;   
  }

  function _append2(Element memory _element, Attribute memory _attr, Attribute memory _attr2) internal pure returns(Element memory element) {
    element.head = _element.head;
    element.tail = _element.tail;
    element.attrs = new Attribute[](_element.attrs.length + 2);
    for (uint i=0; i<_element.attrs.length; i++) {
      element.attrs[i] = _element.attrs[i];
    }
    element.attrs[_element.attrs.length] = _attr;   
    element.attrs[_element.attrs.length+1] = _attr2;   
  }

  function id(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("id", _value));
  }

  function fill(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("fill", _value));
  }

  function opacity(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("opacity", _value));
  }

  function stopColor(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("stop-color", _value));
  }

  function x1(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("x1", _value));
  }

  function x2(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("x2", _value));
  }

  function y1(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("y1", _value));
  }

  function y2(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("y2", _value));
  }

  function cx(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("cy", _value));
  }

  function cy(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("cy", _value));
  }

  function r(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("r", _value));
  }

  function fx(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("fx", _value));
  }

  function fy(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("fy", _value));
  }

  function result(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("result", _value));
  }

  function fillRef(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("fill", string(abi.encodePacked('url(#', _value, ')'))));
  }

  function filter(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("filter", string(abi.encodePacked('url(#', _value, ')'))));
  }

  function style(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("style", _value));
  }

  function transform(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("transform", _value));
  }

  function mask(Element memory _element, string memory _value) internal pure returns(Element memory element) {
    element = _append(_element, Attribute("mask", string(abi.encodePacked('url(#', _value,')'))));
  }

  function stroke(Element memory _element, string memory _color, uint _width) internal pure returns(Element memory element) {
    element = _append2(_element, Attribute("stroke", _color), Attribute("stroke-width", _width.toString()));
  }

  function svg(Element memory _element) internal pure returns (bytes memory output) {
    if (_element.head.length > 0) {
      output = _element.head;
      for (uint i=0; i<_element.attrs.length; i++) {
        Attribute memory attr = _element.attrs[i];
        output = abi.encodePacked(output, '" ', attr.key ,'="', attr.value);      
      }
    } else {
      require(_element.attrs.length == 0, "Attributes on list");
    }
    output = abi.encodePacked(output, _element.tail);
  }

  function document(string memory _viewBox, bytes memory _defs, bytes memory _body) internal pure returns (string memory) {
    bytes memory output = abi.encodePacked(
      '<?xml version="1.0" encoding="UTF-8"?>'
      '<svg viewBox="', _viewBox, '"'
      ' xmlns="http://www.w3.org/2000/svg">\n'
    );
    if (_defs.length > 0) {
      output = abi.encodePacked(output, '<defs>\n', _defs, '</defs>\n');
    }
    output = abi.encodePacked(output, _body, '</svg>\n');
    return string(output);
  }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

import "./Vector.sol";

library Path {
  function roundedCorner(Vector.Struct memory _vector) internal pure returns(uint) {
    return uint(_vector.x/0x8000) + (uint(_vector.y/0x8000) << 32) + (566 << 64);
  }

  function sharpCorner(Vector.Struct memory _vector) internal pure returns(uint) {
    return uint(_vector.x/0x8000) + (uint(_vector.y/0x8000) << 32) + (0x1 << 80);
  }

  function closedPath(uint[] memory points) internal pure returns(bytes memory newPath) {
    uint length = points.length;
    assembly{
      function toString(_wbuf, _value) -> wbuf {
        let len := 2
        let cmd := 0
        if gt(_value,9) {
          if gt(_value,99) {
            if gt(_value,999) {
              cmd := or(shl(8, cmd), add(48, div(_value, 1000))) 
              len := add(1, len)
              _value := mod(_value, 1000)
            }
            cmd := or(shl(8, cmd), add(48, div(_value, 100)))
            len := add(1, len)
            _value := mod(_value, 100)
          }
          cmd := or(shl(8, cmd), add(48, div(_value, 10)))
          len := add(1, len)
          _value := mod(_value, 10)
        }
        cmd := or(or(shl(16, cmd), shl(8, add(48, _value))), 32)

        mstore(_wbuf, shl(sub(256, mul(len, 8)), cmd))
        wbuf := add(_wbuf, len)
      }

      // dynamic allocation
      newPath := mload(0x40)
      let wbuf := add(newPath, 0x20)
      let rbuf := add(points, 0x20)

      let wordP := mload(add(rbuf, mul(sub(length,1), 0x20)))
      let word := mload(rbuf)
      for {let i := 0} lt(i, length) {i := add(i, 1)} {
        let x := and(word, 0xffffffff)
        let y := and(shr(32, word), 0xffffffff)
        let r := and(shr(64, word), 0xffff)
        let sx := div(add(x, and(wordP, 0xffffffff)),2)
        let sy := div(add(y, and(shr(32, wordP), 0xffffffff)),2)
        if eq(i, 0) {
          mstore(wbuf, shl(248, 0x4D)) // M
          wbuf := add(wbuf, 1)
          wbuf := toString(wbuf, sx)
          wbuf := toString(wbuf, sy)
        }
        
        let wordN := mload(add(rbuf, mul(mod(add(i,1), length), 0x20)))
        {
          let ex := div(add(x, and(wordN, 0xffffffff)),2)
          let ey := div(add(y, and(shr(32, wordN), 0xffffffff)),2)

          switch and(shr(80, word), 0x01) 
            case 0 {
              mstore(wbuf, shl(248, 0x43)) // C
              wbuf := add(wbuf, 1)
              x := mul(x, r)
              y := mul(y, r)
              r := sub(1024, r)
              wbuf := toString(wbuf, div(add(x, mul(sx, r)),1024))
              wbuf := toString(wbuf, div(add(y, mul(sy, r)),1024))
              wbuf := toString(wbuf, div(add(x, mul(ex, r)),1024))
              wbuf := toString(wbuf, div(add(y, mul(ey, r)),1024))
            }
            default {
              mstore(wbuf, shl(248, 0x4C)) // L
              wbuf := add(wbuf, 1)
              wbuf := toString(wbuf, x)
              wbuf := toString(wbuf, y)
            }
          wbuf := toString(wbuf, ex)
          wbuf := toString(wbuf, ey)
        }
        wordP := word
        word := wordN
      }

      mstore(newPath, sub(sub(wbuf, newPath), 0x20))
      mstore(0x40, wbuf)
    }
  }

  function decode(bytes memory body) internal pure returns (bytes memory) {
    bytes memory ret;
    assembly{
      let bodyMemory := add(body, 0x20)
      let length := div(mul(mload(body), 2), 3)
      ret := mload(0x40)
      let retMemory := add(ret, 0x20)
      let data
      for {let i := 0} lt(i, length) {i := add(i, 1)} {
        if eq(mod(i, 16), 0) {
          data := mload(bodyMemory) // reading 8 extra bytes
          bodyMemory := add(bodyMemory, 24)
        }
        let low
        let high
        switch mod(i, 2)
        case 0 {
          low := shr(248, data)
          high := and(shr(240, data), 0x0f)
        }
        default {
          low := and(shr(232, data), 0xff)
          high := and(shr(244, data), 0x0f)
          data := shl(24, data)
        }
        
        switch high
        case 0 {
          if or(and(gt(low, 64), lt(low, 91)), and(gt(low, 96), lt(low, 123))) {
            mstore(retMemory, shl(248, low))
            retMemory := add(retMemory, 1)
          }
        }
        default {
          let cmd := 0
          let lenCmd := 2 // last digit and space
          // SVG value: undo (value + 1024) + 0x100 
          let value := sub(add(shl(8, high), low), 0x0100)
          switch lt(value, 1024)
          case 0 {
            value := sub(value, 1024)
          }
          default {
            cmd := 45 // "-"
            lenCmd := 3
            value := sub(1024,value)
          }
          if gt(value,9) {
            if gt(value,99) {
              if gt(value,999) {
                cmd := or(shl(8, cmd), 49) // always "1"
                lenCmd := add(1, lenCmd)
                value := mod(value, 1000)
              }
              cmd := or(shl(8, cmd), add(48, div(value, 100)))
              lenCmd := add(1, lenCmd)
              value := mod(value, 100)
            }
            cmd := or(shl(8, cmd), add(48, div(value, 10)))
            lenCmd := add(1, lenCmd)
            value := mod(value, 10)
          }
          // last digit and space
          cmd := or(or(shl(16, cmd), shl(8, add(48, value))), 32)

          mstore(retMemory, shl(sub(256, mul(lenCmd, 8)), cmd))
          retMemory := add(retMemory, lenCmd)
        }
      }
      mstore(ret, sub(sub(retMemory, ret), 0x20))
      mstore(0x40, retMemory)
    }
    return ret;
  }
}

// SPDX-License-Identifier: MIT
pragma solidity >= 0.4.22 <0.9.0;

library console {
	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

	function _sendLogPayload(bytes memory payload) private view {
		uint256 payloadLength = payload.length;
		address consoleAddress = CONSOLE_ADDRESS;
		assembly {
			let payloadStart := add(payload, 32)
			let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
		}
	}

	function log() internal view {
		_sendLogPayload(abi.encodeWithSignature("log()"));
	}

	function logInt(int256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
	}

	function logUint(uint256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
	}

	function logString(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function logBool(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function logAddress(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function logBytes(bytes memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
	}

	function logBytes1(bytes1 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
	}

	function logBytes2(bytes2 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
	}

	function logBytes3(bytes3 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
	}

	function logBytes4(bytes4 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
	}

	function logBytes5(bytes5 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
	}

	function logBytes6(bytes6 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
	}

	function logBytes7(bytes7 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
	}

	function logBytes8(bytes8 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
	}

	function logBytes9(bytes9 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
	}

	function logBytes10(bytes10 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
	}

	function logBytes11(bytes11 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
	}

	function logBytes12(bytes12 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
	}

	function logBytes13(bytes13 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
	}

	function logBytes14(bytes14 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
	}

	function logBytes15(bytes15 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
	}

	function logBytes16(bytes16 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
	}

	function logBytes17(bytes17 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
	}

	function logBytes18(bytes18 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
	}

	function logBytes19(bytes19 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
	}

	function logBytes20(bytes20 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
	}

	function logBytes21(bytes21 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
	}

	function logBytes22(bytes22 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
	}

	function logBytes23(bytes23 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
	}

	function logBytes24(bytes24 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
	}

	function logBytes25(bytes25 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
	}

	function logBytes26(bytes26 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
	}

	function logBytes27(bytes27 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
	}

	function logBytes28(bytes28 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
	}

	function logBytes29(bytes29 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
	}

	function logBytes30(bytes30 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
	}

	function logBytes31(bytes31 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
	}

	function logBytes32(bytes32 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
	}

	function log(uint256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
	}

	function log(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function log(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function log(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function log(uint256 p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256)", p0, p1));
	}

	function log(uint256 p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string)", p0, p1));
	}

	function log(uint256 p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool)", p0, p1));
	}

	function log(uint256 p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address)", p0, p1));
	}

	function log(string memory p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
	}

	function log(string memory p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
	}

	function log(string memory p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
	}

	function log(string memory p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
	}

	function log(bool p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256)", p0, p1));
	}

	function log(bool p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
	}

	function log(bool p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
	}

	function log(bool p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
	}

	function log(address p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256)", p0, p1));
	}

	function log(address p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
	}

	function log(address p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
	}

	function log(address p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
	}

	function log(uint256 p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,address)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
	}

	function log(string memory p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256)", p0, p1, p2));
	}

	function log(string memory p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
	}

	function log(string memory p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
	}

	function log(string memory p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
	}

	function log(bool p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256)", p0, p1, p2));
	}

	function log(bool p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
	}

	function log(bool p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
	}

	function log(bool p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
	}

	function log(bool p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256)", p0, p1, p2));
	}

	function log(bool p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
	}

	function log(bool p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
	}

	function log(bool p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,address)", p0, p1, p2));
	}

	function log(address p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256)", p0, p1, p2));
	}

	function log(address p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
	}

	function log(address p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
	}

	function log(address p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
	}

	function log(address p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256)", p0, p1, p2));
	}

	function log(address p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
	}

	function log(address p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
	}

	function log(address p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
	}

	function log(address p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint256)", p0, p1, p2));
	}

	function log(address p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
	}

	function log(address p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
	}

	function log(address p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,uint256)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,string)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3));
	}

	function log(uint256 p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint256)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint256)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
	}

}

// SPDX-License-Identifier: MIT

/*
 * Pseudo Random genearation library.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

library Randomizer {
  struct Seed {
    uint256 seed;
    uint256 value;
  }

  /**
   * Returns a seudo random number between 0 and _limit-1.
   * It also returns an updated seed.
   */
  function random(Seed memory _seed, uint256 _limit) internal pure returns (Seed memory seed, uint256 value) {
    seed = _seed;
    if (seed.value < _limit * 256) {
      seed.seed = uint256(keccak256(abi.encodePacked(seed.seed)));
      seed.value = seed.seed;
    }
    value = seed.value % _limit;
    seed.value /= _limit;
  }

  /**
   * Returns a randomized value based on the original value and ration (in percentage).
   * It also returns an updated seed. 
   */
  function randomize(Seed memory _seed, uint256 _value, uint256 _ratio) internal pure returns (Seed memory seed, uint256 value) {
    uint256 limit = _value * _ratio / 100;
    uint256 delta;
    (seed, delta) = random(_seed, limit * 2);
    value = _value - limit + delta;
  }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

import "@openzeppelin/contracts/utils/Strings.sol";
import "bytes-array.sol/BytesArray.sol";

library TX {
  using Strings for uint;
  using BytesArray for bytes[];

  function toString(int _value) internal pure returns(string memory) {
    if (_value > 0) {
      return uint(_value).toString();
    }
    return string(abi.encodePacked("-", uint(-_value).toString()));
  }

  function translate(int x, int y) internal pure returns(string memory) {
    return string(abi.encodePacked('translate(',toString(x),' ',toString(y),')'));
  }

  function rotate(string memory _base, string memory _value) internal pure returns(string memory) {
    return string(abi.encodePacked(_base, ' rotate(', _value ,')'));
  }

  function scale(string memory _base, string memory _scale) internal pure returns(string memory) {
    return string(abi.encodePacked(_base, ' scale(', _scale ,')'));
  }

  function scale1000(uint _value) internal pure returns(string memory) {
    return string(abi.encodePacked('scale(',fixed1000(_value),')'));
  }

  function scale1000(string memory _base, uint _value) internal pure returns(string memory) {
    return string(abi.encodePacked(_base, ' scale(',fixed1000(_value),')'));
  }

  function fixed1000(uint _value) internal pure returns(string memory) {
    bytes[] memory array = new bytes[](3);
    if (_value > 1000) {
      array[0] = bytes((_value / 1000).toString());
    } else {
      array[0] = "0";
    }
    if (_value < 10) {
      array[1] = ".00";
    } else if (_value < 100) {
      array[1] = ".0";
    } else {
      array[1] = ".";
    }
    array[2] = bytes(_value.toString());
    return string(array.packed());
  }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

interface IFontProvider {
  function height() external view returns(uint);
  function baseline() external view returns(uint);
  function widthOf(string memory _char) external view returns(uint);
  function pathOf(string memory _char) external view returns(bytes memory);

  /**
   * This function processes the royalty payment from the decentralized autonomous marketplace. 
   */
  function processPayout() external payable;

  event Payout(string providerKey, address payable to, uint256 amount);
}

// SPDX-License-Identifier: MIT

/*
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

library BytesArray {
  /**
   * Equivalent to abi.encodedPacked(parts[0], parts[1], ..., parts[N-1]), where
   * N is the length of bytes.
   *
   * The complexty of this algorithm is O(M), where M is the number of total bytes.
   * Calling abi.encodePacked() in a loop reallocates memory N times, therefore,
   * the complexity will become O(M * N). 
   */
  function packed(bytes[] memory parts) internal pure returns (bytes memory ret) {
    uint count = parts.length;
    assembly {
      ret := mload(0x40)
      let retMemory := add(ret, 0x20)
      let bufParts := add(parts, 0x20)
      for {let i := 0} lt(i, count) {i := add(i, 1)} {
        let src := mload(bufParts) // read the address
        let dest := retMemory
        let length := mload(src)
        // copy 0x20 bytes each (and let it overrun)
        for {let j := 0} lt(j, length) {j := add(j, 0x20)} {
          src := add(src, 0x20) // dual purpose
          mstore(dest, mload(src))
          dest := add(dest, 0x20)
        }
        retMemory := add(retMemory, length)
        bufParts := add(bufParts, 0x20)
      }
      mstore(ret, sub(sub(retMemory, ret), 0x20))
      mstore(0x40, retMemory)
    }
  }

}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

import "trigonometry.sol/Trigonometry.sol";

library Vector {
  using Trigonometry for uint;
  int constant PI = 0x2000;
  int constant PI2 = 0x4000;
  int constant ONE = 0x8000;

  struct Struct {
    int x; // fixed point * ONE
    int y; // fixed point * ONE
  }

  function vector(int _x, int _y) internal pure returns(Struct memory newVector) {
    newVector.x = _x * ONE;
    newVector.y = _y * ONE;
  }

  function vectorWithAngle(int _angle, int _radius) internal pure returns(Struct memory newVector) {
    uint angle = uint(_angle + (PI2 << 64));
    newVector.x = _radius * angle.cos();
    newVector.y = _radius * angle.sin();
  }

  function div(Struct memory _vector, int _value) internal pure returns(Struct memory newVector) {
    newVector.x = _vector.x / _value;
    newVector.y = _vector.y / _value;
  }

  function mul(Struct memory _vector, int _value) internal pure returns(Struct memory newVector) {
    newVector.x = _vector.x * _value;
    newVector.y = _vector.y * _value;
  }

  function add(Struct memory _vector, Struct memory _vector2) internal pure returns(Struct memory newVector) {
    newVector.x = _vector.x + _vector2.x;
    newVector.y = _vector.y + _vector2.y;
  }

  function rotate(Struct memory _vector, int _angle) internal pure returns(Struct memory newVector) {
    uint angle = uint(_angle + (PI2 << 64));
    int cos = angle.cos();
    int sin = angle.sin();
    newVector.x = (cos * _vector.x - sin * _vector.y) / ONE;
    newVector.y = (sin * _vector.x + cos * _vector.y) / ONE;
  }
}

/**
 * Basic trigonometry functions
 *
 * Solidity library offering the functionality of basic trigonometry functions
 * with both input and output being integer approximated.
 *
 * This code was originally written by Lefteris Karapetsas
 * https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol
 *
 * I made several changes to make it easy for me to manage and use. 
 *
 * @author Lefteris Karapetsas 
 * @author Satoshi Nakajima (snakajima)
 * @license BSD3
 */

// SPDX-License-Identifier: BSD3
pragma solidity ^0.8.6;

library Trigonometry {

    // constant sine lookup table generated by gen_tables.py
    // We have no other choice but this since constant arrays don't yet exist
    uint8 constant entry_bytes = 2;
    bytes constant sin_table = "\x00\x00\x0c\x8c\x18\xf9\x25\x28\x30\xfb\x3c\x56\x47\x1c\x51\x33\x5a\x82\x62\xf1\x6a\x6d\x70\xe2\x76\x41\x7a\x7c\x7d\x89\x7f\x61\x7f\xff";

    function sin_table_lookup(uint index) pure internal returns (uint16) {
        bytes memory table = sin_table;
        uint offset = (index + 1) * entry_bytes;
        uint16 trigint_value;
        assembly {
            trigint_value := mload(add(table, offset))
        }

        return trigint_value;
    }

    /**
     * Return the sine of an integer approximated angle as a signed 16-bit
     * integer.
     *
     * @param _angle A 14-bit angle. This divides the circle into 16384 (0x4000)
     *               angle units, instead of the standard 360 degrees.
     * @return The sine result as a number in the range -32767 to 32767.
     */
    function sin(uint _angle) internal pure returns (int) {
        uint angle = _angle % 0x4000;
        if (angle < 0x2000) {
            return sinQuarter(angle < 0x1000 ? angle : 0x2000 - angle);
        }
        return -sinQuarter(angle < 0x3000 ? angle - 0x2000 : 0x4000 - angle);
    }

    function sinQuarter(uint _angle) internal pure returns (int) {
        if (_angle == 0x1000) {
            return 0x7fff;
        }
        uint index = _angle / 0x100; // high 4-bit
        uint interp = _angle & 0xFF; // low 8-bit
        uint x1 = sin_table_lookup(index);
        uint x2 = sin_table_lookup(index + 1);
        return int(x1 + ((x2 - x1) * interp) / 0x100);
    }

    /**
     * Return the cos of an integer approximated angle.
     * It functions just like the sin() method but uses the trigonometric
     * identity sin(x + pi/2) = cos(x) to quickly calculate the cos.
     */
    function cos(uint _angle) internal pure returns (int) {
        return sin(_angle + 0x1000);
    }
}