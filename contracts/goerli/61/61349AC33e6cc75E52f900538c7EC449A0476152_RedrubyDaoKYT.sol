/**
 *Submitted for verification at Etherscan.io on 2022-10-13
*/

pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT
interface IERC20 {
    function balanceOf(address) external view returns (uint);
}

contract RedrubyDaoKYT {

    address _redrubyToken;
    mapping(address => uint256[]) _userInfo; // STORAGE[0x9]

    event FallbackWarning(string);

    // @kyt_autogenerated
    struct _kyt_state_struct_register {
        uint256 _placeholder;
    }

    // @kyt_autogenerated
    function _in_kyt_register() external returns (_kyt_state_struct_register memory) {
        // try to store in storage first to see gas usage
        // we know which states to store before hands
        _kyt_state_struct_register memory _tmp__kyt_state_struct_register = _kyt_state_struct_register(0);
        return _tmp__kyt_state_struct_register;
    }
    // @kyt_autogenerated
    function _out_kyt_register(bytes memory result) external {
        _kyt_state_struct_register memory _transfer_states = abi.decode(result, (_kyt_state_struct_register));
        // execute threshold validation
        // checking state delta, conditional can be automatically generated with supervised learning
        // labeling from previous transactions
        // conditional logics
    }


    // @kyt_autogenerated
    struct _kyt_state_struct_withdraw {
        uint256 state_a;
    }

    // @kyt_autogenerated
    function _in_kyt_withdraw(uint256 _kytparameter_0) external returns (_kyt_state_struct_withdraw memory) {
        // try to store in storage first to see gas usage
        // we know which states to store before hands
        uint state_a_before = IERC20(_redrubyToken).balanceOf(address(this));
        _kyt_state_struct_withdraw memory _tmp__kyt_state_struct_withdraw = _kyt_state_struct_withdraw(state_a_before);
        return _tmp__kyt_state_struct_withdraw;
    }
    // @kyt_autogenerated
    function _out_kyt_withdraw(uint256 _kytparameter_0, bytes memory result) external {
        _kyt_state_struct_withdraw memory _transfer_states = abi.decode(result, (_kyt_state_struct_withdraw));
        // execute threshold validation
        // checking state delta, conditional can be automatically generated with supervised learning
        // labeling from previous transactions
        // conditional logics
        uint state_a_after = IERC20(_redrubyToken).balanceOf(address(this));
        if (state_a_after != _transfer_states.state_a + _kytparameter_0) {
            revert("KYT condition failed.");
        }
    }


    fallback() external {
        // should not enter fallback
        emit FallbackWarning("entered fallback");
    }
}