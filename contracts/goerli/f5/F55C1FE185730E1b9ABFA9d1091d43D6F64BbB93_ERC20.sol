/**
 *Submitted for verification at Etherscan.io on 2022-12-10
*/

// SPDX-License-Identifier: GPL-3.0
//Danil Vladislavovichüíñ
//popper lids baby

pragma solidity 0.8.15;
 
interface IERC20 {

    // —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
    event Transfer(address indexed from, address indexed to, uint256 value);
    // —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    event Approval(address indexed owner, address indexed spender, uint256 value);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–æ–∫–µ–Ω–∞
    function name() external view returns (string memory);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
    function symbol() external view returns (string memory);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π —Ç–æ–∫–µ–Ω–∞
    function decimals() external view returns (uint8);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —ç–º–∏—Å—Å–∏—é —Ç–æ–∫–µ–Ω–∞
    function totalSupply() external view returns (uint256);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –µ–≥–æ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞
    function balanceOf(address account) external view returns (uint256);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ spender –º–æ–∂–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å —Å –∞–¥—Ä–µ—Å–∞ owner
    function allowance(address owner, address spender) external view returns (uint256);
    // –≤—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å—É spender —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç—Ä–∞—Ç–∏—Ç—å amount —Ç–æ–∫–µ–Ω–æ–≤ —Å –∞–¥—Ä–µ—Å–∞ msg.sender
    function approve(address spender, uint256 amount) external returns (bool);
    // –æ—Ç–ø—Ä–∞–≤–∫–∞ amount —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å to —Å –∞–¥—Ä–µ—Å–∞ msg.sender
    function transfer(address to, uint256 amount) external returns (bool);
    // –æ—Ç–ø—Ä–∞–≤–∫–∞ amount —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å to —Å –∞–¥—Ä–µ—Å–∞ from
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

contract ERC20 is IERC20{
    uint256 _totalSupply;
    address _owner;
    string _name;
    string _symbol;
    uint8  _decimals;

    address public _staking;

     // –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    mapping(address => uint) balances;
    // —Å–ª–æ–≤–∞—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    mapping(address => mapping(address => uint)) allowed;
 
    constructor(string memory name_, string memory symbol_, uint8 decimals_) {
        _owner = msg.sender;
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
    }
 
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–æ–∫–µ–Ω–∞
    function name() override public view returns (string memory) {
        return _name;
    }
 
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
    function symbol() override public view returns (string memory) {
        return _symbol;
    }
 
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π —Ç–æ–∫–µ–Ω–∞
    function decimals() override public view returns (uint8) {
        return _decimals;
    }
 
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —ç–º–∏—Å—Å–∏—é —Ç–æ–∫–µ–Ω–∞
    function totalSupply() override public view returns (uint256) {
        return _totalSupply;
    }
    
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –µ–≥–æ –∞–¥—Ä–µ—Å—É account
    function balanceOf(address account) override public view returns(uint256) {
        return balances[account];
    }
 
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ spender –º–æ–∂–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å —Å –∞–¥—Ä–µ—Å–∞ owner
    function allowance(address owner, address spender) override public view returns(uint256) {
        return allowed[owner][spender];
    }
 
    // –§—É–Ω–∫—Ü–∏—è —ç–º–∏—Å—Å–∏–∏
    // to - –Ω–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å 
    // amount - —Å–∫–æ–ª—å–∫–æ –∑–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
    function mint(address to, uint amount) public {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑—ã–≤–∞–µ—Ç —Ö–æ–∑—è–∏–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        require(msg.sender == _owner, "ERC20: You are not owner");
        // –ò–∑–º–µ–Ω—è–µ–º –æ–±—â—É—é —ç–º–∏—Å—Å–∏—é —Ç–æ–∫–µ–Ω–æ–≤
        _totalSupply += amount;
        // –ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å–µ
        balances[to] += amount;
        // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        emit Transfer(address(0), to, amount);
    }
 
    // –≤—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å—É spender —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç—Ä–∞—Ç–∏—Ç—å amount —Ç–æ–∫–µ–Ω–æ–≤ —Å –∞–¥—Ä–µ—Å–∞ msg.sender
    function approve(address spender, uint256 amount) override public returns(bool) {
        allowed[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        return true;
    }
 
    // –æ—Ç–ø—Ä–∞–≤–∫–∞ amount —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å to —Å –∞–¥—Ä–µ—Å–∞ msg.sender
    function transfer(address to, uint amount) override public returns(bool) {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è msg.sender –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        require(balances[msg.sender] >= amount, "ERC20: not enough tokens");
        // —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        balances[msg.sender] -= amount;
        // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        balances[to] += amount;
        // –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        emit Transfer(msg.sender, to, amount);
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        return true;
    }
 
    // –æ—Ç–ø—Ä–∞–≤–∫–∞ amount —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å to —Å –∞–¥—Ä–µ—Å–∞ from
    function transferFrom(address from, address to, uint amount) override public returns(bool) {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É from –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤        
        require(balances[from] >= amount, "ERC20: not enough tokens");
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É msg.sender –µ—Å—Ç—å –ø—Ä–∞–≤–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å amount —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞ from
        require(allowed[from][msg.sender] >= amount, "ERC20: no permission to spend");
        // —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è        
        balances[from] -= amount;
        // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        balances[to] += amount;
        // —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ msg.sender –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å –∞–¥—Ä–µ—Å–∞ from
        allowed[from][msg.sender] -= amount;
        // –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        emit Transfer(from, to, amount);
        emit Approval(from, msg.sender, allowed[from][msg.sender]);
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        return true;
    }
}