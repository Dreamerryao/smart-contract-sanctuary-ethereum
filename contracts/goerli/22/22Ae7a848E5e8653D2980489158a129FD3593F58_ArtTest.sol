// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './IERC165.sol';
import './IERC721.sol';
import './IERC721Metadata.sol';
import './IERC721Receiver.sol';
import './Art.sol';

/**
 * @dev Minimal Purely On-chain ERC721
 */
contract ArtTest is Art
, IERC165 
, IERC721
, IERC721Metadata
{
    constructor () {
        _artist = msg.sender;
    }

    // Permissions ---
    address private _artist;
    modifier onlyArtist(){
        require(_artist == msg.sender, 'a');
        _;
    }

    // Used by martketplaces to allow controlling marketplace information (like banners)
    function owner() public view virtual returns (address) {
        return _artist;
    }

    // Interfaces ---
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public pure override(IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId
            ;
    }

    // Metadata ---
    string private constant _name = 'TestContract';
    string private constant _symbol = 'TEST';

    function name() public pure override(IERC721Metadata) returns (string memory) {
        return _name;
    }

    function symbol() public pure override(IERC721Metadata) returns (string memory) {
        return _symbol;
    }

    // On-chain json must be wrapped in base64 dataUri also: 
    // Reference: https://andyhartnett.medium.com/solidity-tutorial-how-to-store-nft-metadata-and-svgs-on-the-blockchain-6df44314406b

    // Open sea contractURI to get open sea metadata
    // https://docs.opensea.io/docs/contract-level-metadata
    function contractURI() public pure returns (string memory) {
        return generateArt(0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F, 7);
    }

    function tokenURI(uint256 tokenId) public pure override(IERC721Metadata) returns (string memory) {
        return generateArt(tokenId, 3);
    }

    // Token Ownership ---
    uint256 private _totalSupply;
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // uint256 private _projectIdLast;

    /** tokenId => owner */ 
    mapping (uint256 => address) private _owners;
    function ownerOf(uint256 tokenId) public view override(IERC721) returns (address) {
        return _owners[tokenId];
    }

    /** Owner balances */
    mapping(address => uint256) private _balances;
    function balanceOf(address user) public view override(IERC721) returns (uint256) {
        return _balances[user];
    }

    /** Create a new nft
     *
     * tokenId = totalSupply (i.e. new tokenId = length, like a standard array index, first tokenId=0)
     */
    function createToken(uint256 tokenId) public onlyArtist returns (uint256) {

        // nextTokenId = _totalSupply
        require(_totalSupply == tokenId, 'n' );
        _totalSupply++;

        _balances[msg.sender] += 1;
        _owners[tokenId] = msg.sender;
    
        emit Transfer(address(0), msg.sender, tokenId);

        return tokenId;
    }

    // Transfers ---

    function _transfer(address from, address to, uint256 tokenId) internal  {
        // Is from actually the token owner
        require(ownerOf(tokenId) == from, 'o');
        // Does msg.sender have authority over this token
        require(_isApprovedOrOwner(tokenId), 'A');
        // Prevent sending to 0
        require(to != address(0), 't');

        // Clear approvals from the previous owner
        if(_tokenApprovals[tokenId] != address(0)){
            _approve(address(0), tokenId);
        }

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public override(IERC721) {
        _transfer(from, to, tokenId);
        _checkReceiver(from, to, tokenId, '');
    }
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data_) public override(IERC721) {
        _transfer(from, to, tokenId);
        _checkReceiver(from, to, tokenId, data_);
    }
    function transferFrom(address from, address to, uint256 tokenId) public virtual override(IERC721) {
        _transfer(from, to, tokenId);
    }

    function _checkReceiver(address from, address to, uint256 tokenId, bytes memory data_) internal  {
        
        // If contract, confirm is receiver
        uint256 size; 
        assembly { size := extcodesize(to) }
        if (size > 0)
        {
            bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data_);
            require(retval == IERC721Receiver(to).onERC721Received.selector, 'z');
        }
    }

    // Approvals ---

    /** Temporary approval during token transfer */ 
    mapping (uint256 => address) private _tokenApprovals;

    function approve(address to, uint256 tokenId) public override(IERC721) {
        address owner = ownerOf(tokenId);
        require(owner == msg.sender || isApprovedForAll(owner, msg.sender), 'o');

        _approve(to, tokenId);
    }
    function _approve(address to, uint256 tokenId) internal {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    function getApproved(uint256 tokenId) public view override(IERC721) returns (address) {
        return _tokenApprovals[tokenId];
    }

    /** Approval for all (operators approved to transfer tokens on behalf of an owner) */
    mapping (address => mapping (address => bool)) private _operatorApprovals;

    function setApprovalForAll(address operator, bool approved) public virtual override(IERC721) {
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }
    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {
        return _operatorApprovals[owner][operator];
    }
    function _isApprovedOrOwner(uint256 tokenId) internal view  returns (bool) {
        address owner = ownerOf(tokenId);
        return (owner == msg.sender 
            || getApproved(tokenId) == msg.sender 
            || isApprovedForAll(owner, msg.sender));
    }

}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;



abstract contract Art {

    function generateArt(uint rvs, uint kind) public pure returns (string memory) {
        return string(generateArtData(rvs, kind));
    }

    /** 
     * kind: bit 0x01 = base64
     * kind: bit 0x02 = tokenURI/contractURI json
     * kind: bit 0x04 = contractURI (instead of tokenURI)
     * kind: bit 0x08 = kitten (instead of cat)
     * kind: bit 0x10 = breed ticket
     * kind: bit 0x40 = Memory dump
     */
    function generateArtData(uint rvs, uint kind) public pure returns (bytes memory) {
        bytes memory output;
        

        // DataPack 
        bytes memory pDataPackCompressed = hex"";
        

        assembly {
// START ---    

            
// ---- DEBUG ----

// Log calls
// 
// function log_byte(byteValue) {
//     let pOutput := m_get(/*/*VAR_ID_DEBUG*/0x150*/276)
// 
//     let len := mload(pOutput)
//     // store the increased length
//     mstore(pOutput, add(len, 1))
// 
//     // store the byte
//     mstore8(add(pOutput, add(len, 32)), byteValue)
// }
// function log_digit(v, tensValue) {
//     if not(slt(v, tensValue)) { log_byte(add(48/*0*/, smod(sdiv(v, tensValue), 10))) }
// }
// function log_varString(varId) {
//     log_string(m_get(varId))
// }
// function log_string(pEntry) {
//     let sEntry := mload(pEntry)
//     pEntry := add(pEntry,32)
// 
//     log_bytes(pEntry, sEntry)
// }
// function log_bytes(pEntry, sEntry) {
//     for { let k := 0 } slt(k, sEntry) { k := add(k, 1)}{
//         log_byte(mload8(add(pEntry, k)))
//     }
// }
// function log_literal(text) {
//     let pEntry := 0x00
//     mstore(pEntry, text)
//     for { let k := 0 } slt(k, 32) { k := add(k, 1)}{
//         let v := mload8(add(pEntry, k))
//         if iszero(v) { leave }
//         log_byte(v)
//     }
// }
// function log_int(v) {
//     log_digit(v, 100000000)
//     log_digit(v, 10000000)
//     log_digit(v, 1000000)
//     log_digit(v, 100000)
//     log_digit(v, 10000)
//     log_digit(v, 1000)
//     log_digit(v, 100)
//     log_digit(v, 10)
//     log_digit(v, 1)
// }
// function log_gas() {
//     log_literal('\n GAS=\x00')
//     log_int(gas())
// }
// function log_wasteRemainingGas() {
//     log_literal('\n# wasteRemainingGas\x00')
// 
//     for { let k := 0 } sgt(gas(), 100000) { k := add(k, 1)}{
//         if iszero(smod(k,25000)){
//             log_gas()
//             log_literal(' :: iterations: \x00')
//             log_int(k)
//         }
//     }
//     log_gas()
// }

// ---- DEBUG END ----

// ---- YUL CODE ----
function mload8(addr) -> result {
    // yul: result := shr(0xF8, mload(addr)) leave 
    result := shr(0xF8, mload(addr)) leave 

}
function m_varAddress(varId) -> result {
    // if !Number.isInteger(varId) { throw new Error(`m_varAddress: varId is not an integer: ${varId}`) }
    result := add(mload(/*PP_VARS*/0x80), mul(varId, 32)) leave 

}
function m_get(varId) -> result {
    result := mload(m_varAddress(varId)) leave 

}
function m_set(varId, value) {
    mstore(m_varAddress(varId), value)
}


// ---- Utility Methods ----
function op_isKittenOutput(setVarId, _ignore) {
    m_set(setVarId, hasKindFlag(/*KIND_FLAG_KITTEN*/0x08))
}
function op_getRvsValue(setVarId, varId) {
    // rvs[0] = most signficant byte, which is the left most (smallest index in memory)
    m_set(setVarId, mload8(add(m_get(/*VAR_ID_RVS*/0x120), m_get(varId))))
}

function op_getBreedIndex(setVarId, breedsVarId, rvsBreedVarId, oddsFieldIndex) {
    let pBreedsArray := m_get(breedsVarId)
    let len := mload(pBreedsArray)

    let rv := m_get(rvsBreedVarId)

    for { let i := 0 }  slt(i, len) {  i := add(i, 1) } {
        let pBreedArray := mload(add(pBreedsArray, mul(32, add(i, 1))))
        let pOdds := add(pBreedArray, mul(32, add(oddsFieldIndex, 1)))
        let odds := mload(pOdds)
        rv := sub(rv, odds)
        if slt(rv, 0) {
            m_set(setVarId, i)
            leave
        }
    }
    m_set(setVarId, 0)
}

// Commands
function hasKindFlag(kindFlag) -> result {
    result := iszero(iszero(and(m_get(/*VAR_ID_KIND*/0x160), kindFlag))) leave 

}

function op_command_writeAttributeValue(setVarId, keyVarId, valueVarId, betweenKeyValueTemplateVarId, afterAttributeTemplateVarId) {
    if iszero(hasKindFlag(/*KIND_FLAG_JSON*/0x02)) {
        // Skip json
        leave
    }
    write_dataPackString(m_get(keyVarId))
    write_dataPackString(m_get(betweenKeyValueTemplateVarId))
    write_dataPackString(m_get(valueVarId))
    write_dataPackString(m_get(afterAttributeTemplateVarId))
}

// templateKind: 1=token,2=contract
function op_command_writeTemplate(templateVarId, templateKindVarId) {
    if iszero(hasKindFlag(/*KIND_FLAG_JSON*/0x02)) {
        // Skip json
        leave
    }

    let isWritingContract := hasKindFlag(/*KIND_FLAG_CONTRACT*/0x04)
    let templateKind := m_get(templateKindVarId)

    if and(isWritingContract, eq(templateKind, 1)) {
        // Skip token template if generating contract
        leave
    }
    if and(not(isWritingContract), eq(templateKind, 2)) {
        // Skip token template if generating contract
        leave
    }
    write_dataPackString(m_get(templateVarId))
}

// Arrays
function op_mem_create(setVarId, countVarId) {
    let count := m_get(countVarId)
    let pMem := allocate(mul(add(count, 1), 32))
    // mem: [memLength], [0:count,...]
    let pArray := add(pMem, 32)
    mstore(pArray, count)

    m_set(setVarId, pArray)
}
function op_mem_setItem(arrayVarId, itemIndex, valueVarId) {
    let pArray := m_get(arrayVarId)
    let pItem := add(pArray, mul(32, add(itemIndex, 1)))
    let v := m_get(valueVarId)
    mstore(pItem, v)
}
function op_mem_getItem(setVarId, arrayVarId, itemIndex) {
    let pArray := m_get(arrayVarId)
    let pItem := add(pArray, mul(32, add(itemIndex, 1)))
    m_set(setVarId, mload(pItem))
}
function op_mem_getLength(setVarId, arrayVarId) {
    let pArray := m_get(arrayVarId)
    // array[0]: length
    m_set(setVarId, mload(pArray))
}

// Output
function write_byte_inner(byteValue) {
    let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)

    let len := mload(pOutput)

    // store the byte
    mstore8(add(add(pOutput, 32), len), byteValue)

    // store the increased length
    mstore(pOutput, add(len, 1))
}


function enableBase64() {
    let pOutputQueue := allocate(1)
    mstore(/*PP_OUTPUT_QUEUE*/0x00, pOutputQueue)
    // Reset length to 0
    mstore(pOutputQueue, 0)
    // Clean new memory
    mstore(add(pOutputQueue, 32), 0)
}
function disableBase64() {
    write_flush()

    // NULL if not enabled
    mstore(/*PP_OUTPUT_QUEUE*/0x00, 0)
}

function write_flush() {
    let pOutputQueue := mload(/*PP_OUTPUT_QUEUE*/0x00)
    if pOutputQueue {

        let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)
        let len := mload(pOutputQueue)
        write_base64Queue(pOutputQueue)

        switch len 
            case 0 {
                // Backup 4 bytes (entire base64 write)
                mstore(pOutput, sub(mload(pOutput), 4))
            }
            case 1 {
                // Backup and write padding bytes
                mstore(pOutput, sub(mload(pOutput), 2))
                write_byte_inner(0x3D/*=*/)
                write_byte_inner(0x3D/*=*/)
                leave
            }
            case 2 {
                // Backup and write padding bytes
                mstore(pOutput, sub(mload(pOutput), 1))
                write_byte_inner(0x3D/*=*/)
                leave
            }
    }
}

function getBase64Symbol(value) -> result {
    value := and(value, 0x3F)
    if slt(value, 26) {
        result := add(value, 65/*A=65-0*/) leave 

    }
    if slt(value, 52) {
        result := add(value, 71/*a=97-26*/) leave 

    }
    if slt(value, 62) {
        result := sub(value, 4/*0=48-52*/) leave 

    }
    if eq(value, 62) {
        result := 43/*+*/ leave 

    }
    if eq(value, 63) {
        result := 47/* / */ leave 

    }
}

function write_base64Queue(pOutputQueue) {

    let bits := mload(add(pOutputQueue, 32))

    // Reset queue
    mstore(pOutputQueue, 0)
    mstore(add(pOutputQueue, 32), 0)

    // console.log('write_byte - base64 queue full', { bits })

    // write value at output
    let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)
    let outputLength := mload(pOutput)

    // // ....  00000000 11111111  11111111 11111111
    // // ....  00000000 xxxxxxxx  xxxxxxxx xx111111 => [35]
    // mstore8(add(pOutput, add(outputLength, 35/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000011  11111111 11111111
    // bits := shr(6, bits)
    // // ....  00000000 000000xx  xxxxxxxx xx111111 => [34]
    // mstore8(add(pOutput, add(outputLength, 34/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000000  00001111 11111111
    // bits := shr(6, bits)
    // // ....  00000000 00000000  0000xxxx xx111111 => [33]
    // mstore8(add(pOutput, add(outputLength, 33/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000000  00000000 00111111
    // bits := shr(6, bits)
    // // ....  00000000 00000000  00000000 xx111111 => [32]
    // mstore8(add(pOutput, add(outputLength, 32/*32+[0,1,2,3]*/)), and(bits, 0x3F))

    let pRightmost := add(add(pOutput, 35/*32+[3,2,1,0]*/), outputLength)
    for { let i := 0 }  slt(i, 4) {  i := add(i, 1) } {
        // ....  00000000 xxxxxxxx  xxxxxxxx xx111111 => 32+[3,2,1,0]
        mstore8(sub(pRightmost, i), getBase64Symbol(bits))
        // ....  00000000 00000011  11111111 11111111
        bits := shr(6, bits)
    }

    mstore(pOutput, add(outputLength, 4))
}

function write_byte(byteValue) {
    let pOutputQueue := mload(/*PP_OUTPUT_QUEUE*/0x00)
    if pOutputQueue {
        let queueLength := mload(pOutputQueue)

        // Store in the rightmost location of the 32 slot
        //          [61]     [62]      [63]     |
        // ........ AAAAAAAA BBBBBBBB  CCCCCCCC |
        // ........ aaaaaa aabbbb bbbbcc cccccc |
        mstore8(add(add(pOutputQueue, 61/*32+32-3*/), queueLength), byteValue)
        queueLength := add(queueLength, 1)
        mstore(pOutputQueue, queueLength)

        // 3*bytes is full -> write 4*base64
        if eq(queueLength, 3) {
            queueLength := 0
            write_base64Queue(pOutputQueue)
        }

        leave
    }

    write_byte_inner(byteValue)
}

function write_nullString(pNullTerminatedString) {
    for {  }  true {  pNullTerminatedString := add(pNullTerminatedString, 1) } {
        let x := mload8(pNullTerminatedString)
        if iszero(x) { leave }

        write_byte(x)
    }
}

function write_dataPackString(v) {
    let pEntry := add(m_get(/*VAR_ID_DATA_PACK_STRINGS*/0x131), v)
    write_nullString(pEntry)
}

function write_digit(v, tensValue) {
    if iszero(slt(v, tensValue)) { write_byte(add(48/*0*/, smod(sdiv(v, tensValue), 10))) }
}
function write_int(valueVarId) {
    let v := m_get(valueVarId)

    // if !Number.isFinite(v) {
    //     console.error(`intToString: not a number`, { v })
    //     throw new Error(`intToString: not a number ${v}`)
    // }
    // if !Number.isInteger(v) {
    //     console.error(`intToString: not an integer`, { v })
    //     throw new Error(`intToString: not an integer ${v}`)
    // }

    if eq(v, 0) {
        write_byte(48/*0*/)
        leave
    }

    if slt(v, 0) {
        write_byte(45/*-*/)
        v := sub(0, v)
    }

    write_digit(v, 100000)
    write_digit(v, 10000)
    write_digit(v, 1000)
    write_digit(v, 100)
    write_digit(v, 10)
    write_digit(v, 1)
}

function write_drawInstruction(aByte, bVarId, cByte, dVarId) {
    write_byte(aByte)
    write_int(bVarId)
    write_byte(cByte)
    write_int(dVarId)
}


// ---- Decompress Data Pack ----

function appendUsingTable(pTarget, isControlByte, b) {
    let sTarget := mload(pTarget)
    pTarget := add(pTarget, 32)

    if isControlByte {
        let pSource := m_get(b)
        let sSource := mload(pSource)
        pSource := add(pSource, 32)


        for { let iSource := 0 }  slt(iSource, sSource) {  } {
            let piTarget := add(pTarget, sTarget)
            let piSource := add(pSource, iSource)
            mstore(piTarget,mload(piSource))

            let sCopied := sub(sSource, iSource)
            if sgt(sCopied, 32) {
                sCopied := 32
            }

            sTarget := add(sTarget, sCopied)
            iSource := add(iSource, sCopied)
        }
    }
    if iszero(isControlByte) {
        mstore8(add(pTarget, sTarget), b)
        sTarget := add(sTarget, 1)
    }

    mstore(sub(pTarget, 32), sTarget)
}

function run_decompressDataPack(_pDataPackCompressed) {
    // Skip length
    _pDataPackCompressed := add(_pDataPackCompressed, 32)

    let pDataPack := allocate(/*LENGTH_DATA_PACK_ALL*/23599)
    // Reset length to 0
    mstore(pDataPack, 0)

    // Assign pDataPack vars
    m_set(/*VAR_ID_DATA_PACK_ALL*/0x130, pDataPack)
    m_set(/*VAR_ID_DATA_PACK_STRINGS*/0x131, add(add(32, pDataPack), /*INDEX_DATA_PACK_STRINGS*/0))
    m_set(/*VAR_ID_DATA_PACK_OPS*/0x132, add(add(32, pDataPack), /*INDEX_DATA_PACK_OPS*/10866))


    // Decompress
    /**
     * mode := 0: Loading data
     * mode := 1: Loading table
     * mode >= 2: Loading table entry
     */
    let mode := 1
    let isControlByte := 0

    // Record ff00 entry
    let iCurrentTableEntry := 1
    let pEntry := allocate(1)
    mstore8(add(pEntry, 32), 0xff)
    m_set(0, pEntry)

    for { let i := 0 }  slt(i, /*LENGTH_DATA_PACK_COMPRESSED*/15949) {  i := add(i, 1) } {
        let b := mload8(add(_pDataPackCompressed, i))
        if and(eq(b, 0xFF), iszero(isControlByte)) {
            isControlByte := 1
            mode := sub(mode, 1)
            continue
        }

        if sgt(mode, 1) {
            // Continue loading table entry

            appendUsingTable(pEntry, isControlByte, b)
            isControlByte := 0

            // Use up mode item
            mode := sub(mode, 1)
            if eq(mode, 1) {
                // Done
                moveFreePointerToEnd(pEntry)

                // Store pEntry in var
                m_set(iCurrentTableEntry, pEntry)

                // Next table entry
                iCurrentTableEntry := add(iCurrentTableEntry, 1)
            }
            continue
        }
        if sgt(mode, 0) {

            if iszero(b) {
                // Begin content
                mode := 0
                // Skip content length (4 bytes)
                i := add(i, 4)
                continue
            }

            // Start loading table entry by recording the length to load
            mode := add(mode, b)
            // Prepare next memory
            pEntry := allocate(0)

            continue
        }

        appendUsingTable(pDataPack, isControlByte, b)
        isControlByte := 0
    }

    // Move free memory pointer past data pack + size
    moveFreePointerToEnd(pDataPack)
}

// ---- Run Data Pack Ops ----

function run_DataPackOps(pDataPackOps) {
    for { let iByte := 0 }  slt(iByte, /*LENGTH_DATA_PACK_OPS*/12733) {  } {
        let countBytesUsed := op_byteCall(pDataPackOps, iByte)
        iByte := add(iByte, countBytesUsed)
    }
}


    

function op_byteCall(pDataPackOps, iByteStart) -> result {

    let opId := mload8(add(pDataPackOps, iByteStart))
    
    
    
    let argByte_1 := mload8(add(pDataPackOps, add(iByteStart, 1)))
    
    switch opId 
        case 1 { /*op_write_string*/write_dataPackString(m_get(argByte_1)) result := 2  leave }

        case 2 { /*op_write_var*/write_int(argByte_1) result := 2  leave }

    let argByte_2 := mload8(add(pDataPackOps, add(iByteStart, 2)))
    
    switch opId 
        case 3 { /*op_ceil_100*/m_set(argByte_1, sdiv(add(m_get(argByte_2), 99), 100)) result := 3  leave }

        case 4 { /*op_copy*/m_set(argByte_1, m_get(argByte_2)) result := 3  leave }

        case 5 { /*op_getArrayLength*/op_mem_getLength(argByte_1, argByte_2) result := 3  leave }

        case 6 { /*op_getLength*/op_mem_getLength(argByte_1, argByte_2) result := 3  leave }

        case 7 { op_getRvsValue(argByte_1,argByte_2) result := 3  leave }

        case 8 { op_isKittenOutput(argByte_1,argByte_2) result := 3  leave }

        case 9 { /*op_loadArray_create*/op_mem_create(argByte_1, argByte_2) result := 3  leave }

        case 10 { /*op_loadObject_create*/op_mem_create(argByte_1, argByte_2) result := 3  leave }

        case 11 { /*op_loadUint8*/m_set(argByte_1, argByte_2) result := 3  leave }

        case 12 { /*op_unaryNegative*/m_set(argByte_1, sub(0, m_get(argByte_2))) result := 3  leave }

        case 13 { /*op_unaryNot*/m_set(argByte_1, iszero(m_get(argByte_2))) result := 3  leave }

        case 14 { /*op_write_text*/write_dataPackString(add(mul(argByte_1, 256), argByte_2)) result := 3  leave }

        case 15 { /*op_write_vertex*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
             result := 3  leave }

    let argByte_3 := mload8(add(pDataPackOps, add(iByteStart, 3)))
    
    switch opId 
        case 16 { /*op_average*/m_set(argByte_1, sdiv(add(m_get(argByte_2), m_get(argByte_3)), 2)) result := 4  leave }

        case 17 { /*op_bitwiseAnd*/m_set(argByte_1, and(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 18 { /*op_bitwiseOr*/m_set(argByte_1, or(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 19 { /*op_command_writeTemplate*/op_command_writeTemplate(argByte_2,argByte_3) result := 4  leave }

        case 20 { /*op_comparisonGreater*/m_set(argByte_1, sgt(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 21 { /*op_comparisonLess*/m_set(argByte_1, slt(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 22 { /*op_comparisonLessEqual*/m_set(argByte_1, not(sgt(m_get(argByte_2), m_get(argByte_3)))) result := 4  leave }

        case 23 { /*op_getArrayItem*/op_mem_getItem(argByte_1, argByte_2, m_get(argByte_3)) result := 4  leave }

        case 24 { /*op_getObjectField*/op_mem_getItem(argByte_1, argByte_2, argByte_3) result := 4  leave }

        case 25 { /*op_loadArray_setItem*/op_mem_setItem(argByte_1, m_get(argByte_2), argByte_3) result := 4  leave }

        case 26 { /*op_loadObject_setItem*/op_mem_setItem(argByte_1, argByte_2, argByte_3) result := 4  leave }

        case 27 { /*op_loadUint16*/m_set(argByte_1, add(mul(argByte_2, 256), argByte_3)) result := 4  leave }

        case 28 { /*op_logicalAnd*/m_set(argByte_1, and(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 29 { /*op_mathAdd*/m_set(argByte_1, add(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 30 { /*op_mathDiv*/m_set(argByte_1, sdiv(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 31 { /*op_mathMod*/m_set(argByte_1, smod(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 32 { /*op_mathMul*/m_set(argByte_1, mul(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 33 { /*op_mathSub*/m_set(argByte_1, sub(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

    let argByte_4 := mload8(add(pDataPackOps, add(iByteStart, 4)))
    
    switch opId 
        case 34 { /*op_constrain*/
            let x_ltMin := slt(m_get(argByte_2), m_get(argByte_3))
            let x_gtMax := sgt(m_get(argByte_2), m_get(argByte_4))
            if  x_ltMin  { m_set(argByte_1, m_get(argByte_3)) }
            if  x_gtMax  { m_set(argByte_1, m_get(argByte_4)) }
            if  not(or(x_ltMin, x_gtMax))  { m_set(argByte_1, m_get(argByte_2)) }
             result := 5  leave }

        case 35 { op_getBreedIndex(argByte_1,argByte_2,argByte_3,argByte_4) result := 5  leave }

        case 36 { /*op_lerp_100*/
            let x_a := mul(m_get(argByte_2), sub(100, m_get(argByte_4)))
            let x_b := mul(m_get(argByte_3), m_get(argByte_4))
            let x_result := sdiv(add(x_a, x_b), 100)
            m_set(argByte_1, x_result)
             result := 5  leave }

        case 37 { /*op_ternary*/
            let x_default := iszero(m_get(argByte_2))
            if  not(x_default)  { m_set(argByte_1, m_get(argByte_3)) }
            if  x_default  { m_set(argByte_1, m_get(argByte_4)) }
             result := 5  leave }

        case 38 { /*op_write_line*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            76/*L*/,
            argByte_3,
            44/*,*/,
            argByte_4)
             result := 5  leave }

    let argByte_5 := mload8(add(pDataPackOps, add(iByteStart, 5)))
    
    switch opId 
        case 39 { /*op_command_writeAttributeValue*/op_command_writeAttributeValue(argByte_1, argByte_2, argByte_3, argByte_4, argByte_5) result := 6  leave }

    let argByte_6 := mload8(add(pDataPackOps, add(iByteStart, 6)))
    
    switch opId 
        case 40 { /*op_bezierPoint_100*/
            let x_t100 := m_get(argByte_6)
            let x_tInv := sub(100, x_t100)
            // let x_a :=          mul(mul(mul(m_get(argByte_2),        x_tInv), x_tInv), x_tInv)
            // let x_b :=      mul(mul(mul(mul(m_get(argByte_3), 3),    x_tInv), x_tInv), x_t100)
            // let x_c :=      mul(mul(mul(mul(m_get(argByte_4), 3),    x_tInv), x_t100), x_t100)
            // let x_d :=          mul(mul(mul(m_get(argByte_5),        x_t100), x_t100), x_t100)
            // let x_result := sdiv(add(add(add(x_a), x_b), x_c), x_d), 1000000)
            let x1 :=                          m_get(argByte_2)
            let x2 := add(
            mul(x1, x_tInv),
            mul(mul(m_get(argByte_3), 3),                      x_t100)
            )
            let x3 := add(
            mul(x2, x_tInv),
            mul(mul(mul(m_get(argByte_4), 3),             x_t100), x_t100)
            )
            let x4 := add(
            mul(x3, x_tInv),
            mul(mul(mul(m_get(argByte_5),        x_t100), x_t100), x_t100)
            )
            let x_result := sdiv(x4, 1000000)
            m_set(argByte_1, x_result)
             result := 7  leave }

        case 41 { /*op_write_bezierVertex*/
            write_drawInstruction(
            67/*C*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            32/* */,
            argByte_3,
            44/*,*/,
            argByte_4)
            write_drawInstruction(
            32/* */,
            argByte_5,
            44/*,*/,
            argByte_6)
             result := 7  leave }

    let argByte_7 := mload8(add(pDataPackOps, add(iByteStart, 7)))
    
    let argByte_8 := mload8(add(pDataPackOps, add(iByteStart, 8)))
    
    switch opId 
        case 42 { /*op_write_bezier*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            67/*C*/,
            argByte_3,
            44/*,*/,
            argByte_4)
            write_drawInstruction(
            32/* */,
            argByte_5,
            44/*,*/,
            argByte_6)
            write_drawInstruction(
            32/* */,
            argByte_7,
            44/*,*/,
            argByte_8)
             result := 9  leave }

}
    
            


// ---- Memory Management ----

function allocate(length) -> result {
    let pStart := mload(/*PP_FREE_MEMORY*/0x40)

    // align with uint256
    pStart := mul(sdiv(add(pStart, 31), 32), 32)

    mstore(/*PP_FREE_MEMORY*/0x40, add(add(pStart, 32), length))
    mstore(pStart, length)
    result := pStart leave 

}
function moveFreePointerToEnd(pItem) {
    let length := mload(pItem)
    mstore(/*PP_FREE_MEMORY*/0x40, add(pItem, add(length, 32)))
}

// Align memory start
if slt(mload(/*PP_FREE_MEMORY*/0x40), /*FREE_MEMORY_MIN_START_POS*/0xFFFD0) {
    mstore(/*PP_FREE_MEMORY*/0x40, /*FREE_MEMORY_MIN_START_POS*/0xFFFD0)
}

// Store length at memory start
let pMemoryStart := allocate(0)

// Disable base64 by default
mstore(/*PP_OUTPUT_QUEUE*/0x00, 0)

mstore(/*PP_VARS*/0x80, add(allocate(0x4000), 32))

m_set(/*VAR_ID_RVS*/0x120, add(allocate(32), 32))
mstore(m_get(/*VAR_ID_RVS*/0x120), rvs)


// Store memory start
m_set(/*VAR_ID_MEM_START*/0x110, pMemoryStart)

// Store dataPack vars
m_set(/*VAR_ID_DATA_PACK_COMPRESSED*/0x121, pDataPackCompressed)

// Allocate max size for pOutput
m_set(/*VAR_ID_OUTPUT*/0x140, add(allocate(40000), 32))
// Reset length to 0
mstore(m_get(/*VAR_ID_OUTPUT*/0x140), 0)

// Allocate max size for debug log
m_set(/*VAR_ID_DEBUG*/0x150, add(allocate(40000), 32))
// Reset length to 0
mstore(m_get(/*VAR_ID_DEBUG*/0x150), 0)

// ---- RUN ----


m_set(/*VAR_ID_KIND*/0x160, kind)
if and(hasKindFlag(/*KIND_FLAG_JSON*/0x02), hasKindFlag(/*KIND_FLAG_BASE64*/0x01)) {
    // Write base64 prefix for tokenURI
    let pText := allocate(0)
    mstore(pText, 'data:application/json;base64,\x00')
    write_nullString(pText)
}
if hasKindFlag(/*KIND_FLAG_BASE64*/0x01) {
    enableBase64()
}

run_decompressDataPack(m_get(/*VAR_ID_DATA_PACK_COMPRESSED*/0x121))
run_DataPackOps(m_get(/*VAR_ID_DATA_PACK_OPS*/0x132))
write_flush()
    

// Select output
switch kind
case 64 {
    output := m_get(/*VAR_ID_MEM_START*/0x110)
}
default {
    output := m_get(/*VAR_ID_OUTPUT*/0x140)
}

// Set free memory pointer to after output
mstore(0x40, add(output, add(32, mload(output))))

// --- END ---    
        }
        

        return output;
    }
}