// SPDX-License-Identifier: MIT

pragma solidity ^0.8.12; 

contract fakeData {

    struct tokenData {
        uint tokenId;
        uint level;
        uint xCoordinate;
        uint yCoordinate;
        int elevation;
        int structureSpaceX;
        int structureSpaceY;
        int structureSpaceZ;
        string zoneName;
        string[10] zoneColors;
        string[9] characterSet;
    }

    function tokenHeightmapIndices (uint token) public pure returns(uint8[32][32] memory) {
        return [
    [
        3,
        3,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        4,
        3,
        3,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        4,
        4,
        3,
        3,
        3,
        3
    ],
    [
        3,
        3,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        4,
        3,
        3,
        1,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        4,
        3,
        2,
        2,
        2,
        2
    ],
    [
        3,
        3,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        4,
        3,
        3,
        1,
        0,
        0,
        0,
        0,
        1,
        2,
        3,
        4,
        4,
        5,
        5,
        5,
        4,
        3,
        3,
        2,
        1,
        1,
        1
    ],
    [
        3,
        3,
        2,
        2,
        3,
        3,
        4,
        4,
        4,
        4,
        3,
        2,
        1,
        0,
        0,
        0,
        0,
        1,
        3,
        3,
        4,
        5,
        5,
        6,
        5,
        4,
        3,
        2,
        1,
        1,
        0,
        0
    ],
    [
        3,
        2,
        2,
        2,
        2,
        3,
        4,
        4,
        4,
        4,
        3,
        2,
        1,
        0,
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        5,
        7,
        7,
        5,
        5,
        4,
        2,
        1,
        1,
        0,
        0
    ],
    [
        3,
        2,
        2,
        2,
        2,
        3,
        4,
        4,
        4,
        4,
        3,
        2,
        1,
        1,
        0,
        1,
        2,
        3,
        4,
        5,
        5,
        7,
        7,
        7,
        7,
        5,
        4,
        3,
        2,
        1,
        1,
        0
    ],
    [
        3,
        2,
        2,
        2,
        2,
        3,
        3,
        4,
        4,
        4,
        3,
        2,
        1,
        1,
        1,
        2,
        2,
        4,
        5,
        5,
        6,
        7,
        7,
        7,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        1
    ],
    [
        3,
        2,
        2,
        2,
        2,
        3,
        3,
        4,
        4,
        4,
        3,
        2,
        1,
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        7,
        7,
        7,
        5,
        5,
        4,
        3,
        2,
        2
    ],
    [
        3,
        2,
        2,
        2,
        2,
        3,
        3,
        4,
        4,
        3,
        3,
        2,
        1,
        1,
        1,
        2,
        3,
        4,
        4,
        5,
        5,
        5,
        5,
        6,
        7,
        7,
        6,
        5,
        4,
        4,
        3,
        2
    ],
    [
        3,
        2,
        2,
        1,
        2,
        3,
        3,
        4,
        4,
        3,
        3,
        2,
        1,
        1,
        1,
        1,
        2,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        6,
        7,
        7,
        5,
        5,
        4,
        3,
        2
    ],
    [
        3,
        2,
        1,
        1,
        2,
        3,
        3,
        4,
        4,
        3,
        3,
        2,
        1,
        0,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        5,
        5,
        6,
        5,
        5,
        4,
        3,
        2
    ],
    [
        3,
        2,
        1,
        1,
        2,
        3,
        3,
        4,
        4,
        3,
        3,
        2,
        1,
        0,
        0,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        5,
        5,
        5,
        5,
        4,
        3,
        2
    ],
    [
        2,
        2,
        1,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        2,
        2,
        1,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        4,
        4,
        3
    ],
    [
        2,
        1,
        1,
        1,
        1,
        2,
        2,
        3,
        3,
        2,
        2,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        4,
        4
    ],
    [
        1,
        1,
        0,
        0,
        1,
        1,
        2,
        2,
        2,
        2,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4
    ],
    [
        1,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        2,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        3,
        3,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ],
    [
        1,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        3,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6
    ],
    [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        1,
        2,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        4,
        5,
        5,
        6
    ],
    [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        2,
        3,
        3,
        4,
        5,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        4,
        5,
        5
    ],
    [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        1,
        1,
        1,
        2,
        2,
        3,
        4,
        5,
        5,
        5,
        4,
        4,
        3,
        3,
        3,
        3,
        4,
        5
    ],
    [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        1,
        1,
        1,
        1,
        2,
        3,
        4,
        4,
        4,
        4,
        3,
        2,
        2,
        2,
        2,
        3,
        4
    ],
    [
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        2,
        1,
        0,
        0,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        2,
        1,
        1,
        1,
        2,
        2,
        3
    ],
    [
        5,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        2,
        1,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        1,
        1,
        0,
        0,
        1,
        2,
        3
    ],
    [
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        7,
        7,
        8,
        8,
        7,
        6,
        5,
        3,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        2,
        3
    ],
    [
        4,
        4,
        4,
        4,
        4,
        5,
        5,
        7,
        8,
        8,
        8,
        8,
        8,
        5,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        2,
        2,
        3
    ],
    [
        3,
        3,
        3,
        3,
        3,
        4,
        5,
        7,
        8,
        8,
        8,
        8,
        8,
        5,
        4,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        3
    ],
    [
        2,
        2,
        2,
        2,
        2,
        3,
        4,
        5,
        7,
        8,
        8,
        8,
        7,
        5,
        4,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        2,
        3,
        3,
        4,
        4
    ],
    [
        2,
        1,
        1,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        6,
        6,
        5,
        5,
        4,
        2,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        3,
        3,
        3,
        4,
        4,
        4
    ],
    [
        2,
        1,
        0,
        0,
        0,
        1,
        2,
        3,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        3,
        3,
        4,
        4,
        4,
        4
    ],
    [
        2,
        2,
        1,
        0,
        0,
        1,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3
    ],
    [
        3,
        2,
        2,
        1,
        0,
        0,
        1,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    [
        4,
        3,
        2,
        2,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2
    ]
];
    }

    function tokenSupplementalData (uint token) public pure returns(tokenData memory) {

    tokenData memory tSD = tokenData({
    tokenId: 0,
    level: 14,
    xCoordinate: 16,
    yCoordinate: 12,
    elevation: 4,
    structureSpaceX: 3388928,
    structureSpaceY: 2541696,
    structureSpaceZ: 21395516,
    zoneName: "Holo",
    zoneColors: [
        "#fc5602",
        "#f2d601",
        "#1182c0",
        "#fb71c9",
        "#761fa5",
        "#256006",
        "#0577bd",
        "#fcdf02",
        "#fc6e03",
        "#eee8de"
    ],
    characterSet: [
        unicode"═",
        unicode"╚",
        unicode"╔",
        unicode"⾂",
        unicode"⾂",
        unicode"⾂",
        unicode"═",
        unicode"╝",
        unicode"═"
    ]
    });
    return tSD;
    }

    function tokenToPlacement (uint token) public pure returns(uint256) {
        uint256 placement = 8748;
        return placement;
    }

    function characterSet (uint256 placement, uint256 seed) public pure returns(string[9] memory, uint256, uint256, uint256) {
        string[9] memory charset = [
        unicode"═",
        unicode"╚",
        unicode"╔",
        unicode"⾂",
        unicode"⾂",
        unicode"⾂",
        unicode"═",
        unicode"╝",
        unicode"═"
    ];
        uint256 fontnum = 1;
        uint256 fontsize = 20;
        uint256 index = 21;
        return (charset, fontnum, fontsize, index);
}

    function font (uint256 id) public pure returns(string memory) {
        string memory fontcode = "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eT9CdJtYWZp0QkJ0mllYm3RCAakNDAGHAQL+uhNjGRcB2AkFDBt5Uf7fFBICAAwL/cUQDgIIEA79vgwLAfEUEv3WCQUBthkX/hICAUYTFA0M/nkB+eUbeQAAAB4BbgABAAAAAAAAAC8AAAABAAAAAAABABYALwABAAAAAAACAAcARQABAAAAAAADADsATAABAAAAAAAEAB4AhwABAAAAAAAFAA0ApQABAAAAAAAGABwAsgABAAAAAAAHACIAzgABAAAAAAAIABUA8AABAAAAAAAJABQBBQABAAAAAAAKACEBGQABAAAAAAALAB8BOgABAAAAAAAMAB4BWQABAAAAAAANAUsBdwABAAAAAAAOABoCwgADAAEECQAAAF4C3AADAAEECQABACwDOgADAAEECQACAA4DZgADAAEECQADAHYDdAADAAEECQAEADwD6gADAAEECQAFABoEJgADAAEECQAGADgEQAADAAEECQAHAEQEeAADAAEECQAIACoEvAADAAEECQAJACgE5gADAAEECQAKAEIFDgADAAEECQALAD4FUAADAAEECQAMADwFjgADAAEECQANApYFygADAAEECQAOADQIYENvcHlyaWdodCAyMDE1IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuTm90byBNYXRoY2FzdGxlcyBSZW1peFJlZ3VsYXJGb250Rm9yZ2UgMi4wIDogTm90byBNYXRoY2FzdGxlcyBSZW1peCBSZWd1bGFyIDogMTEtMTEtMjAyMU5vdG8gTWF0aGNhc3RsZXMgUmVtaXggUmVndWxhclZlcnNpb24gMi4wMDZOb3RvTWF0aGNhc3RsZXNSZW1peC1SZWd1bGFyTm90byBpcyBhIHRyYWRlbWFyayBvZiBHb29nbGUgTExDLk1vbm90eXBlIEltYWdpbmcgSW5jLk1vbm90eXBlIERlc2lnbiBUZWFtRGVzaWduZWQgYnkgTW9ub3R5cGUgZGVzaWduIHRlYW0uaHR0cDovL3d3dy5nb29nbGUuY29tL2dldC9ub3RvL2h0dHA6Ly93d3cubW9ub3R5cGUuY29tL3N0dWRpb1RoaXMgRm9udCBTb2Z0d2FyZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgU0lMIE9wZW4gRm9udCBMaWNlbnNlLCBWZXJzaW9uIDEuMS4gVGhpcyBGb250IFNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIFNJTCBPcGVuIEZvbnQgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlLCBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgZ292ZXJuaW5nIHlvdXIgdXNlIG9mIHRoaXMgRm9udCBTb2Z0d2FyZS5odHRwOi8vc2NyaXB0cy5zaWwub3JnL09GTABDAG8AcAB5AHIAaQBnAGgAdAAgADIAMAAxADUAIABHAG8AbwBnAGwAZQAgAEwATABDAC4AIABBAGwAbAAgAFIAaQBnAGgAdABzACAAUgBlAHMAZQByAHYAZQBkAC4ATgBvAHQAbwAgAE0AYQB0AGgAYwBhAHMAdABsAGUAcwAgAFIAZQBtAGkAeABSAGUAZwB1AGwAYQByAEYAbwBuAHQARgBvAHIAZwBlACAAMgAuADAAIAA6ACAATgBvAHQAbwAgAE0AYQB0AGgAYwBhAHMAdABsAGUAcwAgAFIAZQBtAGkAeAAgAFIAZQBnAHUAbABhAHIAIAA6ACAAMQAxAC0AMQAxAC0AMgAwADIAMQBOAG8AdABvACAATQBhAHQAaABjAGEAcwB0AGwAZQBzACAAUgBlAG0AaQB4ACAAUgBlAGcAdQBsAGEAcgBWAGUAcgBzAGkAbwBuACAAMgAuADAAMAA2AE4AbwB0AG8ATQBhAHQAaABjAGEAcwB0AGwAZQBzAFIAZQBtAGkAeAAtAFIAZQBnAHUAbABhAHIATgBvAHQAbwAgAGkAcwAgAGEAIAB0AHIAYQBkAGUAbQBhAHIAawAgAG8AZgAgAEcAbwBvAGcAbABlACAATABMAEMALgBNAG8AbgBvAHQAeQBwAGUAIABJAG0AYQBnAGkAbgBnACAASQBuAGMALgBNAG8AbgBvAHQAeQBwAGUAIABEAGUAcwBpAGcAbgAgAFQAZQBhAG0ARABlAHMAaQBnAG4AZQBkACAAYgB5ACAATQBvAG4AbwB0AHkAcABlACAAZABlAHMAaQBnAG4AIAB0AGUAYQBtAC4AaAB0AHQAcAA6AC8ALwB3AHcAdwAuAGcAbwBvAGcAbABlAC4AYwBvAG0ALwBnAGUAdAAvAG4AbwB0AG8ALwBoAHQAdABwADoALwAvAHcAdwB3AC4AbQBvAG4AbwB0AHkAcABlAC4AYwBvAG0ALwBzAHQAdQBkAGkAbwBUAGgAaQBzACAARgBvAG4AdAAgAFMAbwBmAHQAdwBhAHIAZQAgAGkAcwAgAGwAaQBjAGUAbgBzAGUAZAAgAHUAbgBkAGUAcgAgAHQAaABlACAAUwBJAEwAIABPAHAAZQBuACAARgBvAG4AdAAgAEwAaQBjAGUAbgBzAGUALAAgAFYAZQByAHMAaQBvAG4AIAAxAC4AMQAuACAAVABoAGkAcwAgAEYAbwBuAHQAIABTAG8AZgB0AHcAYQByAGUAIABpAHMAIABkAGkAcwB0AHIAaQBiAHUAdABlAGQAIABvAG4AIABhAG4AIAAiAEEAUwAgAEkAUwAiACAAQgBBAFMASQBTACwAIABXAEkAVABIAE8AVQBUACAAVwBBAFIAUgBBAE4AVABJAEUAUwAgAE8AUgAgAEMATwBOAEQASQBUAEkATwBOAFMAIABPAEYAIABBAE4AWQAgAEsASQBOAEQALAAgAGUAaQB0AGgAZQByACAAZQB4AHAAcgBlAHMAcwAgAG8AcgAgAGkAbQBwAGwAaQBlAGQALgAgAFMAZQBlACAAdABoAGUAIABTAEkATAAgAE8AcABlAG4AIABGAG8AbgB0ACAATABpAGMAZQBuAHMAZQAgAGYAbwByACAAdABoAGUAIABzAHAAZQBjAGkAZgBpAGMAIABsAGEAbgBnAHUAYQBnAGUALAAgAHAAZQByAG0AaQBzAHMAaQBvAG4AcwAgAGEAbgBkACAAbABpAG0AaQB0AGEAdABpAG8AbgBzACAAZwBvAHYAZQByAG4AaQBuAGcAIAB5AG8AdQByACAAdQBzAGUAIABvAGYAIAB0AGgAaQBzACAARgBvAG4AdAAgAFMAbwBmAHQAdwBhAHIAZQAuAGgAdAB0AHAAOgAvAC8AcwBjAHIAaQBwAHQAcwAuAHMAaQBsAC4AbwByAGcALwBPAEYATAAAAAMAAAAAAAD/nAAyAAAAAAAAAAAAAAAAAAAAAAAAAAA=";

        return fontcode;
    }
}