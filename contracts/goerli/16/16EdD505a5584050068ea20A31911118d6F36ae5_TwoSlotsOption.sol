// SPDX-License-Identifier: CC-BY-NC-ND-4.0 (Creative Commons Attribution Non Commercial No Derivatives 4.0 International)
/* solhint-disable var-name-mixedcase */
/* solhint-disable func-param-name-mixedcase */
pragma solidity ^0.8.20;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {Pausable} from "@openzeppelin/contracts/security/Pausable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {SlotsOptionHelper} from "./lib/SlotsOptionHelper.sol";
import {IPyth} from "@pythnetwork/IPyth.sol";
import {PythStructs} from "@pythnetwork/PythStructs.sol";

/// @title TwoSlotsOption
/// @author @fr0xMaster & @gregoryguillou
/// @notice Mutual Slots implementation of Two Slots Option contract.

// TODO: PROTECT FUNCTION THAT REQUIRE PAUSABLE VERIFICATION !!

contract TwoSlotsOption is Ownable, Pausable {
    using SafeERC20 for IERC20;

    IPyth internal _pyth;
    bytes32 public PYTH_PRICE_ID;
    address public FEES_COLLECTOR; // address who receives fees generated by contract activity
    address public TOKEN; // Token used on the contract to bet.
    uint256 public PRECISION_FACTOR = 1e18;
    uint32 public FEE_DENOMINATOR; // denominator to calculate fees
    uint32 public FEE_COLLECTOR_NUMERATOR; // numerator to calculate fees for collector
    uint32 public FEE_CREATOR_NUMERATOR; // numerator to calculate fees for creator
    uint32 public FEE_RESOLVER_NUMERATOR; // numerator to calculate fees for resolver
    uint256 public MAX_FEE_CREATOR;
    uint256 public MAX_FEE_RESOLVER;
    uint256 public MIN_BET; // minimum amount to bet - to avoid spam attack & underflow
    uint256 public EPOCH; // duration of an epoch expressed in seconds
    uint256 public LAST_OPEN_CONTEST_ID; // ID of last contest open.
    mapping(uint256 => Contest) internal _contests; // mapping of all contests formatted as struct.

    constructor(
        address _PYTH_CONTRACT,
        bytes32 _PYTH_PRICE_ID,
        address _FEES_COLLECTOR,
        address _TOKEN,
        uint32 _FEE_DENOMINATOR,
        uint32 _FEE_COLLECTOR_NUMERATOR,
        uint32 _FEE_CREATOR_NUMERATOR,
        uint32 _FEE_RESOLVER_NUMERATOR,
        uint256 _MAX_FEE_CREATOR,
        uint256 _MAX_FEE_RESOLVER,
        uint256 _MIN_BET,
        uint256 _EPOCH
    ) {
        _pyth = IPyth(_PYTH_CONTRACT);
        PYTH_PRICE_ID = _PYTH_PRICE_ID;
        FEES_COLLECTOR = _FEES_COLLECTOR;
        TOKEN = _TOKEN;
        FEE_DENOMINATOR = _FEE_DENOMINATOR;
        FEE_COLLECTOR_NUMERATOR = _FEE_COLLECTOR_NUMERATOR;
        FEE_CREATOR_NUMERATOR = _FEE_CREATOR_NUMERATOR;
        FEE_RESOLVER_NUMERATOR = _FEE_RESOLVER_NUMERATOR;
        MAX_FEE_CREATOR = _MAX_FEE_CREATOR;
        MAX_FEE_RESOLVER = _MAX_FEE_RESOLVER;
        MIN_BET = _MIN_BET;
        EPOCH = _EPOCH;
    }

    enum SlotType {
        LESS,
        MORE
    }
    enum WinningSlot {
        UNDEFINED,
        LESS,
        MORE
    }

    struct Contest {
        SlotsOptionHelper.ContestStatus contestStatus; // Status of the current Contest
        uint256 startedAt; // Unix timestamp at contest creation
        uint256 closeAt; // Unix timestamp at deposit is closed
        uint256 maturityAt; // Unix timestamp at contest maturity
        address creator; // Address who created contest. Will receive a share of the fees generated.
        address resolver; // Address who resolve contest. Will receive a share of the fees generated.
        int64 startingPrice; // Token price at contest creation
        int64 maturityPrice; // Token price at contest maturity
        WinningSlot winningSlot; // Defines the winning slot once the Contest is resolved
        SlotsOptionHelper.Slot slotLess;
        SlotsOptionHelper.Slot slotMore;
    }

    struct ContestFinancialData {
        uint256 totalGrossBet;
        uint256 netToShareBetweenWinners;
        SlotsOptionHelper.Fees fees;
        uint256 oddLess;
        string readableOddLess;
        uint256 oddMore;
        string readableOddMore;
    }

    error ContestIsAlreadyOpen(uint256 lastOpenContestID);
    error ContestNotOpen();
    error ContestNotClose();
    error ContestNotRefundable();
    error ContestNotResolved();
    error UserNoNeedRefund();
    error UserNoNeedSettlement();
    error BettingPeriodExpired(uint256 actualTimestamp, uint256 closeAt);
    error ContestNotMature(uint256 actualTimestamp, uint256 maturityAt);
    error InsufficientBetAmount(uint256 amountBet, uint256 minBet);
    error InsufficientBalance(uint256 userBalance, uint256 amountBet);
    error InsufficientAllowance(uint256 contractAllowance, uint256 amountBet);
    error InsufficientAmountInSlots(uint256 amountInSlotLess, uint256 amountInSlotMore, uint256 minRequired);
    error PriceNotAvailable();

    modifier isCreateable() {
        if (
            _contests[LAST_OPEN_CONTEST_ID].contestStatus == SlotsOptionHelper.ContestStatus.OPEN
                && block.timestamp < _contests[LAST_OPEN_CONTEST_ID].closeAt
        ) {
            revert ContestIsAlreadyOpen({lastOpenContestID: LAST_OPEN_CONTEST_ID});
        }
        _;
    }

    modifier isContestOpen(uint256 _contestID) {
        if (_contests[_contestID].contestStatus != SlotsOptionHelper.ContestStatus.OPEN) {
            revert ContestNotOpen();
        }
        _;
    }

    modifier isContestInBettingPeriod(uint256 _contestID) {
        if (block.timestamp >= _contests[_contestID].closeAt) {
            revert BettingPeriodExpired({actualTimestamp: block.timestamp, closeAt: _contests[_contestID].closeAt});
        }
        _;
    }

    modifier isMature(uint256 _contestID) {
        if (block.timestamp < _contests[_contestID].maturityAt) {
            revert ContestNotMature({actualTimestamp: block.timestamp, maturityAt: _contests[_contestID].maturityAt});
        }
        _;
    }

    modifier isSufficientBetAmount(uint256 _amountToBet) {
        if (_amountToBet < MIN_BET) {
            revert InsufficientBetAmount({amountBet: _amountToBet, minBet: MIN_BET});
        }
        _;
    }

    modifier isSufficientBalance(uint256 _amountToBet) {
        if (IERC20(TOKEN).balanceOf(msg.sender) < _amountToBet) {
            revert InsufficientBalance({userBalance: IERC20(TOKEN).balanceOf(msg.sender), amountBet: _amountToBet});
        }
        _;
    }

    modifier isSufficientAllowance(uint256 _amountToBet) {
        if (IERC20(TOKEN).allowance(msg.sender, address(this)) < _amountToBet) {
            revert InsufficientAllowance({
                contractAllowance: IERC20(TOKEN).allowance(msg.sender, address(this)),
                amountBet: _amountToBet
            });
        }
        _;
    }

    modifier isSufficientAmountInSlots(uint256 _amountInSlotLess, uint256 _amountInSlotMore) {
        if (_amountInSlotLess < MIN_BET || _amountInSlotMore < MIN_BET) {
            revert InsufficientAmountInSlots({
                amountInSlotLess: _amountInSlotLess,
                amountInSlotMore: _amountInSlotMore,
                minRequired: MIN_BET
            });
        }
        _;
    }

    modifier isContestClose(uint256 _contestID) {
        if (
            _contests[_contestID].contestStatus != SlotsOptionHelper.ContestStatus.RESOLVED
                && _contests[_contestID].contestStatus != SlotsOptionHelper.ContestStatus.REFUNDABLE
        ) {
            revert ContestNotClose();
        }
        _;
    }

    modifier isContestStatusRefundable(uint256 _contestID) {
        if (_contests[_contestID].contestStatus != SlotsOptionHelper.ContestStatus.REFUNDABLE) {
            revert ContestNotRefundable();
        }
        _;
    }

    modifier isUserNeedRefund(uint256 _contestID, uint256 _amountInSlotLess, uint256 _amountInSlotMore) {
        bool isLessOptionStatusCreated =
            _contests[_contestID].slotLess.options[msg.sender].optionStatus == SlotsOptionHelper.OptionStatus.CREATED;
        bool isMoreOptionStatusCreated =
            _contests[_contestID].slotMore.options[msg.sender].optionStatus == SlotsOptionHelper.OptionStatus.CREATED;
        bool isNeedRefundInLess = _amountInSlotLess > 0 && isLessOptionStatusCreated;
        bool isNeedRefundInMore = _amountInSlotMore > 0 && isMoreOptionStatusCreated;
        if (!isNeedRefundInLess && !isNeedRefundInMore) {
            revert UserNoNeedRefund();
        }
        _;
    }

    modifier isContestStatusResolved(uint256 _contestID) {
        if (_contests[_contestID].contestStatus != SlotsOptionHelper.ContestStatus.RESOLVED) {
            revert ContestNotResolved();
        }
        _;
    }

    modifier isUserNeedSettlement(uint256 _contestID, uint256 _amountInWinningOption, SlotType _winningSlotType) {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _winningSlotType);
        bool isOptionStatusCreated =
            chosenSlot.options[msg.sender].optionStatus == SlotsOptionHelper.OptionStatus.CREATED;
        if (!(_amountInWinningOption > 0 && isOptionStatusCreated)) {
            revert UserNoNeedSettlement();
        }
        _;
    }

    event CreateContest(uint256 indexed _contestID, address indexed _creator);
    event Bet(uint256 indexed _contestID, address indexed _from, uint256 _amountBet, SlotType _slot);
    event CloseContest(
        uint256 indexed _contestID, address indexed _resolver, SlotsOptionHelper.ContestStatus indexed _contestStatus
    );
    event SplitFees(
        uint256 indexed _contestID,
        address indexed _creator,
        address indexed _resolver,
        address _collector,
        uint256 _creatorAmount,
        uint256 _resolverAmount,
        uint256 _collectorAmount
    );
    event ClaimOption(
        uint256 indexed _contestID,
        address indexed _claimer,
        SlotType indexed _slotType,
        SlotsOptionHelper.OptionStatus _optionStatus,
        uint256 _claimed
    );

    function getContestStatus(uint256 _contestID) public view returns (SlotsOptionHelper.ContestStatus) {
        return _contests[_contestID].contestStatus;
    }

    function getContestStartingPrice(uint256 _contestID) external view returns (int64) {
        return _contests[_contestID].startingPrice;
    }

    function getContestMaturityPrice(uint256 _contestID) external view returns (int64) {
        return _contests[_contestID].maturityPrice;
    }

    function getContestStartedAtTimestamp(uint256 _contestID) external view returns (uint256) {
        return _contests[_contestID].startedAt;
    }

    function getContestCloseAtTimestamp(uint256 _contestID) external view returns (uint256) {
        return _contests[_contestID].closeAt;
    }

    function getContestMaturityAtTimestamp(uint256 _contestID) external view returns (uint256) {
        return _contests[_contestID].maturityAt;
    }

    function getContestCreator(uint256 _contestID) external view returns (address) {
        return _contests[_contestID].creator;
    }

    function getContestResolver(uint256 _contestID) external view returns (address) {
        return _contests[_contestID].resolver;
    }

    function getContestWinningSlot(uint256 _contestID) public view returns (WinningSlot) {
        return _contests[_contestID].winningSlot;
    }

    function _getChosenSlot(uint256 _contestID, SlotType _slotType)
        internal
        view
        returns (SlotsOptionHelper.Slot storage)
    {
        return _slotType == SlotType.LESS ? _contests[_contestID].slotLess : _contests[_contestID].slotMore;
    }

    function getAmountBetInSlot(uint256 _contestID, SlotType _slotType) public view returns (uint256) {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _slotType);
        return chosenSlot.totalAmount;
    }

    function getContestPayout(uint256 _contestID, SlotType _slotType) public view returns (uint256) {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _slotType);
        return chosenSlot.payout;
    }

    function getAmountBetInOption(uint256 _contestID, SlotType _slotType, address _user)
        public
        view
        returns (uint256)
    {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _slotType);
        return chosenSlot.options[_user].amount;
    }

    function getOptionStatus(uint256 _contestID, SlotType _slotType, address _user)
        public
        view
        returns (SlotsOptionHelper.OptionStatus)
    {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _slotType);
        return chosenSlot.options[_user].optionStatus;
    }

    function getFinancialData(uint256 _amountInSlotLess, uint256 _amountInSlotMore)
        public
        view
        isSufficientAmountInSlots(_amountInSlotLess, _amountInSlotMore)
        returns (ContestFinancialData memory)
    {
        uint256 totalGrossBet = _amountInSlotLess + _amountInSlotMore;
        SlotsOptionHelper.Fees memory fees = SlotsOptionHelper.getFeesByAmount(
            totalGrossBet,
            FEE_COLLECTOR_NUMERATOR,
            FEE_CREATOR_NUMERATOR,
            FEE_RESOLVER_NUMERATOR,
            FEE_DENOMINATOR,
            MAX_FEE_CREATOR,
            MAX_FEE_RESOLVER
        );
        uint256 totalFees = fees.collector + fees.creator + fees.resolver;
        uint256 netToShareBetweenWinners = totalGrossBet - totalFees;
        uint256 oddLess = netToShareBetweenWinners * PRECISION_FACTOR / _amountInSlotLess;
        uint256 oddMore = netToShareBetweenWinners * PRECISION_FACTOR / _amountInSlotMore;

        return ContestFinancialData({
            totalGrossBet: totalGrossBet,
            netToShareBetweenWinners: netToShareBetweenWinners,
            fees: fees,
            oddLess: oddLess,
            readableOddLess: SlotsOptionHelper.getDecimalsStringFromOdd(3, oddLess, PRECISION_FACTOR, 1000),
            oddMore: oddMore,
            readableOddMore: SlotsOptionHelper.getDecimalsStringFromOdd(3, oddMore, PRECISION_FACTOR, 1000)
        });
    }

    function _isContestRefundable(uint256 _contestID, int64 _maturityPrice) internal view returns (bool) {
        bool isSlotLessAmountNotValid = getAmountBetInSlot(_contestID, SlotType.LESS) < MIN_BET;
        bool isSlotMoreAmountNotValid = getAmountBetInSlot(_contestID, SlotType.MORE) < MIN_BET;
        bool isStartingPriceEqualsMaturityPrice = _contests[_contestID].startingPrice == _maturityPrice;
        return isSlotLessAmountNotValid || isSlotMoreAmountNotValid || isStartingPriceEqualsMaturityPrice;
    }

    function getPythPrice(bytes[] calldata _priceUpdateData) public payable returns (PythStructs.Price memory) {
        uint256 fee = _pyth.getUpdateFee(_priceUpdateData);
        _pyth.updatePriceFeeds{value: fee}(_priceUpdateData);
        return _pyth.getPrice(PYTH_PRICE_ID);
    }

    function _setLastOpenContestID(uint256 _id) internal {
        LAST_OPEN_CONTEST_ID = _id;
    }

    function setPythPriceID(bytes32 _pythPriceID) external onlyOwner {
        PYTH_PRICE_ID = _pythPriceID;
    }

    function setFeesCollector(address _feesCollector) external onlyOwner {
        FEES_COLLECTOR = _feesCollector;
    }

    function setToken(address _token) external onlyOwner {
        TOKEN = _token;
    }

    function setPrecisionFactor(uint256 _precisionFactor) external onlyOwner {
        PRECISION_FACTOR = _precisionFactor;
    }

    function setFeeDenominator(uint32 _feeDenominator) external onlyOwner {
        FEE_DENOMINATOR = _feeDenominator;
    }

    function setFeeCollectorNumerator(uint32 _feeCollectorNumerator) external onlyOwner {
        FEE_COLLECTOR_NUMERATOR = _feeCollectorNumerator;
    }

    function setFeeCreatorNumerator(uint32 _feeCreatorNumerator) external onlyOwner {
        FEE_CREATOR_NUMERATOR = _feeCreatorNumerator;
    }

    function setFeeResolverNumerator(uint32 _feeResolverNumerator) external onlyOwner {
        FEE_RESOLVER_NUMERATOR = _feeResolverNumerator;
    }

    function setMaxFeeCreator(uint256 _maxFeeCreator) external onlyOwner {
        MAX_FEE_CREATOR = _maxFeeCreator;
    }

    function setMaxFeeResolver(uint256 _maxFeeResolver) external onlyOwner {
        MAX_FEE_RESOLVER = _maxFeeResolver;
    }

    function setMinBet(uint256 _minBet) external onlyOwner {
        MIN_BET = _minBet;
    }

    function setEpoch(uint256 _epoch) external onlyOwner {
        EPOCH = _epoch;
    }

    function createContest(bytes[] calldata _priceUpdateData) external payable isCreateable returns (bool) {
        PythStructs.Price memory startingPrice = getPythPrice(_priceUpdateData);
        if (startingPrice.price == 0) revert PriceNotAvailable();

        uint256 newContestID = LAST_OPEN_CONTEST_ID + 1;
        _contests[newContestID].contestStatus = SlotsOptionHelper.ContestStatus.OPEN;
        _contests[newContestID].startedAt = block.timestamp;
        _contests[newContestID].closeAt = block.timestamp + EPOCH;
        _contests[newContestID].maturityAt = block.timestamp + (EPOCH * 2);
        _contests[newContestID].creator = msg.sender;
        _contests[newContestID].startingPrice = startingPrice.price;
        _setLastOpenContestID(newContestID);
        emit CreateContest(newContestID, msg.sender);
        return true;
    }

    function bet(uint256 _contestID, uint256 _amountToBet, SlotType _slotType)
        external
        isContestOpen(_contestID)
        isContestInBettingPeriod(_contestID)
        isSufficientBetAmount(_amountToBet)
        isSufficientBalance(_amountToBet)
        isSufficientAllowance(_amountToBet)
        returns (bool)
    {
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _slotType);
        chosenSlot.totalAmount += _amountToBet;
        bool isUserFirstBet =
            getOptionStatus(_contestID, _slotType, msg.sender) == SlotsOptionHelper.OptionStatus.UNDEFINED;
        if (isUserFirstBet) chosenSlot.options[msg.sender].optionStatus = SlotsOptionHelper.OptionStatus.CREATED;
        chosenSlot.options[msg.sender].amount += _amountToBet;
        IERC20(TOKEN).safeTransferFrom(msg.sender, address(this), _amountToBet);
        emit Bet(_contestID, msg.sender, _amountToBet, _slotType);
        return true;
    }

    function _splitFees(uint256 _contestID, SlotsOptionHelper.Fees memory _fees) internal {
        IERC20(TOKEN).safeTransfer(_contests[_contestID].creator, _fees.creator);
        IERC20(TOKEN).safeTransfer(_contests[_contestID].resolver, _fees.resolver);
        IERC20(TOKEN).safeTransfer(FEES_COLLECTOR, _fees.collector);
        emit SplitFees(
            _contestID,
            _contests[_contestID].creator,
            _contests[_contestID].resolver,
            FEES_COLLECTOR,
            _fees.creator,
            _fees.resolver,
            _fees.collector
            );
    }

    function closeContest(uint256 _contestID, bytes[] calldata _priceUpdateData)
        external
        payable
        isContestOpen(_contestID)
        isMature(_contestID)
        returns (bool)
    {
        PythStructs.Price memory maturityPrice = getPythPrice(_priceUpdateData);
        if (maturityPrice.price == 0) revert PriceNotAvailable();

        bool isRefundable = _isContestRefundable(_contestID, maturityPrice.price);
        _contests[_contestID].maturityPrice = maturityPrice.price;
        if (isRefundable) {
            _contests[_contestID].contestStatus = SlotsOptionHelper.ContestStatus.REFUNDABLE;
        } else {
            _contests[_contestID].contestStatus = SlotsOptionHelper.ContestStatus.RESOLVED;
            ContestFinancialData memory contestFinancialData =
                getFinancialData(_contests[_contestID].slotLess.totalAmount, _contests[_contestID].slotMore.totalAmount);
            _contests[_contestID].resolver = msg.sender;
            _contests[_contestID].winningSlot =
                maturityPrice.price > _contests[_contestID].startingPrice ? WinningSlot.MORE : WinningSlot.LESS;
            _contests[_contestID].slotLess.payout = contestFinancialData.oddLess;
            _contests[_contestID].slotMore.payout = contestFinancialData.oddMore;
            _splitFees(_contestID, contestFinancialData.fees);
        }
        emit CloseContest(
            _contestID,
            msg.sender,
            isRefundable ? SlotsOptionHelper.ContestStatus.REFUNDABLE : SlotsOptionHelper.ContestStatus.RESOLVED
            );
        return true;
    }

    function _askRefund(uint256 _contestID, uint256 _amountInOptionLess, uint256 _amountInOptionMore)
        internal
        isUserNeedRefund(_contestID, _amountInOptionLess, _amountInOptionMore)
        returns (uint256)
    {
        uint256 amountToRefund;
        if (_amountInOptionLess > 0) {
            amountToRefund += _amountInOptionLess;
            _contests[_contestID].slotLess.options[msg.sender].optionStatus = SlotsOptionHelper.OptionStatus.REFUNDED;
            emit ClaimOption(
                _contestID, msg.sender, SlotType.LESS, SlotsOptionHelper.OptionStatus.REFUNDED, _amountInOptionLess
                );
        }
        if (_amountInOptionMore > 0) {
            amountToRefund += _amountInOptionMore;
            _contests[_contestID].slotMore.options[msg.sender].optionStatus = SlotsOptionHelper.OptionStatus.REFUNDED;
            emit ClaimOption(
                _contestID, msg.sender, SlotType.MORE, SlotsOptionHelper.OptionStatus.REFUNDED, _amountInOptionMore
                );
        }
        return amountToRefund;
    }

    function _askSettlement(uint256 _contestID, uint256 _amountInWinningOption, SlotType _winningSlot)
        internal
        isUserNeedSettlement(_contestID, _amountInWinningOption, _winningSlot)
        returns (uint256)
    {
        uint256 amountToSettle = SlotsOptionHelper.getAmountToPayoutIfResolved(
            _amountInWinningOption, getContestPayout(_contestID, _winningSlot), PRECISION_FACTOR
        );
        SlotsOptionHelper.Slot storage chosenSlot = _getChosenSlot(_contestID, _winningSlot);
        chosenSlot.options[msg.sender].optionStatus = SlotsOptionHelper.OptionStatus.SETTLED;
        emit ClaimOption(_contestID, msg.sender, _winningSlot, SlotsOptionHelper.OptionStatus.SETTLED, amountToSettle);
        return amountToSettle;
    }

    function claimRefund(uint256 _contestID)
        external
        isContestClose(_contestID)
        isContestStatusRefundable(_contestID)
        returns (bool)
    {
        uint256 amountInOptionLess = getAmountBetInOption(_contestID, SlotType.LESS, msg.sender);
        uint256 amountInOptionMore = getAmountBetInOption(_contestID, SlotType.MORE, msg.sender);
        uint256 amountToClaim = _askRefund(_contestID, amountInOptionLess, amountInOptionMore);
        IERC20(TOKEN).safeTransfer(msg.sender, amountToClaim);
        return true;
    }

    function claimSettlement(uint256 _contestID)
        external
        isContestClose(_contestID)
        isContestStatusResolved(_contestID)
        returns (bool)
    {
        WinningSlot winningSlot = getContestWinningSlot(_contestID);
        SlotType winningSlotType = winningSlot == WinningSlot.LESS ? SlotType.LESS : SlotType.MORE;
        uint256 amountInWinningOption = getAmountBetInOption(_contestID, winningSlotType, msg.sender);
        uint256 amountToClaim = _askSettlement(_contestID, amountInWinningOption, winningSlotType);
        IERC20(TOKEN).safeTransfer(msg.sender, amountToClaim);
        return true;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}

// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

import "./PythStructs.sol";
import "./IPythEvents.sol";

/// @title Consume prices from the Pyth Network (https://pyth.network/).
/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.
/// @author Pyth Data Association
interface IPyth is IPythEvents {
    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time
    function getValidTimePeriod() external view returns (uint validTimePeriod);

    /// @notice Returns the price and confidence interval.
    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.
    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getPrice(
        bytes32 id
    ) external view returns (PythStructs.Price memory price);

    /// @notice Returns the exponentially-weighted moving average price and confidence interval.
    /// @dev Reverts if the EMA price is not available.
    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getEmaPrice(
        bytes32 id
    ) external view returns (PythStructs.Price memory price);

    /// @notice Returns the price of a price feed without any sanity checks.
    /// @dev This function returns the most recent price update in this contract without any recency checks.
    /// This function is unsafe as the returned price update may be arbitrarily far in the past.
    ///
    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is
    /// sufficiently recent for their application. If you are considering using this function, it may be
    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getPriceUnsafe(
        bytes32 id
    ) external view returns (PythStructs.Price memory price);

    /// @notice Returns the price that is no older than `age` seconds of the current time.
    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in
    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently
    /// recently.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getPriceNoOlderThan(
        bytes32 id,
        uint age
    ) external view returns (PythStructs.Price memory price);

    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.
    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.
    /// However, if the price is not recent this function returns the latest available price.
    ///
    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that
    /// the returned price is recent or useful for any particular application.
    ///
    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is
    /// sufficiently recent for their application. If you are considering using this function, it may be
    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getEmaPriceUnsafe(
        bytes32 id
    ) external view returns (PythStructs.Price memory price);

    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds
    /// of the current time.
    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in
    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently
    /// recently.
    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.
    function getEmaPriceNoOlderThan(
        bytes32 id,
        uint age
    ) external view returns (PythStructs.Price memory price);

    /// @notice Update price feeds with given update messages.
    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling
    /// `getUpdateFee` with the length of the `updateData` array.
    /// Prices will be updated if they are more recent than the current stored prices.
    /// The call will succeed even if the update is not the most recent.
    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.
    /// @param updateData Array of price update data.
    function updatePriceFeeds(bytes[] calldata updateData) external payable;

    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is
    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the
    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.
    ///
    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling
    /// `getUpdateFee` with the length of the `updateData` array.
    ///
    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime
    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have
    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.
    /// Otherwise, it calls updatePriceFeeds method to update the prices.
    ///
    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.
    /// @param updateData Array of price update data.
    /// @param priceIds Array of price ids.
    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`
    function updatePriceFeedsIfNecessary(
        bytes[] calldata updateData,
        bytes32[] calldata priceIds,
        uint64[] calldata publishTimes
    ) external payable;

    /// @notice Returns the required fee to update an array of price updates.
    /// @param updateData Array of price update data.
    /// @return feeAmount The required fee in Wei.
    function getUpdateFee(
        bytes[] calldata updateData
    ) external view returns (uint feeAmount);

    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published
    /// within `minPublishTime` and `maxPublishTime`.
    ///
    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;
    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.
    ///
    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling
    /// `getUpdateFee` with the length of the `updateData` array.
    ///
    ///
    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is
    /// no update for any of the given `priceIds` within the given time range.
    /// @param updateData Array of price update data.
    /// @param priceIds Array of price ids.
    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.
    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.
    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).
    function parsePriceFeedUpdates(
        bytes[] calldata updateData,
        bytes32[] calldata priceIds,
        uint64 minPublishTime,
        uint64 maxPublishTime
    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);
}

// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

/// @title IPythEvents contains the events that Pyth contract emits.
/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.
interface IPythEvents {
    /// @dev Emitted when the price feed with `id` has received a fresh update.
    /// @param id The Pyth Price Feed ID.
    /// @param publishTime Publish time of the given price update.
    /// @param price Price of the given price update.
    /// @param conf Confidence interval of the given price update.
    event PriceFeedUpdate(
        bytes32 indexed id,
        uint64 publishTime,
        int64 price,
        uint64 conf
    );

    /// @dev Emitted when a batch price update is processed successfully.
    /// @param chainId ID of the source chain that the batch price update comes from.
    /// @param sequenceNumber Sequence number of the batch price update.
    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);
}

// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

contract PythStructs {
    // A price with a degree of uncertainty, represented as a price +- a confidence interval.
    //
    // The confidence interval roughly corresponds to the standard error of a normal distribution.
    // Both the price and confidence are stored in a fixed-point numeric representation,
    // `x * (10^expo)`, where `expo` is the exponent.
    //
    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how
    // to how this price safely.
    struct Price {
        // Price
        int64 price;
        // Confidence interval around the price
        uint64 conf;
        // Price exponent
        int32 expo;
        // Unix timestamp describing when the price was published
        uint publishTime;
    }

    // PriceFeed represents a current aggregate price from pyth publisher feeds.
    struct PriceFeed {
        // The price ID.
        bytes32 id;
        // Latest available price
        Price price;
        // Latest available exponentially-weighted moving average price
        Price emaPrice;
    }
}

// SPDX-License-Identifier: CC-BY-NC-ND-4.0 (Creative Commons Attribution Non Commercial No Derivatives 4.0 International)
pragma solidity ^0.8.20;

import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";

library SlotsOptionHelper {
    using Strings for uint256;

    /// @notice Status of a Contest. The status can alternate between 3 different states.
    // OPEN is the default status when a new Contest is created. In this status, if the contest is not mature, users can buy a slot option.
    // RESOLVED is the status assigned once the Contest has reached maturity and a winning slot has been determined in favor of a loser.
    // REFUNDABLE is the status assigned once the v has reached its maturity but the conditions are not met to determine a winner.
    enum ContestStatus {
        UNDEFINED,
        OPEN,
        RESOLVED,
        REFUNDABLE
    }
    /// @notice Status of an Option. The status can alternate between 3 different states.
    // CREATED is the default status when a new Option is created. This status defines that an Option has been created and is attached to an address.
    // CLAIMED status is assigned to a winning Option and claimed by the linked address.
    // REFUND status is assigned when an Option has no winner and the linked address has been refunded its initial Option.
    enum OptionStatus {
        UNDEFINED,
        CREATED,
        SETTLED,
        REFUNDED
    }

    struct Option {
        OptionStatus optionStatus;
        uint256 amount;
    }

    struct Slot {
        uint256 totalAmount;
        uint256 payout;
        mapping(address => Option) options;
    }

    struct Fees {
        uint256 collector;
        uint256 creator;
        uint256 resolver;
    }

    function getFee(uint256 _amount, uint32 _feeNumerator, uint32 _feeDenominator) public pure returns (uint256) {
        return _amount * (_feeNumerator) / (_feeDenominator);
    }

    /// @notice Calculate fees to be deducted from a given amount
    /// @dev Fee amount by dividing the numerator by the denominator which - e.g: 3/100 = 0.03 or 3% percent;
    /// @param _amount amount between 1e15 & 1e20.
    /// @return fees amount in wei
    function getFeesByAmount(
        uint256 _amount,
        uint32 _feeCollectorNumerator,
        uint32 _feeCreatorNumerator,
        uint32 _feeResolverNumerator,
        uint32 _feeDenominator,
        uint256 _maxFeeCreator,
        uint256 _maxFeeResolver
    ) public pure returns (Fees memory) {
        uint256 total = getFee(_amount, _feeCollectorNumerator, _feeDenominator);
        uint256 creatorFees = getFee(total, _feeCreatorNumerator, _feeDenominator);
        uint256 resolverFees = getFee(total, _feeResolverNumerator, _feeDenominator);
        uint256 creator = creatorFees < _maxFeeCreator ? creatorFees : _maxFeeCreator;
        uint256 resolver = resolverFees < _maxFeeResolver ? resolverFees : _maxFeeResolver;
        uint256 collector = total - (creator + resolver);
        return Fees({collector: collector, creator: creator, resolver: resolver});
    }

    function numToFixedLengthStr(uint256 _decimalPlaces, uint256 _num) public pure returns (string memory) {
        bytes memory byteString;
        for (uint256 i = 0; i < _decimalPlaces; i++) {
            uint256 remainder = _num % 10;
            byteString = abi.encodePacked(remainder.toString(), byteString);
            _num = _num / 10;
        }
        return string(byteString);
    }

    function getDecimalsStringFromOdd(
        uint256 _decimalPlaces,
        uint256 _odd,
        uint256 _precisionFactor,
        uint256 _denominator
    ) public pure returns (string memory) {
        uint256 readableOdd = _odd / (_precisionFactor / 1e3); // To get number on Base 1000
        uint256 factor = 10 ** _decimalPlaces;
        uint256 quotient = readableOdd / _denominator;
        bool rounding = 2 * ((readableOdd * factor) % _denominator) >= _denominator;
        uint256 remainder = (readableOdd * factor / _denominator) % factor;
        if (rounding) {
            remainder += 1;
        }
        return string(abi.encodePacked(quotient.toString(), ".", numToFixedLengthStr(_decimalPlaces, remainder)));
    }

    function getAmountToPayoutIfResolved(uint256 _amountInUserOption, uint256 _payout, uint256 _precisionFactor)
        public
        pure
        returns (uint256)
    {
        return (_amountInUserOption * _payout) / _precisionFactor;
    }
}