/**
 *Submitted for verification at Etherscan.io on 2022-12-08
*/

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.17;

// @author: white lights (whitelights.eth)
// @shoutout: dom aka dhof (dom.eth)

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
//                                                                                         //
//    █▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▐     //
//    ▌ ██  NOBODY                                                                   ▐     //
//    █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █╟█▌█████████████████████████████████████████████████████████████████████████  ▐     //
//    ██████▀███████████▌██████▌█▌████████▌███▌████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    ██▀▀██╙███▌████│╬╜▌██▌█╫█▌█▌█▌██╠╠██▀█╟█▌████║▀██████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █▌█▄▄▌█▄▄█╣▄▄██████▄███▄▄█▄██▄▄███▄██████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █▌█████▌█████████████████████▌███║███████████████████████████████████████████  ▐     //
//    █╣███████████████████████████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    ███╣╬▌██║██████████████║█████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████▌███████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █████████████████████████████████████████████████████████████████████████████  ▐     //
//    █ C:\> █                                                                       ▐     //
//    ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀     //
//                                                                                         //
//    a collaboration between white lights and nobody (a.i.)                               //
//                                                                                         //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////

interface IDataChunk {
    function data() external view returns (string memory);
}

interface IDataChunkCompiler {
    function BEGIN_JSON() external view returns (string memory);
    function END_JSON() external view returns (string memory);

    function HTML_HEAD() external view returns (string memory);
    function HTML_FOOT() external view returns (string memory);

    function BEGIN_SCRIPT() external view returns (string memory);
    function END_SCRIPT() external view returns (string memory);

    function BEGIN_SCRIPT_DATA_COMPRESSED() external view returns (string memory);
    function END_SCRIPT_DATA_COMPRESSED() external view returns (string memory);

    function BEGIN_METADATA_VAR(string memory name, bool omitQuotes) external pure returns (string memory);
    function END_METADATA_VAR(bool omitQuotes) external pure returns (string memory);

    function SCRIPT_VAR( string memory name, string memory value, bool omitQuotes) external pure returns (string memory);

    function encode(string memory str) external pure returns (string memory);

    function compileChunks(address[] memory chunks) external view returns (string memory);

    function setFFlateChunks(address chunk1, address chunk2) external view returns (string memory);
}

contract Nobody1RendererNew {
    address public owner;

    string private name = "Fractal Study 01";
    string private image = "https://arweave.net/FsmxO5iF_wCdKb4-Q9KYLoADDv_e8hepSFPPoJet03o"; // since this is just for platform display layers and not the artwork itself, I'm okay with this being on Arweave.
    string private description = "A genart collaboration between White Lights and GPT-3 artificial intelligence. The code that creates this artwork was generated by prompting OpenAI GPT-3 to 'write threejs code that creates a fractal'. The outputs were concatenated together and then slightly modified by White Lights to ensure pleasing resizing behavior on all screens. The script and its rendering engine are served on-chain using permanent Ethereum contract storage without dependencies, ensuring the artwork lasts as long as the chain. Thank you to dom.eth for his ingenious open-source smart contracts which allow this on-chain rendering to be possible.";
    string private script = "<script>window.onload=()=>{var e=new THREE.Scene,n=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.1,10),i=new THREE.WebGLRenderer;function t(){n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)}function r(e,n){if(0==n){var i=new THREE.BoxGeometry(e,e,e),t=new THREE.MeshBasicMaterial({color:65280}),o=new THREE.Mesh(i,t);return o}for(var a=new THREE.Group,d=-1;d<=1;d++)for(var $=-1;$<=1;$++)for(var h=-1;h<=1;h++)if(!(Math.abs(d)+Math.abs($)+Math.abs(h)>1)){var s=e/3,o=r(s,n-1);o.position.set(d*s,$*s,h*s),a.add(o)}return a}i.setSize(window.innerWidth,window.innerHeight),i.setPixelRatio(1),document.body.appendChild(i.domElement),document.body.style.touchAction='none',window.addEventListener('resize',t),document.body.style='touchAction: none; margin: 0; padding: 0; overflow: hidden; height: 100%; width: 100%;',n.position.z=2;var o=r(1,window.innerWidth>=500?4:3);function a(){requestAnimationFrame(a),o.rotation.x+=.005,o.rotation.y+=.005,i.render(e,n)}e.add(o),a()};</script>";
    IDataChunkCompiler private compiler = IDataChunkCompiler(0x9ca8Db9466cb9ad0C915a9Dd635841609cbdB4eb);

    // address[9] private threeAddresses = [
    //     0xA32bb79b33B29e483d0949C99EC0C439b29e2B33,
    //     0x0d104Dea962b090bC46c67a12e800ff16eeffB75,
    //     0x1D11a1c75e439A50734AEF3469aed9ca4fFe39fc,
    //     0x6bAb43D4F3587f9f3ca1152C63E52BF7F8de2Dc1,
    //     0x57beAe62670Ff6cCf8311411a2A2aAb453413987,
    //     0xF3A95B30E1Fc2EdCea41fF93270249b6Ab979730,
    //     0x52a31D845f4bdC1D47Ee21dB7C25Bde2423A91Ae,
    //     0x6CcCc7eA426E14F1E07528296c7d226677fd2fF6,
    //     0xc230862406bBe44f499943Ae4E9E6317a95BC7Ad
    // ];

    address[9] private threeAddresses = [
        0x2632994420E32905b44916C177171fAD6CAaB3a2,
        0x1A0F93B74254525A75a074d0cc95B66FC3209c6c,
        0x3De7Ca4cdd0e02F5CFb6c6Ed0Efbd0e0d06e58C0,
        0xAcB17f63BA9125cC0c5102a365D4a6D61A1a7a9A,
        0xa2E89B2A22887a76651248Fe1629575e159d2A69,
        0x938E7574d7F15be1A5d5079A37F371A4f3Cc6Cab,
        0x137971eA881a487aE9b1F006256Ba1924c1A0089,
        0xcf27C1C32D220C662E63AcEFB435E2f008054aD3,
        0x9AfCdb2eCf4B33AC57f098703D8B453830525472
    ];

    constructor() {
        owner = msg.sender;
    }

    function setDescription(string memory des) public {
        require(msg.sender == owner);
        description = des;
    }

    function setScript(string memory scr) public {
        require(msg.sender == owner);
        script = scr;
    }

    function setName(string memory n) public {
        require(msg.sender == owner);
        name = n;
    }

    function setCompilerAddress(address newAddress) public {
        require(msg.sender == owner);
        compiler = IDataChunkCompiler(newAddress);
    }

    function setThreeAddress(address chunk1, address chunk2, address chunk3, address chunk4,
        address chunk5, address chunk6, address chunk7, address chunk8, address chunk9) public {
        require(msg.sender == owner);
        threeAddresses[0] = chunk1;
        threeAddresses[1] = chunk2;
        threeAddresses[2] = chunk3;
        threeAddresses[3] = chunk4;
        threeAddresses[4] = chunk5;
        threeAddresses[5] = chunk6;
        threeAddresses[6] = chunk7;
        threeAddresses[7] = chunk8;
        threeAddresses[8] = chunk9;
    }

    function tokenURI(uint256 tokenId) public view returns (string memory) {
        address[] memory three = new address[](9);
        three[0] = threeAddresses[0];
        three[1] = threeAddresses[1];
        three[2] = threeAddresses[2];
        three[3] = threeAddresses[3];
        three[4] = threeAddresses[4];
        three[5] = threeAddresses[5];
        three[6] = threeAddresses[6];
        three[7] = threeAddresses[7];
        three[8] = threeAddresses[8];

        string memory threejs = compiler.compileChunks(three);
        string memory tokenIdStr = uint2str(tokenId);

        return
            string.concat(
                compiler.BEGIN_JSON(),
                string.concat(
                    compiler.BEGIN_METADATA_VAR("animation_url", false),
                    compiler.HTML_HEAD(), // starts HTML template, injects fflate
                    string.concat(
                        // now we are clear to use compressed data as fflate it globally present
                        compiler.BEGIN_SCRIPT_DATA_COMPRESSED(),
                        threejs,
                        compiler.END_SCRIPT_DATA_COMPRESSED(),
                        // we can also just do normal scripts to set vars like so
                        compiler.BEGIN_SCRIPT(),
                        compiler.SCRIPT_VAR("tokenId", tokenIdStr, true),
                        compiler.END_SCRIPT()
                    ),
                    // this is a double encoded <script>...</script>
                    compiler.encode(compiler.encode(script)),
                    // would be smart to end the document now no?
                    compiler.HTML_FOOT(),
                    // this ends the animation_url string value with `",`
                    compiler.END_METADATA_VAR(false)
                ),
                string.concat(
                    compiler.BEGIN_METADATA_VAR("artist", false),
                    "NOBODY",
                    compiler.END_METADATA_VAR(false)
                ),
                string.concat(
                    compiler.BEGIN_METADATA_VAR("description", false),
                    compiler.encode(description),
                    compiler.END_METADATA_VAR(false)
                ),
                string.concat(
                    compiler.BEGIN_METADATA_VAR("image", false),
                    image,
                    compiler.END_METADATA_VAR(false)
                ),
                string.concat(
                    compiler.BEGIN_METADATA_VAR("name", false),
                    compiler.encode(name),
                    // @WARN: do not put `compiler.END_METADATA_VAR(false)` here
                    // because we cannot have a trailing comma in valid JSON.
                    "%22"
                ),
                compiler.END_JSON()
            );
    }

    function uint2str(uint _i)
        public
        pure
        returns (string memory _uintAsString)
    {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len;
        while (_i != 0) {
            k = k - 1;
            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));
            bytes1 b1 = bytes1(temp);
            bstr[k] = b1;
            _i /= 10;
        }
        return string(bstr);
    }
}