// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;
import "./Role.sol";

contract Product {
    struct Paddy {
        string upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        address manufacturerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint harvestedWeight;
        string state;
    }

    mapping(string => Paddy) paddyDetails;

    string[] paddyIds;

    enum RicePacketState {
        Packed, // 1
        QualityChecked, // 2
        ShippedToDistributor, // 3
        ReceivedByDistributor, // 4
        ShippedToRetailer, // 5
        ReceivedByRetailer, // 6
        Sold // 7
    }

    struct Rice {
        Paddy farmDetails;
        string productID; // Product ID potentially a combination of upc + sku
        string productName; // Product ID potentially a combination of upc + sku
        uint productPrice; // Product Price
        uint productWeight; // Product Price
        bool qualityApproved;
        RicePacketState itemState; // Product State as represented in the enum above
        address ownerID;
        address manufacturerID; // Metamask-Ethereum address of the Distributor
        address qualityCheckerID; // Metamask-Ethereum address of the Distributor
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    mapping(string => Rice) riceDetails;

    string[] riceIds;

    function harvestPaddy(
        string memory _upc,
        address _addr,
        string memory _farmerName,
        string memory _farmLatitude,
        string memory _farmLongitude,
        uint _harvestedWeight
    ) public {
        Paddy storage paddy = paddyDetails[_upc];
        paddy.upc = _upc;
        paddy.ownerID = _addr;
        paddy.originFarmerID = _addr;
        paddy.originFarmName = _farmerName;
        paddy.originFarmLatitude = _farmLatitude;
        paddy.originFarmLongitude = _farmLongitude;
        paddy.harvestedWeight = _harvestedWeight;
        paddy.state = "Harvested";
        paddyIds.push(_upc);
    }

    function getAllPaddy() public view returns (Paddy[] memory) {
        Paddy[] memory paddyArray = new Paddy[](paddyIds.length);
        for (uint i = 0; i < paddyIds.length; i++) {
            paddyArray[i] = paddyDetails[paddyIds[i]];
        }
        return paddyArray;
    }

    function shipToManufacturer(string memory _upc, address _addr) public {
        paddyDetails[_upc].state = "ShippedToManufacturer";
        paddyDetails[_upc].manufacturerID = _addr;
    }

    function receivedByManufacturer(address _addr, string memory _upc) public {
        paddyDetails[_upc].state = "ReceivedByManufacturer";
        paddyDetails[_upc].ownerID = _addr;
    }

    function processPaddy(string memory _upc) public {
        paddyDetails[_upc].state = "Processed";
    }

    function packRice(
        string memory _upc,
        uint _weight,
        string memory _productName,
        string memory _productId,
        uint _productPrice,
        address _addr
    ) public {
        Rice storage rice = riceDetails[_productId];
        rice.farmDetails = paddyDetails[_upc];
        rice.productID = _productId;
        rice.productName = _productName;
        rice.productPrice = _productPrice;
        rice.productWeight = _weight;
        rice.qualityApproved = false;
        rice.itemState = RicePacketState.Packed;
        rice.manufacturerID = _addr;
        rice.ownerID = _addr;

        paddyDetails[_upc].harvestedWeight =
            paddyDetails[_upc].harvestedWeight -
            _weight;
        riceIds.push(_productId);
    }

    function getAllRice() public view returns (Rice[] memory) {
        Rice[] memory riceArray = new Rice[](riceIds.length);
        for (uint i = 0; i < riceIds.length; i++) {
            riceArray[i] = riceDetails[riceIds[i]];
        }
        return riceArray;
    }

    function getRiceDetail(
        string memory _productId
    ) public view returns (Rice memory) {
        return riceDetails[_productId];
    }

    function checkQualityRice(
        address _addr,
        string memory _productId,
        bool approved
    ) public {
        riceDetails[_productId].qualityApproved = approved;
        riceDetails[_productId].qualityCheckerID = _addr;
    }
}