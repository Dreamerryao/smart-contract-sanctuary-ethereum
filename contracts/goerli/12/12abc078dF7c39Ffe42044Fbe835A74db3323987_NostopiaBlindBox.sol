// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

interface GameNftI {
    function mint(address _to) external;
}

contract NostopiaBlindBox is
    ERC721,
    Ownable,
    ReentrancyGuard,
    VRFConsumerBaseV2
{
    uint16[] public seed = [
        4387,
        4870,
        3442,
        4575,
        1541,
        2998,
        4703,
        3496,
        4269,
        4588,
        1276,
        3971,
        590,
        2341,
        2653,
        2250,
        4221,
        2796,
        3801,
        3176,
        4560,
        3625,
        4882,
        1958,
        1060,
        3363,
        2790,
        707,
        123,
        2381,
        4997,
        3292,
        4953,
        666,
        1674,
        3247,
        4008,
        2766,
        401,
        3040,
        245,
        1825,
        4465,
        968,
        477,
        1085,
        3172,
        1389,
        4356,
        103,
        644,
        949,
        2143,
        4278,
        543,
        3835,
        255,
        1819,
        1050,
        1570,
        3843,
        2502,
        3191,
        926,
        2390,
        1306,
        1684,
        4258,
        1263,
        677,
        4122,
        4328,
        801,
        514,
        2539,
        4184,
        4420,
        1032,
        1898,
        1239,
        3651,
        906,
        1400,
        443,
        3304,
        1638,
        2217,
        2547,
        1022,
        3353,
        2329,
        3080,
        1068,
        4386,
        1069,
        3836,
        2006,
        201,
        4796,
        388,
        1663,
        1526,
        4907,
        3660,
        2974,
        4253,
        4736,
        4129,
        2361,
        1983,
        2188,
        2977,
        4946,
        2040,
        3949,
        4119,
        2760,
        4967,
        1748,
        1617,
        3977,
        947,
        2167,
        4547,
        1872,
        1427,
        2533,
        783,
        570,
        4609,
        4349,
        4100,
        1057,
        2810,
        2176,
        3458,
        795,
        4106,
        2576,
        3095,
        3978,
        2379,
        3612,
        4381,
        4298,
        2196,
        4925,
        977,
        3793,
        4251,
        3556,
        2791,
        2587,
        282,
        2715,
        2571,
        2159,
        3548,
        4049,
        1565,
        4596,
        2611,
        4902,
        1724,
        4214,
        515,
        1031,
        3275,
        4305,
        1275,
        3166,
        4686,
        1687,
        1086,
        4818,
        3841,
        2896,
        3061,
        2299,
        2477,
        126,
        2467,
        3103,
        3535,
        4683,
        1655,
        1301,
        618,
        3693,
        4083,
        1864,
        722,
        35,
        2821,
        169,
        4533,
        4766,
        3509,
        3179,
        1835,
        2090,
        30,
        1999,
        2070,
        634,
        752,
        4347,
        2064,
        2449,
        4711,
        4005,
        1235,
        3599,
        2504,
        3723,
        377,
        2788,
        4908,
        1781,
        327,
        4124,
        1948,
        1130,
        1335,
        3517,
        1035,
        4928,
        3685,
        1646,
        4311,
        4895,
        4038,
        4254,
        3020,
        408,
        1799,
        3966,
        1700,
        2251,
        3844,
        2646,
        3848,
        3605,
        363,
        2948,
        720,
        1545,
        3667,
        1378,
        3314,
        4297,
        4300,
        3407,
        2803,
        4827,
        3484,
        4692,
        539,
        1288,
        938,
        4812,
        3806,
        2903,
        3606,
        2435,
        3464,
        1449,
        3779,
        504,
        970,
        3457,
        1821,
        3259,
        219,
        4201,
        3595,
        172,
        2351,
        4456,
        4427,
        1006,
        3984,
        3347,
        2141,
        4554,
        2495,
        4509,
        3614,
        1134,
        74,
        3351,
        4693,
        3114,
        435,
        280,
        2581,
        110,
        593,
        3849,
        886,
        101,
        431,
        4392,
        1394,
        4963,
        4088,
        3769,
        4678,
        1312,
        1980,
        2898,
        369,
        4608,
        1929,
        4551,
        1342,
        3749,
        4872,
        3945,
        3961,
        1321,
        1194,
        4020,
        3913,
        1843,
        458,
        2304,
        2712,
        383,
        1218,
        2960,
        2817,
        468,
        1818,
        3190,
        1122,
        713,
        654,
        3537,
        1910,
        3807,
        1003,
        1361,
        1830,
        3062,
        1364,
        2075,
        4887,
        3690,
        4353,
        3999,
        1311,
        4185,
        1990,
        4572,
        1346,
        4853,
        796,
        595,
        2207,
        1167,
        438,
        847,
        2922,
        696,
        1309,
        3475,
        299,
        3935,
        3980,
        3143,
        647,
        4558,
        1090,
        1536,
        4855,
        2456,
        3963,
        3192,
        4188,
        2032,
        2719,
        31,
        3091,
        3706,
        2957,
        3312,
        2384,
        691,
        3174,
        2162,
        3855,
        3287,
        3360,
        1315,
        4490,
        2560,
        3000,
        763,
        1973,
        3883,
        102,
        76,
        2459,
        4435,
        1062,
        2771,
        2378,
        536,
        4081,
        2683,
        247,
        225,
        2630,
        4194,
        4302,
        2271,
        1393,
        3669,
        3714,
        2242,
        771,
        2531,
        1949,
        2823,
        1138,
        4476,
        535,
        1722,
        1561,
        2200,
        1680,
        855,
        702,
        1760,
        1121,
        1460,
        4885,
        3403,
        4758,
        4192,
        2139,
        2934,
        2335,
        1874,
        1611,
        4521,
        4213,
        4972,
        2703,
        3419,
        551,
        4825,
        4954,
        4340,
        2487,
        3216,
        2371,
        473,
        3654,
        1533,
        4419,
        2954,
        882,
        1787,
        3664,
        1345,
        950,
        3507,
        2028,
        636,
        4363,
        210,
        864,
        1988,
        149,
        3346,
        1838,
        3863,
        2348,
        1996,
        3764,
        835,
        1348,
        2071,
        1922,
        2042,
        2255,
        2004,
        1255,
        3894,
        4764,
        3382,
        2292,
        3738,
        1863,
        3946,
        1112,
        484,
        1694,
        1833,
        2548,
        2641,
        1070,
        727,
        2811,
        3652,
        2116,
        807,
        1431,
        3917,
        4947,
        3743,
        1848,
        1678,
        2407,
        2773,
        594,
        2275,
        2086,
        3697,
        28,
        797,
        4455,
        1873,
        3333,
        4991,
        3340,
        373,
        3439,
        3926,
        2637,
        1946,
        762,
        2914,
        1524,
        3487,
        1868,
        4905,
        4772,
        2623,
        1489,
        723,
        4150,
        3060,
        3502,
        3134,
        1439,
        274,
        2288,
        4545,
        4774,
        292,
        4500,
        3552,
        3820,
        601,
        2258,
        1233,
        4906,
        3478,
        222,
        4600,
        3007,
        2717,
        2152,
        4193,
        226,
        2244,
        4922,
        1480,
        4255,
        2347,
        853,
        4993,
        3876,
        1087,
        587,
        754,
        3257,
        2107,
        4301,
        4080,
        4425,
        3910,
        4886,
        2909,
        4881,
        1616,
        2252,
        305,
        3951,
        2428,
        4652,
        1228,
        2106,
        3871,
        3513,
        2494,
        716,
        812,
        114,
        2229,
        778,
        2373,
        827,
        1482,
        46,
        1183,
        648,
        2843,
        14,
        3302,
        2243,
        596,
        3149,
        386,
        1905,
        4315,
        2537,
        1653,
        3456,
        4950,
        3197,
        3752,
        1186,
        2098,
        4528,
        1156,
        817,
        3440,
        1927,
        512,
        3410,
        3038,
        3219,
        2696,
        447,
        1926,
        4167,
        2125,
        1698,
        4238,
        2394,
        3938,
        3896,
        1525,
        2859,
        4051,
        3026,
        3313,
        87,
        1895,
        179,
        4032,
        1418,
        4378,
        2156,
        2906,
        934,
        4135,
        382,
        2046,
        2471,
        1168,
        351,
        1989,
        2544,
        1067,
        2832,
        665,
        3495,
        4123,
        3763,
        3465,
        4684,
        719,
        4402,
        3490,
        4710,
        1044,
        1180,
        1175,
        2967,
        4332,
        1388,
        70,
        243,
        1498,
        199,
        3483,
        1094,
        1075,
        4342,
        32,
        2096,
        19,
        3376,
        3790,
        2247,
        2658,
        4070,
        3967,
        1398,
        4006,
        1252,
        2296,
        2195,
        1386,
        498,
        3717,
        4331,
        2782,
        54,
        310,
        599,
        3627,
        3013,
        3428,
        1634,
        966,
        1299,
        271,
        3307,
        1178,
        800,
        3972,
        1243,
        4627,
        980,
        3053,
        129,
        4292,
        2491,
        422,
        4602,
        3182,
        939,
        1659,
        3033,
        1484,
        2454,
        1004,
        2806,
        604,
        3205,
        1375,
        3739,
        3214,
        3354,
        659,
        2846,
        2253,
        3467,
        994,
        3218,
        3814,
        2405,
        3319,
        2223,
        2523,
        729,
        1859,
        4096,
        2622,
        4844,
        4705,
        3165,
        987,
        1886,
        244,
        207,
        3708,
        3988,
        2301,
        4930,
        2513,
        3453,
        1240,
        3045,
        1726,
        4004,
        4244,
        2628,
        1334,
        572,
        2142,
        4000,
        4927,
        4894,
        4988,
        3527,
        3196,
        2841,
        3031,
        581,
        4398,
        4725,
        3915,
        3979,
        4401,
        1585,
        2053,
        2440,
        3850,
        2094,
        3588,
        4385,
        2158,
        2566,
        4632,
        2867,
        2952,
        1899,
        1808,
        4389,
        2514,
        2890,
        1881,
        3331,
        4364,
        4345,
        1445,
        4648,
        1456,
        3923,
        833,
        4530,
        4808,
        1356,
        4924,
        1072,
        1422,
        965,
        1981,
        151,
        990,
        216,
        2035,
        4677,
        4969,
        911,
        2012,
        16,
        653,
        1977,
        1192,
        3082,
        2556,
        1236,
        75,
        4937,
        961,
        3479,
        4042,
        3369,
        4191,
        1918,
        4544,
        2845,
        2011,
        2280,
        1366,
        4394,
        2983,
        100,
        4334,
        1511,
        4417,
        370,
        3077,
        2585,
        4620,
        3301,
        4384,
        2395,
        2202,
        1278,
        732,
        1135,
        509,
        1234,
        4200,
        4147,
        2055,
        2608,
        2354,
        511,
        4357,
        1661,
        314,
        1520,
        104,
        2136,
        3786,
        451,
        3381,
        563,
        4820,
        215,
        2941,
        2919,
        4670,
        3803,
        2276,
        41,
        649,
        3021,
        1496,
        1395,
        1162,
        731,
        146,
        1051,
        766,
        988,
        457,
        4469,
        2981,
        2745,
        2750,
        1110,
        4380,
        4089,
        2620,
        3681,
        1621,
        3055,
        1851,
        4805,
        1671,
        3029,
        3741,
        3889,
        4663,
        4233,
        3443,
        3073,
        3308,
        3584,
        738,
        3637,
        4479,
        4525,
        2321,
        20,
        2873,
        4407,
        0,
        4755,
        24,
        323,
        836,
        1028,
        4976,
        1777,
        4105,
        2013,
        3482,
        2256,
        4245,
        1467,
        3400,
        2871,
        4744,
        2314,
        4999,
        1755,
        3570,
        4579,
        4220,
        491,
        2346,
        3424,
        4589,
        2050,
        3285,
        61,
        3193,
        3839,
        1522,
        3499,
        1128,
        4890,
        1158,
        2916,
        4719,
        1693,
        1710,
        3825,
        3631,
        4780,
        2541,
        1045,
        227,
        4239,
        3184,
        1203,
        4242,
        2079,
        1485,
        2851,
        1510,
        364,
        347,
        3565,
        975,
        3932,
        4733,
        3300,
        2465,
        2925,
        1458,
        360,
        3632,
        3540,
        2741,
        4987,
        4526,
        917,
        856,
        1713,
        638,
        2429,
        4594,
        4027,
        2038,
        2268,
        353,
        1559,
        1329,
        2191,
        3447,
        3813,
        2730,
        3274,
        4496,
        1902,
        301,
        3087,
        2862,
        150,
        2734,
        4817,
        2875,
        4607,
        2418,
        2864,
        2237,
        4540,
        229,
        2112,
        63,
        2764,
        2673,
        3250,
        2406,
        748,
        3907,
        2054,
        2656,
        4723,
        2030,
        2895,
        2345,
        3391,
        1446,
        3089,
        2713,
        51,
        1903,
        384,
        4057,
        2662,
        3032,
        747,
        4240,
        1984,
        4111,
        1373,
        526,
        1574,
        1916,
        740,
        2109,
        737,
        1731,
        4936,
        1019,
        2579,
        3700,
        294,
        3230,
        1627,
        1622,
        951,
        2519,
        4968,
        2441,
        3498,
        869,
        2307,
        3037,
        2826,
        629,
        1401,
        4541,
        3237,
        914,
        4260,
        857,
        343,
        704,
        4522,
        11,
        3187,
        2518,
        3554,
        2505,
        3211,
        9,
        3789,
        4657,
        946,
        4136,
        2272,
        4668,
        1129,
        802,
        1160,
        4434,
        3278,
        2432,
        3798,
        2681,
        1796,
        4587,
        2595,
        2008,
        4994,
        1136,
        3922,
        2824,
        4644,
        4333,
        2965,
        2220,
        3815,
        3983,
        2018,
        3754,
        4973,
        4803,
        4231,
        111,
        1320,
        2800,
        2177,
        381,
        2383,
        1878,
        4379,
        3643,
        3523,
        1407,
        3243,
        3468,
        3455,
        238,
        120,
        1857,
        2902,
        952,
        3982,
        617,
        3231,
        1900,
        1337,
        2854,
        508,
        4318,
        3232,
        4158,
        4960,
        234,
        2416,
        1793,
        640,
        592,
        85,
        1954,
        2664,
        1024,
        1139,
        1295,
        3827,
        1707,
        628,
        3541,
        1547,
        1575,
        4788,
        1193,
        4464,
        448,
        1577,
        1291,
        2899,
        3891,
        107,
        2333,
        2582,
        2943,
        3725,
        232,
        829,
        568,
        2000,
        2640,
        97,
        1475,
        700,
        4225,
        3998,
        2036,
        3994,
        615,
        675,
        1583,
        2543,
        1225,
        160,
        3677,
        4534,
        4701,
        531,
        3006,
        2279,
        2840,
        4453,
        3288,
        2740,
        4897,
        1955,
        1921,
        1531,
        303,
        1953,
        4065,
        4011,
        2915,
        3591,
        2024,
        1148,
        673,
        2425,
        4403,
        2165,
        2928,
        1580,
        2061,
        2689,
        3720,
        3870,
        2542,
        4955,
        4001,
        717,
        4823,
        171,
        780,
        764,
        1015,
        3733,
        2056,
        1823,
        1544,
        932,
        805,
        3823,
        1963,
        3916,
        4285,
        4279,
        1432,
        4480,
        2818,
        411,
        4611,
        1202,
        1042,
        3947,
        3969,
        1423,
        57,
        862,
        289,
        2667,
        4156,
        600,
        4830,
        2154,
        3255,
        187,
        4636,
        3156,
        4957,
        3791,
        3385,
        3804,
        3933,
        3939,
        1124,
        1396,
        3594,
        3225,
        579,
        4900,
        4494,
        3283,
        4795,
        2580,
        3516,
        2470,
        757,
        2316,
        4688,
        2612,
        772,
        372,
        2758,
        1277,
        3772,
        470,
        80,
        1794,
        942,
        4306,
        1513,
        3748,
        1579,
        1272,
        3206,
        1488,
        4082,
        612,
        4510,
        2635,
        2598,
        3518,
        3886,
        2264,
        3349,
        3449,
        3268,
        1572,
        136,
        2305,
        1146,
        2706,
        2900,
        3316,
        2396,
        4778,
        1265,
        730,
        2452,
        746,
        1942,
        1382,
        1549,
        1016,
        2879,
        3158,
        1143,
        1174,
        3742,
        803,
        189,
        2526,
        3148,
        3161,
        4751,
        1876,
        4199,
        1001,
        1660,
        639,
        3784,
        1915,
        3515,
        3096,
        439,
        341,
        4569,
        2146,
        4171,
        1811,
        198,
        4060,
        845,
        4532,
        1712,
        2489,
        3157,
        2594,
        1224,
        1735,
        1701,
        1266,
        4459,
        455,
        3352,
        235,
        3239,
        1343,
        405,
        4781,
        332,
        4628,
        3387,
        3135,
        2942,
        4108,
        4383,
        2849,
        4861,
        1215,
        1159,
        916,
        2827,
        3600,
        2213,
        3063,
        3767,
        2751,
        3093,
        896,
        4792,
        4604,
        2748,
        4839,
        379,
        4933,
        3604,
        2923,
        7,
        2400,
        2545,
        602,
        2246,
        387,
        1834,
        4359,
        2853,
        733,
        4708,
        407,
        2532,
        513,
        285,
        555,
        256,
        1081,
        1654,
        887,
        3628,
        43,
        1956,
        1828,
        711,
        154,
        571,
        3210,
        3294,
        4747,
        2911,
        1370,
        3691,
        2884,
        55,
        1517,
        1114,
        1595,
        4164,
        4995,
        1241,
        3592,
        4651,
        4898,
        3017,
        2869,
        1308,
        4904,
        4276,
        621,
        2661,
        816,
        760,
        1534,
        643,
        2763,
        922,
        1227,
        584,
        2606,
        1281,
        2007,
        4137,
        4787,
        3047,
        4454,
        2087,
        989,
        2138,
        2248,
        1746,
        2047,
        2283,
        2051,
        3,
        4605,
        4645,
        2997,
        3335,
        4835,
        4776,
        516,
        2144,
        3320,
        605,
        213,
        4034,
        2269,
        2949,
        358,
        1586,
        2203,
        3386,
        331,
        3129,
        1629,
        376,
        4512,
        246,
        355,
        320,
        2284,
        3927,
        1914,
        1571,
        1000,
        2929,
        4036,
        2127,
        2969,
        144,
        2885,
        1115,
        3866,
        2639,
        1761,
        3826,
        3737,
        997,
        2173,
        1555,
        4120,
        337,
        177,
        2181,
        2669,
        2355,
        3533,
        2850,
        3138,
        2799,
        1005,
        1690,
        1745,
        4393,
        1347,
        3315,
        1222,
        3325,
        1503,
        3893,
        167,
        2691,
        697,
        3106,
        3960,
        2037,
        3940,
        2702,
        4493,
        1153,
        1691,
        4440,
        1323,
        4943,
        2359,
        3646,
        1349,
        2263,
        3874,
        2953,
        2336,
        859,
        2551,
        2169,
        307,
        1034,
        499,
        2804,
        3726,
        1582,
        924,
        4429,
        3105,
        3543,
        2752,
        148,
        794,
        2180,
        4321,
        3290,
        356,
        3185,
        2624,
        86,
        1985,
        1285,
        574,
        3421,
        2198,
        658,
        2031,
        1518,
        471,
        2474,
        272,
        288,
        3355,
        1801,
        4066,
        1673,
        3573,
        3593,
        1869,
        2992,
        1363,
        112,
        650,
        3437,
        493,
        4308,
        4382,
        2940,
        2095,
        632,
        2069,
        1968,
        1995,
        1880,
        4141,
        4467,
        1856,
        83,
        3416,
        2091,
        3642,
        4064,
        2747,
        2140,
        4113,
        708,
        2114,
        4272,
        4073,
        1097,
        221,
        4460,
        3446,
        4284,
        3078,
        2762,
        1131,
        3324,
        2262,
        2770,
        692,
        2323,
        1844,
        3549,
        1163,
        4044,
        1550,
        3805,
        533,
        3364,
        2561,
        469,
        4750,
        4707,
        3445,
        4941,
        1294,
        1487,
        1784,
        4441,
        1013,
        3273,
        3491,
        2163,
        552,
        4222,
        1198,
        1613,
        2921,
        3778,
        4128,
        4679,
        3937,
        2876,
        4154,
        4107,
        3959,
        2043,
        156,
        635,
        3195,
        4911,
        3175,
        4335,
        3822,
        1919,
        4002,
        1970,
        2339,
        2422,
        2946,
        960,
        983,
        3875,
        2680,
        3348,
        1261,
        1319,
        3758,
        88,
        2599,
        4161,
        4713,
        1739,
        3635,
        3154,
        3658,
        921,
        2577,
        1991,
        2340,
        3973,
        1637,
        1778,
        4374,
        71,
        3544,
        503,
        1789,
        964,
        978,
        2009,
        3675,
        1220,
        2446,
        3629,
        2019,
        4538,
        2451,
        2,
        3241,
        1643,
        2822,
        2358,
        13,
        4151,
        1123,
        2267,
        2398,
        2382,
        175,
        26,
        3067,
        2044,
        834,
        4341,
        4352,
        2285,
        954,
        1372,
        3672,
        4350,
        2549,
        4296,
        566,
        489,
        1247,
        1089,
        2982,
        3774,
        1650,
        4087,
        537,
        3011,
        4875,
        4451,
        1758,
        3281,
        3113,
        1600,
        4931,
        2460,
        2206,
        1667,
        944,
        1751,
        945,
        2578,
        4146,
        2671,
        1649,
        1719,
        3816,
        277,
        2657,
        4436,
        3203,
        4601,
        1743,
        4672,
        4622,
        2881,
        4395,
        931,
        3755,
        3258,
        1774,
        1514,
        573,
        3528,
        4811,
        1403,
        3488,
        4226,
        2387,
        3560,
        1610,
        1923,
        548,
        4583,
        3580,
        2985,
        2507,
        1133,
        230,
        2392,
        1976,
        3266,
        2130,
        1940,
        883,
        139,
        4181,
        2590,
        2602,
        2694,
        3332,
        4689,
        4570,
        2128,
        1026,
        2742,
        433,
        84,
        4746,
        2052,
        4449,
        66,
        3379,
        2240,
        1780,
        1994,
        3014,
        1413,
        496,
        2936,
        4671,
        2913,
        1120,
        4618,
        4675,
        1883,
        3610,
        3227,
        2732,
        3323,
        1254,
        18,
        3042,
        4217,
        456,
        3454,
        4834,
        909,
        1367,
        3435,
        912,
        99,
        494,
        4706,
        2312,
        3072,
        4883,
        4169,
        2115,
        948,
        4326,
        3059,
        609,
        1237,
        900,
        2238,
        3220,
        1187,
        406,
        131,
        3818,
        440,
        2190,
        3561,
        1512,
        3221,
        904,
        3438,
        3142,
        281,
        4411,
        1270,
        725,
        266,
        2613,
        2878,
        585,
        1969,
        3500,
        3116,
        3030,
        1248,
        3722,
        3357,
        1328,
        1155,
        191,
        3370,
        3781,
        2720,
        4879,
        915,
        2833,
        863,
        1779,
        1464,
        2349,
        1505,
        4473,
        998,
        4471,
        1936,
        1813,
        4865,
        3586,
        3744,
        38,
        1931,
        3975,
        4786,
        3202,
        3269,
        4404,
        1310,
        3821,
        4676,
        809,
        1055,
        250,
        3303,
        1590,
        4738,
        350,
        2690,
        693,
        432,
        4028,
        2424,
        10,
        4598,
        3371,
        2993,
        2889,
        304,
        930,
        1662,
        4724,
        1495,
        4103,
        2411,
        2093,
        4749,
        2780,
        4952,
        3115,
        3674,
        1101,
        623,
        4832,
        3746,
        29,
        478,
        2792,
        1962,
        4529,
        1341,
        4621,
        4369,
        2187,
        4773,
        4056,
        3326,
        4183,
        3356,
        3887,
        4917,
        2663,
        1018,
        1402,
        4330,
        3576,
        1865,
        2666,
        460,
        3636,
        4629,
        2097,
        3127,
        3931,
        2536,
        3441,
        3480,
        3018,
        1390,
        1729,
        2254,
        724,
        3715,
        4117,
        2644,
        3919,
        1839,
        2353,
        2300,
        2511,
        2847,
        2099,
        777,
        413,
        2836,
        3514,
        3253,
        283,
        2060,
        3525,
        4263,
        873,
        2789,
        344,
        4863,
        2499,
        1,
        3110,
        1971,
        3102,
        502,
        3209,
        3229,
        701,
        550,
        1699,
        3104,
        3245,
        4802,
        153,
        1803,
        637,
        3583,
        1959,
        186,
        1450,
        2160,
        1257,
        1374,
        1762,
        2399,
        2337,
        3412,
        1216,
        2100,
        4053,
        1419,
        1709,
        4916,
        163,
        2716,
        1540,
        1056,
        4492,
        2068,
        4674,
        1652,
        2211,
        1841,
        1325,
        3776,
        3761,
        2401,
        269,
        2184,
        4673,
        2486,
        409,
        3797,
        2761,
        4734,
        3884,
        3542,
        3620,
        520,
        4165,
        2842,
        313,
        4748,
        2652,
        2951,
        1379,
        4982,
        3688,
        464,
        329,
        1887,
        3837,
        2501,
        3117,
        3924,
        3338,
        3987,
        3263,
        1740,
        1009,
        781,
        4784,
        1702,
        2972,
        2610,
        3208,
        4842,
        1623,
        2589,
        2638,
        2520,
        1765,
        1102,
        4567,
        1932,
        1820,
        589,
        2228,
        2570,
        4367,
        2442,
        4166,
        1928,
        2356,
        903,
        1490,
        2565,
        4438,
        3900,
        2897,
        2005,
        1866,
        3812,
        4889,
        1444,
        4714,
        2961,
        2956,
        4513,
        1282,
        1453,
        3267,
        4205,
        1960,
        715,
        3133,
        1262,
        4743,
        4424,
        4007,
        3297,
        2777,
        4131,
        4207,
        4874,
        1442,
        1683,
        385,
        4215,
        668,
        4970,
        23,
        340,
        1631,
        1071,
        3898,
        3343,
        445,
        308,
        1677,
        4932,
        2174,
        322,
        2684,
        1738,
        3252,
        430,
        2711,
        4304,
        901,
        2085,
        402,
        318,
        2376,
        3704,
        4452,
        4838,
        2918,
        4093,
        3180,
        2697,
        1197,
        1925,
        1685,
        2971,
        4665,
        791,
        1587,
        3276,
        3327,
        2727,
        176,
        4048,
        2458,
        242,
        4322,
        1300,
        4208,
        183,
        1812,
        2776,
        4446,
        2814,
        1330,
        3334,
        4198,
        1853,
        2023,
        861,
        398,
        2939,
        858,
        1095,
        3809,
        2831,
        3199,
        2722,
        4810,
        79,
        4338,
        2938,
        4704,
        3906,
        4447,
        5,
        1152,
        2266,
        3904,
        2825,
        4483,
        3788,
        3215,
        2534,
        2476,
        1448,
        3052,
        3100,
        4822,
        3647,
        996,
        2893,
        324,
        4769,
        2065,
        1177,
        251,
        4173,
        1244,
        4884,
        4527,
        1827,
        1630,
        3109,
        95,
        1686,
        4286,
        2352,
        380,
        1474,
        4756,
        441,
        991,
        3551,
        4735,
        2700,
        321,
        3336,
        3601,
        4132,
        3622,
        3377,
        279,
        3223,
        4664,
        4726,
        750,
        1424,
        4127,
        268,
        2287,
        1564,
        2414,
        1154,
        2393,
        3698,
        3829,
        3249,
        3056,
        936,
        4196,
        3019,
        1950,
        4094,
        4797,
        1245,
        3621,
        4134,
        3035,
        2945,
        1465,
        4076,
        2874,
        963,
        4700,
        4497,
        4779,
        1889,
        1104,
        4623,
        1053,
        1509,
        840,
        2245,
        2413,
        3086,
        287,
        4564,
        73,
        3840,
        2366,
        2739,
        4499,
        4964,
        1605,
        2277,
        166,
        3153,
        3066,
        48,
        3862,
        4603,
        567,
        500,
        981,
        192,
        4978,
        2737,
        4348,
        316,
        3564,
        1258,
        2492,
        4801,
        3426,
        4280,
        4110,
        3051,
        1392,
        3602,
        2786,
        2552,
        4914,
        3402,
        4037,
        3422,
        3009,
        4592,
        486,
        4552,
        3859,
        2319,
        1043,
        4965,
        3181,
        507,
        315,
        434,
        1569,
        3824,
        4055,
        184,
        2410,
        620,
        3624,
        3511,
        3084,
        1149,
        3757,
        4662,
        4568,
        367,
        690,
        3147,
        1058,
        472,
        365,
        4637,
        3234,
        4289,
        2334,
        1785,
        3270,
        3530,
        4759,
        553,
        1588,
        1462,
        2930,
        3236,
        4548,
        396,
        1737,
        959,
        319,
        1951,
        1251,
        1036,
        564,
        12,
        549,
        4294,
        2775,
        712,
        879,
        4660,
        2819,
        3842,
        3732,
        2231,
        3200,
        3860,
        3985,
        4641,
        197,
        1826,
        3648,
        4737,
        843,
        3930,
        2527,
        3448,
        4267,
        449,
        699,
        1551,
        2016,
        482,
        4923,
        1350,
        4248,
        846,
        4487,
        1368,
        2291,
        1077,
        2324,
        4958,
        2647,
        2386,
        3079,
        2516,
        2294,
        217,
        467,
        586,
        4767,
        709,
        1576,
        4445,
        1974,
        1644,
        4067,
        3596,
        275,
        2286,
        3406,
        3712,
        3411,
        4039,
        920,
        3719,
        3760,
        758,
        4029,
        2338,
        3526,
        3705,
        2212,
        4293,
        4599,
        4,
        2562,
        45,
        2385,
        3611,
        1939,
        240,
        1890,
        1098,
        1027,
        2959,
        4974,
        2848,
        4052,
        3070,
        4268,
        2461,
        2034,
        1725,
        875,
        4852,
        4366,
        214,
        3024,
        1283,
        3941,
        1578,
        3111,
        1703,
        4012,
        908,
        3735,
        1351,
        1492,
        1562,
        3895,
        4945,
        2192,
        1166,
        1088,
        1170,
        4847,
        544,
        164,
        2744,
        1837,
        554,
        918,
        774,
        1221,
        267,
        4486,
        976,
        2239,
        3981,
        2807,
        3854,
        2151,
        3885,
        2756,
        1904,
        4625,
        3393,
        4659,
        1387,
        4409,
        476,
        3828,
        3879,
        4234,
        257,
        3050,
        4771,
        3721,
        3238,
        3503,
        2059,
        751,
        4809,
        3546,
        3404,
        714,
        1527,
        4157,
        3177,
        2573,
        1132,
        3694,
        2342,
        2249,
        630,
        4314,
        1210,
        354,
        1804,
        2222,
        2568,
        804,
        4418,
        3461,
        4323,
        2506,
        2089,
        2609,
        3711,
        1466,
        3390,
        2500,
        3433,
        4718,
        1339,
        3964,
        1137,
        1728,
        1871,
        4212,
        4023,
        4375,
        1849,
        3640,
        4690,
        135,
        1831,
        1074,
        3224,
        3853,
        3028,
        4170,
        910,
        1380,
        4211,
        3075,
        3486,
        336,
        4182,
        1681,
        3431,
        4619,
        3318,
        1786,
        3329,
        3186,
        2651,
        3226,
        4414,
        799,
        204,
        3765,
        1103,
        3589,
        2660,
        4862,
        211,
        614,
        4909,
        3444,
        1147,
        284,
        1459,
        1108,
        1775,
        1249,
        865,
        925,
        3481,
        1741,
        822,
        4518,
        4562,
        1054,
        2001,
        72,
        1759,
        4489,
        3085,
        399,
        452,
        339,
        1584,
        1331,
        813,
        2306,
        1011,
        4098,
        2754,
        4283,
        2049,
        4365,
        2650,
        2295,
        2550,
        1144,
        427,
        1226,
        4495,
        556,
        671,
        1854,
        4249,
        1242,
        3397,
        1471,
        2444,
        4585,
        3729,
        3730,
        2057,
        2976,
        2259,
        2171,
        753,
        4699,
        4218,
        1176,
        1543,
        1770,
        3956,
        1499,
        4343,
        4770,
        776,
        4561,
        3016,
        2553,
        2665,
        4458,
        1140,
        2619,
        1397,
        428,
        1593,
        2927,
        1336,
        3888,
        4574,
        2629,
        2270,
        60,
        578,
        3948,
        2084,
        3141,
        4206,
        1806,
        4478,
        1894,
        2179,
        4806,
        1037,
        3460,
        4309,
        3682,
        3004,
        2210,
        2905,
        4836,
        2124,
        1947,
        52,
        1668,
        3575,
        557,
        3068,
        2574,
        4816,
        2178,
        3339,
        3770,
        2380,
        2535,
        2104,
        2794,
        2554,
        4640,
        4814,
        562,
        4482,
        3279,
        3559,
        4262,
        2021,
        2693,
        3474,
        1151,
        661,
        1079,
        317,
        3163,
        2670,
        1376,
        2039,
        1723,
        867,
        3901,
        2816,
        4354,
        4646,
        4740,
        2801,
        4624,
        3851,
        1020,
        4591,
        4287,
        756,
        506,
        338,
        2225,
        1007,
        1538,
        2891,
        4412,
        3277,
        1832,
        3762,
        1920,
        3696,
        105,
        1384,
        81,
        342,
        4866,
        3679,
        2975,
        2512,
        3170,
        4351,
        3136,
        418,
        4084,
        1639,
        610,
        3734,
        2517,
        4310,
        2103,
        416,
        278,
        884,
        2601,
        1457,
        2310,
        3666,
        1717,
        3295,
        475,
        4177,
        2475,
        92,
        3466,
        4408,
        3398,
        124,
        2813,
        2709,
        1500,
        49,
        349,
        1598,
        4505,
        1437,
        4888,
        2496,
        3750,
        1091,
        4095,
        3291,
        1358,
        34,
        4785,
        4577,
        1714,
        3493,
        483,
        4274,
        4828,
        2363,
        4275,
        522,
        3974,
        3645,
        4504,
        4152,
        4790,
        1530,
        134,
        3429,
        3264,
        4934,
        4223,
        2738,
        4508,
        3802,
        3558,
        4647,
        4730,
        2933,
        345,
        4319,
        2175,
        1850,
        3914,
        828,
        1508,
        3027,
        3023,
        1752,
        4503,
        3557,
        59,
        3139,
        2135,
        559,
        1877,
        2704,
        96,
        2045,
        4856,
        790,
        1516,
        2194,
        4794,
        3183,
        2999,
        108,
        346,
        2802,
        4612,
        2374,
        501,
        3119,
        2073,
        736,
        2132,
        2524,
        1493,
        1212,
        3242,
        2503,
        3137,
        743,
        4824,
        2166,
        3856,
        3597,
        2025,
        984,
        3012,
        685,
        616,
        1313,
        147,
        818,
        1391,
        121,
        4892,
        122,
        735,
        913,
        3768,
        1399,
        2066,
        3025,
        1805,
        958,
        253,
        4666,
        3244,
        3328,
        4178,
        955,
        670,
        1047,
        1207,
        3168,
        4159,
        655,
        1879,
        4423,
        2901,
        3581,
        933,
        2508,
        2074,
        852,
        937,
        2781,
        2298,
        4581,
        4762,
        973,
        4717,
        2837,
        3920,
        663,
        249,
        4597,
        2391,
        4857,
        4236,
        2204,
        3918,
        3512,
        1642,
        3847,
        967,
        410,
        1557,
        561,
        4542,
        3392,
        3678,
        2311,
        2369,
        4320,
        3380,
        2682,
        4189,
        689,
        891,
        3662,
        36,
        4873,
        4090,
        4079,
        334,
        1477,
        880,
        2236,
        4944,
        4068,
        4299,
        1537,
        295,
        2092,
        6,
        3819,
        2987,
        125,
        985,
        1589,
        4282,
        2575,
        519,
        4071,
        1836,
        2767,
        1119,
        1002,
        890,
        943,
        1182,
        4720,
        4195,
        1558,
        3425,
        838,
        4396,
        118,
        1997,
        4782,
        2215,
        2555,
        141,
        4804,
        986,
        2839,
        1842,
        2479,
        734,
        3800,
        4789,
        633,
        4984,
        495,
        90,
        841,
        1656,
        3069,
        3248,
        1885,
        2733,
        4563,
        4669,
        2538,
        844,
        4433,
        3345,
        2631,
        4680,
        718,
        656,
        823,
        3534,
        4896,
        4116,
        4696,
        935,
        2659,
        2260,
        1232,
        3990,
        4760,
        412,
        3845,
        2357,
        3048,
        2426,
        1083,
        3235,
        2326,
        155,
        2937,
        1377,
        220,
        4265,
        2721,
        2676,
        178,
        1911,
        2111,
        1769,
        180,
        1209,
        3120,
        821,
        4209,
        4256,
        538,
        1302,
        4295,
        2614,
        492,
        710,
        3041,
        3519,
        2290,
        128,
        1704,
        2123,
        3566,
        4041,
        1521,
        77,
        2604,
        1961,
        3756,
        1205,
        3773,
        4009,
        4630,
        117,
        1604,
        1815,
        1494,
        1171,
        4303,
        1369,
        1807,
        2757,
        3536,
        4257,
        1172,
        3718,
        3925,
        3118,
        130,
        423,
        4017,
        4101,
        1754,
        4204,
        1206,
        4691,
        4114,
        42,
        1340,
        3394,
        4443,
        3563,
        2877,
        1573,
        4406,
        454,
        597,
        3271,
        2010,
        510,
        4979,
        1279,
        1268,
        2350,
        1901,
        3434,
        826,
        881,
        3703,
        1814,
        3753,
        3676,
        860,
        2597,
        4846,
        2072,
        2725,
        3603,
        3373,
        4867,
        2233,
        1592,
        4616,
        3992,
        789,
        682,
        885,
        3472,
        1435,
        4763,
        2855,
        1840,
        927,
        162,
        465,
        2434,
        1930,
        2655,
        137,
        4054,
        3587,
        4086,
        2216,
        824,
        3015,
        4899,
        2419,
        4571,
        4102,
        1795,
        8,
        1096,
        3858,
        4246,
        4291,
        2926,
        1993,
        1846,
        3713,
        3375,
        237,
        394,
        3524,
        4843,
        4949,
        2736,
        1647,
        4072,
        1907,
        2530,
        4373,
        4138,
        4935,
        3880,
        3608,
        4721,
        676,
        2557,
        4920,
        3284,
        3471,
        1430,
        3358,
        2397,
        657,
        3792,
        2525,
        4590,
        811,
        203,
        1507,
        576,
        2388,
        3171,
        810,
        902,
        517,
        1645,
        2866,
        3097,
        3872,
        3374,
        808,
        3485,
        1008,
        4139,
        181,
        2931,
        4939,
        631,
        3878,
        4014,
        2546,
        3322,
        2182,
        2615,
        1532,
        2723,
        1189,
        1800,
        1195,
        3659,
        4155,
        3656,
        2621,
        1682,
        3350,
        1284,
        4910,
        297,
        3125,
        3986,
        1017,
        2129,
        58,
        1455,
        1858,
        2935,
        1742,
        1628,
        3470,
        4742,
        3505,
        4172,
        3873,
        2912,
        2343,
        591,
        3890,
        2463,
        645,
        4325,
        4819,
        2749,
        768,
        1381,
        2769,
        2145,
        2835,
        1164,
        4511,
        4400,
        3996,
        1782,
        2718,
        4277,
        870,
        4230,
        208,
        2480,
        4977,
        4099,
        1470,
        2433,
        2625,
        39,
        3452,
        3609,
        3649,
        607,
        603,
        2080,
        1317,
        1443,
        1753,
        4650,
        4757,
        4777,
        889,
        4439,
        2081,
        3965,
        2302,
        3246,
        1563,
        4938,
        2437,
        1666,
        3492,
        4610,
        444,
        1117,
        1436,
        3389,
        4281,
        1763,
        4903,
        1612,
        2962,
        782,
        3572,
        4981,
        2870,
        3469,
        1468,
        2632,
        425,
        1461,
        2692,
        2022,
        1597,
        1061,
        3574,
        2583,
        3710,
        2455,
        3577,
        325,
        1556,
        4739,
        1601,
        839,
        170,
        2978,
        4913,
        4339,
        4498,
        2805,
        749,
        4519,
        4639,
        3639,
        4219,
        2603,
        3337,
        2784,
        2083,
        4642,
        2966,
        4091,
        698,
        145,
        2033,
        4288,
        309,
        641,
        3683,
        2332,
        619,
        695,
        4130,
        4626,
        4635,
        1066,
        3162,
        259,
        1359,
        3728,
        1679,
        421,
        4694,
        4549,
        897,
        4370,
        306,
        705,
        2218,
        1771,
        759,
        2995,
        874,
        871,
        4290,
        4416,
        3830,
        4550,
        1744,
        1078,
        3494,
        1296,
        1966,
        2990,
        2199,
        651,
        3562,
        2857,
        3881,
        765,
        2907,
        624,
        2809,
        4344,
        193,
        4515,
        1546,
        4793,
        1860,
        1596,
        1303,
        3684,
        3616,
        4959,
        1127,
        2063,
        3436,
        849,
        4144,
        4654,
        793,
        854,
        1190,
        2320,
        3899,
        3418,
        4019,
        248,
        2431,
        2020,
        4992,
        4430,
        1640,
        1038,
        4821,
        265,
        577,
        3265,
        3228,
        2172,
        4829,
        2164,
        1861,
        1783,
        3538,
        2920,
        1553,
        2994,
        3832,
        2880,
        391,
        2197,
        1021,
        27,
        400,
        4078,
        3569,
        4179,
        518,
        436,
        3022,
        4229,
        3430,
        2274,
        4582,
        3164,
        1280,
        3905,
        446,
        1314,
        3550,
        1476,
        15,
        4761,
        851,
        4360,
        4535,
        3417,
        3607,
        905,
        3094,
        4368,
        1165,
        3811,
        4266,
        530,
        3131,
        366,
        190,
        4312,
        2947,
        2360,
        3709,
        4252,
        420,
        2746,
        892,
        241,
        4926,
        3005,
        2917,
        1548,
        3088,
        1552,
        876,
        1434,
        868,
        233,
        3954,
        2984,
        1893,
        3618,
        2964,
        4850,
        2649,
        775,
        4948,
        1987,
        1486,
        1913,
        1406,
        2122,
        1118,
        4143,
        3808,
        1416,
        1992,
        3212,
        4871,
        4980,
        2958,
        352,
        4523,
        1185,
        2117,
        1076,
        4062,
        4698,
        3365,
        2979,
        3680,
        1933,
        188,
        488,
        1179,
        3795,
        788,
        3532,
        785,
        4031,
        4168,
        546,
        4990,
        1937,
        3150,
        2483,
        442,
        4488,
        3427,
        4880,
        741,
        1788,
        2488,
        1408,
        1426,
        4428,
        1428,
        3293,
        152,
        3929,
        606,
        485,
        2230,
        487,
        4586,
        1884,
        2677,
        1591,
        1594,
        3702,
        1305,
        2636,
        2679,
        3123,
        1792,
        1452,
        4040,
        4050,
        1816,
        2743,
        2403,
        3695,
        4025,
        196,
        3296,
        1888,
        1322,
        2989,
        4470,
        3058,
        971,
        1355,
        2078,
        1632,
        2265,
        1080,
        3367,
        4732,
        3846,
        1957,
        53,
        4074,
        1912,
        4313,
        3146,
        4849,
        1145,
        3101,
        2815,
        3002,
        93,
        2932,
        2714,
        2372,
        2318,
        1326,
        527,
        4658,
        1478,
        1909,
        3415,
        3521,
        4833,
        3626,
        165,
        3046,
        4109,
        1371,
        2214,
        2888,
        1025,
        1772,
        3771,
        2490,
        2282,
        115,
        3699,
        2797,
        1606,
        2149,
        2445,
        972,
        3330,
        3081,
        642,
        1064,
        2963,
        3409,
        2886,
        2331,
        664,
        4035,
        1063,
        528,
        2344,
        3617,
        3299,
        1607,
        157,
        4327,
        2113,
        1365,
        1298,
        312,
        4261,
        2567,
        3473,
        2278,
        2510,
        611,
        4316,
        2309,
        1246,
        4919,
        1441,
        3942,
        1732,
        4576,
        4043,
        3633,
        1528,
        3384,
        1675,
        228,
        1200,
        3902,
        1941,
        4815,
        326,
        3311,
        1383,
        4413,
        415,
        212,
        1798,
        2367,
        2735,
        1438,
        1105,
        2675,
        4578,
        2303,
        1307,
        4271,
        3908,
        2642,
        982,
        893,
        2528,
        1425,
        1014,
        1211,
        311,
        2317,
        2126,
        4126,
        4507,
        2457,
        534,
        888,
        1199,
        2856,
        1669,
        2838,
        2293,
        2322,
        4362,
        2710,
        1219,
        2315,
        4442,
        4415,
        4059,
        2257,
        1882,
        1451,
        1764,
        4468,
        1747,
        4918,
        3405,
        2564,
        2795,
        3794,
        4709,
        4026,
        4047,
        2438,
        3615,
        4615,
        2678,
        894,
        1238,
        2150,
        1354,
        3144,
        2003,
        3508,
        2330,
        4397,
        3787,
        3745,
        2894,
        4466,
        1696,
        1791,
        558,
        761,
        3256,
        404,
        3064,
        1897,
        417,
        4140,
        371,
        3359,
        2404,
        3057,
        2450,
        4203,
        4190,
        2497,
        2153,
        2586,
        923,
        1046,
        2559,
        3687,
        1417,
        252,
        1708,
        1201,
        898,
        4653,
        2887,
        4837,
        1109,
        608,
        3462,
        1267,
        4358,
        524,
        4840,
        419,
        1429,
        1875,
        1822,
        4273,
        1756,
        1603,
        4998,
        1473,
        132,
        68,
        21,
        3251,
        694,
        3740,
        3366,
        1906,
        2633,
        273,
        3317,
        2362,
        3130,
        4860,
        4859,
        2858,
        236,
        1750,
        4069,
        1721,
        3372,
        1029,
        4186,
        4702,
        2161,
        1615,
        333,
        2105,
        490,
        2674,
        1433,
        4097,
        3641,
        1736,
        1271,
        1633,
        4118,
        3665,
        239,
        3306,
        4638,
        929,
        957,
        1073,
        1385,
        362,
        542,
        1720,
        1099,
        1191,
        161,
        3529,
        1214,
        1059,
        4197,
        3903,
        3555,
        625,
        2687,
        1614,
        3897,
        1566,
        4247,
        3361,
        674,
        784,
        728,
        426,
        4543,
        3280,
        4864,
        3298,
        588,
        2695,
        1230,
        3477,
        2482,
        2327,
        3634,
        2415,
        2860,
        4388,
        1141,
        1870,
        1100,
        3953,
        681,
        4901,
        3545,
        414,
        3501,
        3341,
        3413,
        1599,
        4125,
        3692,
        1862,
        819,
        3547,
        2626,
        3039,
        4461,
        3857,
        2529,
        3585,
        3993,
        2726,
        4712,
        575,
        3071,
        2522,
        2185,
        3783,
        1734,
        662,
        330,
        357,
        2183,
        2273,
        2308,
        2787,
        1269,
        1609,
        67,
        4614,
        4232,
        3686,
        461,
        4016,
        4745,
        3310,
        3262,
        4187,
        1250,
        1845,
        4175,
        3582,
        3644,
        2421,
        1161,
        2118,
        3159,
        1705,
        2155,
        2844,
        3531,
        290,
        3261,
        3399,
        2699,
        4046,
        1892,
        466,
        119,
        1618,
        56,
        4475,
        4462,
        1454,
        613,
        392,
        437,
        4631,
        4722,
        4557,
        3233,
        3008,
        2067,
        974,
        302,
        4556,
        3689,
        3213,
        4228,
        2820,
        1766,
        3950,
        1935,
        652,
        4634,
        50,
        2170,
        3378,
        3408,
        4655,
        4878,
        4971,
        1033,
        2364,
        4421,
        4813,
        1689,
        3623,
        1651,
        3912,
        2186,
        2193,
        4324,
        683,
        1184,
        1023,
        1412,
        832,
        4259,
        2863,
        2872,
        4682,
        3003,
        98,
        4716,
        1333,
        721,
        3188,
        1048,
        1181,
        1169,
        1229,
        2540,
        3198,
        4506,
        65,
        1405,
        4633,
        4996,
        878,
        3638,
        2617,
        429,
        2605,
        3194,
        453,
        3727,
        1665,
        44,
        300,
        2219,
        4491,
        4241,
        2616,
        3934,
        523,
        4377,
        4075,
        1554,
        368,
        3173,
        4481,
        4940,
        3663,
        1810,
        4058,
        3995,
        2991,
        745,
        4202,
        4148,
        2607,
        3650,
        2168,
        158,
        1768,
        202,
        2402,
        1917,
        4112,
        1092,
        173,
        4145,
        2297,
        1790,
        1256,
        497,
        2996,
        1944,
        2478,
        1304,
        4437,
        4030,
        2759,
        2705,
        1012,
        3598,
        4695,
        3833,
        1568,
        3928,
        78,
        2980,
        4983,
        69,
        3497,
        3780,
        4264,
        2986,
        1711,
        2973,
        1757,
        3864,
        3167,
        4951,
        2910,
        2221,
        3852,
        3128,
        3222,
        1415,
        3476,
        4142,
        2724,
        2443,
        3189,
        3321,
        2834,
        1529,
        4807,
        4463,
        138,
        3074,
        2119,
        598,
        1506,
        3289,
        545,
        3506,
        2147,
        4546,
        2618,
        4235,
        2417,
        1670,
        143,
        2672,
        3810,
        1414,
        1952,
        521,
        1188,
        3432,
        3090,
        4768,
        218,
        4656,
        2753,
        4876,
        2924,
        1945,
        2365,
        2643,
        1338,
        4355,
        684,
        3707,
        348,
        4174,
        2798,
        626,
        1111,
        3459,
        3701,
        1802,
        1602,
        4501,
        359,
        2041,
        680,
        2076,
        174,
        2088,
        2227,
        2439,
        4831,
        1657,
        1972,
        962,
        3522,
        1353,
        264,
        3145,
        462,
        2779,
        3489,
        2698,
        140,
        798,
        3112,
        837,
        686,
        773,
        2017,
        4531,
        2447,
        2148,
        4371,
        2241,
        3309,
        4975,
        2768,
        1479,
        2772,
        4731,
        2208,
        374,
        37,
        3568,
        3838,
        4270,
        89,
        1253,
        1440,
        842,
        224,
        3286,
        3553,
        4085,
        4514,
        4537,
        3613,
        825,
        82,
        1967,
        4243,
        4426,
        4077,
        1125,
        4573,
        4018,
        4410,
        2955,
        2412,
        2588,
        2466,
        4162,
        4024,
        941,
        2774,
        1998,
        2498,
        2235,
        3401,
        4868,
        1287,
        3539,
        3799,
        3567,
        3785,
        1316,
        127,
        1344,
        4697,
        389,
        1560,
        4989,
        660,
        3877,
        205,
        4448,
        200,
        2108,
        2968,
        4180,
        2778,
        3305,
        62,
        4649,
        254,
        2002,
        999,
        390,
        3921,
        1749,
        4346,
        291,
        3282,
        2205,
        3388,
        830,
        2908,
        4775,
        2201,
        4013,
        3124,
        2882,
        2812,
        3997,
        261,
        1934,
        3098,
        1116,
        276,
        679,
        328,
        3083,
        3952,
        815,
        4153,
        2593,
        2600,
        580,
        2521,
        2120,
        3578,
        4516,
        263,
        786,
        2793,
        3957,
        2627,
        744,
        1982,
        4799,
        2563,
        3520,
        2102,
        940,
        397,
        505,
        1082,
        4617,
        3782,
        4753,
        4536,
        3911,
        3043,
        223,
        3240,
        2408,
        4727,
        3044,
        560,
        450,
        2137,
        1501,
        1829,
        395,
        1718,
        1483,
        4962,
        17,
        474,
        4022,
        1539,
        4961,
        3108,
        185,
        4484,
        4595,
        1404,
        270,
        2865,
        2234,
        525,
        3653,
        3036,
        4450,
        4584,
        94,
        755,
        1173,
        4869,
        3817,
        1855,
        2970,
        1204,
        848,
        3504,
        3510,
        2904,
        3395,
        2950,
        1619,
        3121,
        1274,
        4033,
        1157,
        4826,
        992,
        1409,
        1635,
        231,
        206,
        4502,
        1730,
        4399,
        293,
        3673,
        1695,
        956,
        1938,
        928,
        393,
        4891,
        3342,
        2027,
        4580,
        286,
        2101,
        1979,
        907,
        1273,
        2453,
        3076,
        3944,
        1293,
        995,
        1626,
        2701,
        4422,
        2731,
        3092,
        2289,
        4921,
        1986,
        2131,
        260,
        4986,
        4337,
        2654,
        47,
        850,
        2728,
        3958,
        820,
        678,
        4457,
        529,
        3867,
        583,
        4661,
        3968,
        3747,
        4929,
        4956,
        3450,
        706,
        3126,
        2058,
        3260,
        479,
        3383,
        262,
        2591,
        1965,
        4845,
        3831,
        2509,
        667,
        22,
        1497,
        4791,
        814,
        2110,
        4021,
        91,
        895,
        4485,
        113,
        2134,
        3661,
        540,
        3344,
        4877,
        919,
        872,
        463,
        4798,
        806,
        3178,
        194,
        767,
        1706,
        831,
        4405,
        3054,
        1039,
        1636,
        1624,
        109,
        403,
        1289,
        3766,
        3151,
        2830,
        2469,
        4681,
        1126,
        361,
        1797,
        4985,
        3414,
        2569,
        4477,
        3775,
        4752,
        4210,
        1491,
        1664,
        2481,
        3630,
        3590,
        2209,
        1535,
        1318,
        3861,
        3207,
        1040,
        3396,
        4593,
        3571,
        4474,
        3671,
        2592,
        1964,
        1352,
        953,
        1357,
        1260,
        2729,
        739,
        2062,
        2015,
        646,
        4715,
        3579,
        2988,
        4307,
        1891,
        1523,
        1447,
        2484,
        1776,
        4104,
        4915,
        2868,
        1625,
        3204,
        4133,
        3892,
        1824,
        4432,
        4520,
        993,
        2121,
        4606,
        1648,
        2755,
        2261,
        2708,
        159,
        1809,
        195,
        4848,
        541,
        4754,
        3272,
        1107,
        1030,
        969,
        2472,
        3716,
        4160,
        4149,
        3936,
        2688,
        142,
        2082,
        3869,
        742,
        1852,
        3132,
        779,
        1297,
        2493,
        1504,
        296,
        4613,
        4893,
        3759,
        133,
        1716,
        565,
        1113,
        4444,
        669,
        1411,
        1360,
        258,
        4800,
        424,
        787,
        3254,
        1567,
        532,
        1924,
        4329,
        480,
        2436,
        2861,
        2485,
        481,
        2783,
        1519,
        2892,
        2427,
        2430,
        1608,
        1658,
        2077,
        2668,
        622,
        2648,
        3201,
        1421,
        1286,
        1052,
        4942,
        1106,
        1692,
        4237,
        2572,
        2325,
        2328,
        627,
        4765,
        33,
        2707,
        866,
        547,
        672,
        2765,
        4539,
        3420,
        703,
        687,
        4566,
        1362,
        3423,
        1150,
        4061,
        106,
        3155,
        4391,
        2377,
        2785,
        378,
        4372,
        1259,
        1010,
        1943,
        3152,
        4431,
        1727,
        2448,
        4216,
        770,
        2645,
        4224,
        3362,
        4741,
        4517,
        2515,
        3122,
        1223,
        1896,
        4063,
        4858,
        4728,
        688,
        1065,
        1463,
        792,
        1196,
        4163,
        2133,
        3010,
        4472,
        2375,
        2462,
        4003,
        3731,
        2048,
        3970,
        3451,
        2420,
        1142,
        3655,
        1290,
        4336,
        2232,
        3991,
        3796,
        1672,
        726,
        4524,
        3140,
        1697,
        4010,
        1908,
        2584,
        3034,
        40,
        4045,
        375,
        1093,
        1327,
        1292,
        2014,
        3834,
        2468,
        3099,
        1041,
        2157,
        2685,
        2944,
        335,
        1472,
        1213,
        3989,
        4376,
        4092,
        1502,
        3943,
        1676,
        182,
        4390,
        2883,
        3107,
        3670,
        2368,
        1773,
        1231,
        4555,
        4176,
        2189,
        1975,
        2852,
        1264,
        2370,
        3962,
        3049,
        2409,
        2473,
        3368,
        3657,
        4553,
        4687,
        4121,
        1324,
        1410,
        1217,
        4361,
        1767,
        3217,
        3882,
        1715,
        1688,
        877,
        1817,
        4729,
        3724,
        3777,
        2226,
        3619,
        1469,
        4115,
        64,
        1620,
        1049,
        769,
        2313,
        4643,
        4783,
        4841,
        1332,
        2389,
        1084,
        1867,
        4227,
        3976,
        298,
        3065,
        3736,
        116,
        4565,
        3668,
        1978,
        2829,
        3865,
        2026,
        1641,
        979,
        3463,
        2686,
        1581,
        2464,
        3160,
        1847,
        569,
        1515,
        4015,
        2828,
        2634,
        4912,
        25,
        3955,
        4317,
        3868,
        2423,
        4851,
        4685,
        1542,
        3169,
        4966,
        4250,
        899,
        1420,
        1208,
        1733,
        3751,
        2808,
        2558,
        4667,
        4854,
        1481,
        4559,
        2596,
        3001,
        582,
        2029,
        459,
        3909,
        2224,
        2281,
        209,
        168
    ];
    using Counters for Counters.Counter;
    Counters.Counter public _tokenIds;
    uint256 public unitPrice = 0.01 ether;
    bool public isSale = true;
    bool public isOpen = false;

    uint256 public totalCount = 10000;
    uint256 public purchaseLimit = 20;
    address receiveAccount;
    address[] nftAddressByMinted = [
        0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879,
        0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879,
        0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879,
        0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879,
        0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879
    ];

    /******************************************************************************************************
     * Chainlink: Starts
     *******************************************************************************************************/

    // chainlink contract interfaces
    VRFCoordinatorV2Interface COORDINATOR;
    LinkTokenInterface LINKTOKEN;

    // Chainlink subscription ID.
    uint64 public subscriptionId;

    // Chainlink vrfCoordinator
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    address public vrfCoordinator;

    // Chainlink LINK token contract. For other networks,
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    address public link;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // For a list of available gas lanes on each network,
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    bytes32 private keyHash;
    uint32 private callbackGasLimit = 200000;
    uint16 private requestConfirmations = 30;
    uint32 private numWords = 1;

    // This is the random number generated by chain link vrf.
    uint256 private chainlinkRandomNumber;

    // This is the chainlink requestId for vrf.
    uint256 private requestId;

    /******************************************************************************************************
     * Chainlink: Ends
     *******************************************************************************************************/

    constructor(
        uint64 _subscriptionId,
        address _vrfCoordinator,
        address _link,
        bytes32 _keyHash
    ) ERC721("Nostopia BlindBox", "NBB") VRFConsumerBaseV2(_vrfCoordinator) {
        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        LINKTOKEN = LinkTokenInterface(link);
        subscriptionId = _subscriptionId;
        vrfCoordinator = _vrfCoordinator;
        link = _link;
        keyHash = _keyHash;
    }

    function openBox(uint256[] memory _ids) public nonReentrant {
        require(isOpen, "Blind box opening has not started");
        for (uint256 i = 0; i < _ids.length; i++) {
            address tokenOwner = ownerOf(_ids[i]);
            require(
                _msgSender() == tokenOwner ||
                    isApprovedForAll(tokenOwner, _msgSender()),
                "ERC721: approve caller is not token owner nor approved for all"
            );

            _burn(_ids[i]);

            uint256 randomIndex = (_ids[i] + chainlinkRandomNumber) %
                seed.length;
            uint16 boxNumber = seed[randomIndex];

            if (boxNumber >= 1 && boxNumber <= 1000) {
                GameNftI gameNft = GameNftI(nftAddressByMinted[0]);
                gameNft.mint(tokenOwner);
            } else if (boxNumber > 1000 && boxNumber <= 2000) {
                GameNftI gameNft = GameNftI(nftAddressByMinted[1]);
                gameNft.mint(tokenOwner);
            } else if (boxNumber > 2000 && boxNumber <= 3000) {
                GameNftI gameNft = GameNftI(nftAddressByMinted[2]);
                gameNft.mint(tokenOwner);
            } else if (boxNumber > 3000 && boxNumber <= 4000) {
                GameNftI gameNft = GameNftI(nftAddressByMinted[3]);
                gameNft.mint(tokenOwner);
            } else if (boxNumber > 4000) {
                GameNftI gameNft = GameNftI(nftAddressByMinted[4]);
                gameNft.mint(tokenOwner);
            }
        }
    }

    /**
     * We request the Chainlink requestRandomWords to generate random number. The response will be handled by
     * fulfillRandomWords as callback once the request is complete.
     */
    function startOpenBox() public onlyOwner {
        require(!isOpen, "It has been executed");
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
    }

    /***********************************************************************************************************
     * This is the callback for the Chainlink requestRandomWords method called during the isOpen
     * execution.
     * We store the random number and start the  open box
     ***********************************************************************************************************/
    function fulfillRandomWords(
        uint256, /* requestId */
        uint256[] memory randomWords
    ) internal override {
        // get random number between 0 to 999,999,999,999,999.
        chainlinkRandomNumber = (randomWords[0] % (999999999999999));
        isOpen = true;
    }

    function mint(address _to) external onlyOwner {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        _mint(_to, newItemId);
    }

    function mintByBuy(uint8 _num) public payable nonReentrant {
        require(isSale, "The activity hasn't started yet");
        require(
            (balanceOf(msg.sender) + _num) <= purchaseLimit,
            "Purchase limit exceeded"
        );
        require(
            (_tokenIds.current() + _num) <= totalCount,
            "Maximum number exceeded"
        );
        require(
            msg.sender.balance >= (unitPrice * _num),
            "Insufficient balance"
        );
        require(msg.value == (unitPrice * _num), "Abnormal payment amount");
        for (uint256 i = 0; i < _num; i++) {
            _tokenIds.increment();
            uint256 newItemId = _tokenIds.current();
            _mint(msg.sender, newItemId);
        }
    }

    function setUnitPrice(uint256 _unitPrice) public onlyOwner {
        unitPrice = _unitPrice;
    }

    function setIsSale(bool _flag) public onlyOwner {
        isSale = _flag;
    }

    function setTotalCount(uint256 _totalCount) public onlyOwner {
        require(
            _totalCount > totalCount,
            "TotalCount cannot small then before"
        );
        totalCount = _totalCount;
    }

    function setPurchaseLimit(uint256 _purchaseLimit) public onlyOwner {
        purchaseLimit = _purchaseLimit;
    }

    function setReceiveAccount(address _receiveAccount) public onlyOwner {
        receiveAccount = _receiveAccount;
    }

    function setNftAddressByMinted(address[] memory _nftAddressByMinted)
        public
        onlyOwner
    {
        nftAddressByMinted = _nftAddressByMinted;
    }

    function setSeed(uint16[] memory _seed) public onlyOwner {
        seed = _seed;
    }

    function receiveBalance() public payable onlyOwner {
        require(address(receiveAccount) != address(0), "address is zero");
        payable(receiveAccount).transfer(address(this).balance);
    }

    function baseTokenURI() public pure returns (string memory) {
        return "https://dehorizon-metadata-api-nodejs.herokuapp.com/api/token/";
    }

    function tokenURI(uint256 _tokenId)
        public
        view
        override
        returns (string memory)
    {
        return
            string(
                abi.encodePacked(baseTokenURI(), Strings.toString(_tokenId))
            );
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: address zero is not a valid owner");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: invalid token ID");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not token owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        _requireMinted(tokenId);

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
        _safeTransfer(from, to, tokenId, data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits an {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` has not been minted yet.
     */
    function _requireMinted(uint256 tokenId) internal view virtual {
        require(_exists(tokenId), "ERC721: invalid token ID");
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface VRFCoordinatorV2Interface {
  /**
   * @notice Get configuration relevant for making requests
   * @return minimumRequestConfirmations global min for request confirmations
   * @return maxGasLimit global max for request gas limit
   * @return s_provingKeyHashes list of registered key hashes
   */
  function getRequestConfig()
    external
    view
    returns (
      uint16,
      uint32,
      bytes32[] memory
    );

  /**
   * @notice Request a set of random words.
   * @param keyHash - Corresponds to a particular oracle job which uses
   * that key for generating the VRF proof. Different keyHash's have different gas price
   * ceilings, so you can select a specific one to bound your maximum per request cost.
   * @param subId  - The ID of the VRF subscription. Must be funded
   * with the minimum subscription balance required for the selected keyHash.
   * @param minimumRequestConfirmations - How many blocks you'd like the
   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
   * for why you may want to request more. The acceptable range is
   * [minimumRequestBlockConfirmations, 200].
   * @param callbackGasLimit - How much gas you'd like to receive in your
   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
   * may be slightly less than this amount because of gas used calling the function
   * (argument decoding etc.), so you may need to request slightly more than you expect
   * to have inside fulfillRandomWords. The acceptable range is
   * [0, maxGasLimit]
   * @param numWords - The number of uint256 random values you'd like to receive
   * in your fulfillRandomWords callback. Note these numbers are expanded in a
   * secure way by the VRFCoordinator from a single random value supplied by the oracle.
   * @return requestId - A unique identifier of the request. Can be used to match
   * a request to a response in fulfillRandomWords.
   */
  function requestRandomWords(
    bytes32 keyHash,
    uint64 subId,
    uint16 minimumRequestConfirmations,
    uint32 callbackGasLimit,
    uint32 numWords
  ) external returns (uint256 requestId);

  /**
   * @notice Create a VRF subscription.
   * @return subId - A unique subscription id.
   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
   * @dev Note to fund the subscription, use transferAndCall. For example
   * @dev  LINKTOKEN.transferAndCall(
   * @dev    address(COORDINATOR),
   * @dev    amount,
   * @dev    abi.encode(subId));
   */
  function createSubscription() external returns (uint64 subId);

  /**
   * @notice Get a VRF subscription.
   * @param subId - ID of the subscription
   * @return balance - LINK balance of the subscription in juels.
   * @return reqCount - number of requests for this subscription, determines fee tier.
   * @return owner - owner of the subscription.
   * @return consumers - list of consumer address which are able to use this subscription.
   */
  function getSubscription(uint64 subId)
    external
    view
    returns (
      uint96 balance,
      uint64 reqCount,
      address owner,
      address[] memory consumers
    );

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @param newOwner - proposed new owner of the subscription
   */
  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @dev will revert if original owner of subId has
   * not requested that msg.sender become the new owner.
   */
  function acceptSubscriptionOwnerTransfer(uint64 subId) external;

  /**
   * @notice Add a consumer to a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - New consumer which can use the subscription
   */
  function addConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Remove a consumer from a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - Consumer to remove from the subscription
   */
  function removeConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Cancel a subscription
   * @param subId - ID of the subscription
   * @param to - Where to send the remaining LINK to
   */
  function cancelSubscription(uint64 subId, address to) external;
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBaseV2 {
  error OnlyCoordinatorCanFulfill(address have, address want);
  address private immutable vrfCoordinator;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   */
  constructor(address _vrfCoordinator) {
    vrfCoordinator = _vrfCoordinator;
  }

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomWords the VRF output expanded to the requested number of words
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {
    if (msg.sender != vrfCoordinator) {
      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);
    }
    fulfillRandomWords(requestId, randomWords);
  }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}