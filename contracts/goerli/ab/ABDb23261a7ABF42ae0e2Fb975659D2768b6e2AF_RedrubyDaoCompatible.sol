/**
 *Submitted for verification at Etherscan.io on 2022-10-13
*/

pragma solidity ^0.6.0;

interface IERC20 {
    function transfer(address dst, uint wad) external returns (bool);
}

contract RedrubyDaoCompatible {

    // Data structures and variables inferred from the use of storage instructions
    address _redrubyToken;
    mapping(address => uint256[]) _userInfo; // STORAGE[0x9]
    // @kyt_autogenerated
    address public kyt;
    address public kyt_owner;
    // Events
    event Withdraw(address, uint256);
    event OwnershipTransferred(address, address);
    event Deposit(address, uint256, uint256);

    // @kyt_autogenerated
    modifier _kyt_register() {
        // recording states beforehand
        (bool success_a, bytes memory result_a) = kyt.delegatecall(abi.encodeWithSignature("_in_kyt_register()"));
        _;
        // recording states afterwards
        (bool success_b, bytes memory result_b) = kyt.delegatecall(abi.encodeWithSignature("_out_kyt_register(bytes)", result_a));
        if (success_b == false) {
            assembly {
              revert(add(result_b,32),mload(result_b))
            }
        }
    }


    // @kyt_autogenerated
    modifier _kyt_withdraw(uint256 _kytparameter_0) {
        // recording states beforehand
        (bool success_a, bytes memory result_a) = kyt.delegatecall(abi.encodeWithSignature("_in_kyt_withdraw(uint256)", _kytparameter_0));
        _;
        // recording states afterwards
        (bool success_b, bytes memory result_b) = kyt.delegatecall(abi.encodeWithSignature("_out_kyt_withdraw(uint256,bytes)", _kytparameter_0, result_a));
        if (success_b == false) {
            assembly {
              revert(add(result_b,32),mload(result_b))
            }
        }
    }

    constructor (address _token,
        // @kyt_autogenerated
        address _kyt,
        address _kyt_owner) public {
        // @kyt_autogenerated
        kyt = _kyt;
        kyt_owner = _kyt_owner;
        _redrubyToken = _token;
    }

    function register() public _kyt_register() {
        _userInfo[msg.sender] = [0];
    }

    function withdraw(uint256 varg0) public _kyt_withdraw(varg0) {
        require(msg.data.length - 4 >= 32);
        require(_userInfo[msg.sender][0] >= 0, 'withdraw: not good');
        (bool success) = IERC20(_redrubyToken).transfer(msg.sender, varg0);
        require(success, "transfer failed");
        emit Withdraw(msg.sender, _userInfo[msg.sender][0]);

    }
}