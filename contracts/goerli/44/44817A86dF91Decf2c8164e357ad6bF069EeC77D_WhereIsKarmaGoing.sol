/**
 *Submitted for verification at Etherscan.io on 2021-11-20
*/

// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.6;

struct Winner {
    address winner;
    bytes32 coupon;
    string twitterHandle;
    string message;
}

/// 1. guess where karmacoma_eth will be going next using `isValidGuess(string)`
/// 2. if you guess correctly, generate a coupon with `getEntryCoupon(string)`
/// 3. record your winning answer!
/// 4. let's stay in touch ❤️ wagmi
contract WhereIsKarmaGoing {

    mapping(bytes32 => bool) validAnswers;

    Winner[] public winners;

    event WinnerAdded(address indexed winner, string twitterHandle, string message);

    constructor() {
        // let's allow a few variations (normal spelling, lower case, domain name, etc)
        validAnswers[0x944dea8a227035f21fe0ac0176655809431e22db85dfb72fb435a9797ba5b4a8] = true;
        validAnswers[0xabad7f5a3710233489a7846dddabd5ffd7443da344b42492ecc80d45cf9505e8] = true;
        validAnswers[0xd8c02e2666312dfd7352104f92f3e7f6c47110e31b4b63bedef9d299e6c42afd] = true;
        validAnswers[0x832f890ed239bcb795ed28ae295f608a67f8fb9559278068f213a0ecb3cdcee0] = true;
    }

    function isValidGuess(string calldata guess) public view returns (bool) {
        return validAnswers[keccak256(bytes(guess))];
    }

    /// @notice lets the sender generate an entry coupon off-chain without revealing the guess
    function getEntryCoupon(string calldata guess) public view returns (bytes32) {
        require(isValidGuess(guess));

        return keccak256(abi.encodePacked(guess, msg.sender));
    }

    /// @notice requires a coupon generated by `getEntryCoupon(string)`
    function recordAnswer(bytes32 coupon, string calldata twitterHandle, string calldata message) public {
        // coupon to be checked off-chain

        Winner memory winner = Winner({
            winner: msg.sender,
            coupon: coupon,
            twitterHandle: twitterHandle,
            message: message
        });

        // store the winner in the contract
        winners.push(winner);

        emit WinnerAdded(winner.winner, winner.twitterHandle, winner.message);
    }

    function getNumberOfWinners() public view returns (uint) {
        return winners.length;
    }
}