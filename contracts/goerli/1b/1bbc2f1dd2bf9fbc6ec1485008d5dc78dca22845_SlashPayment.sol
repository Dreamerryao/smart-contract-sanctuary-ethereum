/**
 *Submitted for verification at Etherscan.io on 2023-01-16
*/

// Sources flattened with hardhat v2.11.1 https://hardhat.org

// File contracts/plugins/interfaces/ISlashCustomPlugin.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ISlashCustomPlugin {
    /**
     * @dev receive payment from SlashCore Contract
     * @param receiveToken: payment receive token
     * @param amount: payment receive amount
     * @param paymentId: PaymentId generated by the merchant when creating the payment URL
     * @param optional: Optional parameter passed at the payment
     */
    function receivePayment(
        address receiveToken,
        uint256 amount,
        string calldata paymentId,
        string calldata optional
    ) external payable;

    /**
     * @dev Check if the contract is Slash Plugin
     *
     * Requirement
     * - Implement this function in the contract
     * - Return true
     */
    function supportSlashExtensionInterface() external view returns (bool);
}


// File @openzeppelin/contracts-upgradeable/utils/[email protected]



pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File @openzeppelin/contracts-upgradeable/token/ERC20/[email protected]



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20Upgradeable {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/[email protected]



pragma solidity ^0.8.0;


/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20Upgradeable {
    using AddressUpgradeable for address;

    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File contracts/libs/UniversalERC20.sol



pragma solidity ^0.8.4;
// File: contracts/UniversalERC20.sol
/**
 * @notice Library for wrapping ERC20 token and ETH
 * @dev It uses msg.sender directly so only use in normal contract, not in GSN-like contract
 */
library UniversalERC20 {
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using AddressUpgradeable for address payable;

    IERC20Upgradeable internal constant ZERO_ADDRESS =
        IERC20Upgradeable(0x0000000000000000000000000000000000000000);
    IERC20Upgradeable internal constant ETH_ADDRESS =
        IERC20Upgradeable(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

    function universalTransfer(
        IERC20Upgradeable token,
        address to,
        uint256 amount
    ) internal returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        if (isETH(token)) {
            payable(address(uint160(to))).sendValue(amount);
            return amount;
        }
        uint256 balanceBefore = token.balanceOf(to);
        token.safeTransfer(to, amount);
        return token.balanceOf(to) - balanceBefore;
    }

    function universalTransferFrom(
        IERC20Upgradeable token,
        address from,
        address to,
        uint256 amount
    ) internal returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        if (isETH(token)) {
            require(msg.value >= amount, "Insufficient msg.value");
            if (to != address(this))
                payable(address(uint160(to))).sendValue(amount);

            // refund redundant amount
            if (msg.value > amount)
                payable(address(uint160(from))).sendValue(msg.value - amount);

            return amount;
        }
        uint256 balanceBefore = token.balanceOf(to);
        token.safeTransferFrom(from, to, amount);
        return token.balanceOf(to) - balanceBefore;
    }

    function universalTransferFromSenderToThis(
        IERC20Upgradeable token,
        uint256 amount
    ) internal returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        if (isETH(token)) {
            require(msg.value >= amount, "Insufficient msg.value");
            // Return remainder if exist
            if (msg.value > amount)
                payable(msg.sender).sendValue(msg.value - amount);
            return amount;
        }
        uint256 balanceBefore = token.balanceOf(address(this));
        token.safeTransferFrom(msg.sender, address(this), amount);
        return token.balanceOf(address(this)) - balanceBefore;
    }

    function universalApprove(
        IERC20Upgradeable token,
        address to,
        uint256 amount
    ) internal {
        if (!isETH(token)) {
            if (amount > 0 && token.allowance(address(this), to) > 0) {
                token.safeApprove(to, 0);
            }
            token.safeApprove(to, amount);
        }
    }

    function universalBalanceOf(IERC20Upgradeable token, address who)
        internal
        view
        returns (uint256)
    {
        if (isETH(token)) {
            return who.balance;
        } else {
            return token.balanceOf(who);
        }
    }

    function universalDecimals(IERC20Upgradeable token)
        internal
        view
        returns (uint256)
    {
        if (isETH(token)) {
            return 18;
        }

        (bool success, bytes memory data) = address(token).staticcall{
            gas: 10000
        }(abi.encodeWithSignature("decimals()"));
        if (!success || data.length == 0) {
            (success, data) = address(token).staticcall{gas: 10000}(
                abi.encodeWithSignature("DECIMALS()")
            );
        }

        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;
    }

    function isETH(IERC20Upgradeable token) internal pure returns (bool) {
        return (address(token) == address(ZERO_ADDRESS) ||
            address(token) == address(ETH_ADDRESS));
    }
}


// File contracts/slashv2/BaseStruct.sol



pragma solidity ^0.8.4;

interface BaseStruct {
    struct PaymentParam {
        uint64 merchantId;
        address payingToken;
        address exchange;
        DexFlag exchangeType;
        uint256 amountIn;
        uint256 amountOut;
        address[] path;
        string paymentId;
        string optional;
        bytes reserved;
    }

    struct Merchant {
        uint64 id; // Merchant id
        uint16 pluginUsed; // If the plugin used for the merchant receive account
        uint16 cashBack; // cash back percentage, denominator 10000
        address owner; // Merchant owner
        address recvToken; // Merchant receive token
        address recvAccount; // Merchant receive account
        bytes reserved; // Reserved data for future usage
    }

    /// Flags for indicating exchange types
    enum DexFlag {
        UNISWAP_V2,
        UNISWAP_V3,
        AVAX_DEX,
        DOGE_DEX
    }

    function updateETHPlugin(address plugin_) external virtual;

    event NewTransaction(
        address userAddress,
        address payingToken,
        address receiveToken,
        uint256 amountIn,
        uint256 amountOut,
        uint64 merchantId,
        uint16 cashBack
    );
    event NewMerchant(
        uint64 id,
        uint16 pluginUsed,
        uint16 cashBack,
        address owner,
        address recvToken,
        address recvAccount,
        bytes reserved
    );
    event RecvAccountUpdated(
        uint64 merchantId,
        uint16 pluginUsed,
        address recvAccount
    );
    event CashBackUpdated(uint64 merchantId, uint16 percent);
    event ReservedUpdated(uint64 merchantId, bytes reserved);

    error InvalidContract();
    error InvalidZeroAddress();
    error LessThanRequired();
    error PluginReceiveError();
    error TooMuchCashBack(uint16 value, uint16 limit);
    error Unpermitted();
    error DexSwapFailed();
}


// File contracts/plugins/interfaces/IDogeAmm.sol



pragma solidity ^0.8.4;

interface IDogeSwapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

// File: IDogeSwapV2Pair.sol

interface IDogeSwapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// File: IDogeSwapV2Router01.sol

interface IDogeSwapV2Router01 {
    function factory() external view returns (address);

    function WWDOGE() external view returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityWDOGE(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountWDOGEMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountWDOGE,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityWDOGE(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountWDOGEMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountWDOGE);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityWDOGEWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountWDOGEMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountWDOGE);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactWDOGEForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactWDOGE(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForWDOGE(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapWDOGEForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

// File: IDogeSwapV2Router02.sol

interface IDogeSwapV2Router02 is IDogeSwapV2Router01 {
    function removeLiquidityWDOGESupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountWDOGEMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountWDOGE);

    function removeLiquidityWDOGEWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountWDOGEMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountWDOGE);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactWDOGEForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForWDOGESupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File contracts/plugins/interfaces/IUniswapAmm.sol



pragma solidity ^0.8.4;

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File contracts/plugins/interfaces/IAvaxAmm.sol



pragma solidity ^0.8.4;

interface IAvaxFactory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

// File: IAvaxPair.sol

interface IAvaxPair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// File: IAvaxRouter01.sol

interface IAvaxRouter01 {
    function factory() external pure returns (address);

    function WAVAX() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityAVAX(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountAVAX,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityAVAX(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountAVAX);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityAVAXWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountAVAX);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactAVAXForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactAVAX(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForAVAX(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapAVAXForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

// File: IAvaxRouter02.sol

interface IAvaxRouter02 is IAvaxRouter01 {
    function removeLiquidityAVAXSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountAVAX);

    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountAVAX);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File contracts/plugins/interfaces/IUniswapV3Amm.sol



pragma solidity ^0.8.4;

interface IUniswapV3Router {
    function WETH9() external pure returns (address);

    struct ExactInputSingleParams {
        address tokenIn;
        address tokenOut;
        uint24 fee;
        address recipient;
        uint256 deadline;
        uint256 amountIn;
        uint256 amountOutMinimum;
        uint160 sqrtPriceLimitX96;
    }

    /// @notice Swaps amountIn of one token for as much as possible of another token
    /// @param params The parameters necessary for the swap, encoded as ExactInputSingleParams in calldata
    /// @return amountOut The amount of the received token
    function exactInputSingle(ExactInputSingleParams calldata params)
        external
        payable
        returns (uint256 amountOut);

    struct ExactInputParams {
        bytes path;
        address recipient;
        uint256 deadline;
        uint256 amountIn;
        uint256 amountOutMinimum;
    }

    /// @notice Swaps amountIn of one token for as much as possible of another along the specified path
    /// @param params The parameters necessary for the multi-hop swap, encoded as ExactInputParams in calldata
    /// @return amountOut The amount of the received token
    function exactInput(ExactInputParams calldata params)
        external
        payable
        returns (uint256 amountOut);
}


// File contracts/plugins/interfaces/IETHPlugin.sol



pragma solidity ^0.8.4;

interface IETHPlugin {
    function unwrap(address, uint256) external;
}


// File contracts/plugins/interfaces/IWETH.sol



pragma solidity ^0.8.4;

interface IWETH {
    function deposit() external payable;

    function transfer(address to, uint256 value) external returns (bool);

    function withdraw(uint256) external;
}


// File contracts/slashv2/DexBase.sol



pragma solidity ^0.8.4;
abstract contract DexBase is BaseStruct {
    using UniversalERC20 for IERC20Upgradeable;

    address internal _ethPlugin;

    /// @notice Swap on the specified dex router
    /// @param param_ PaymentParam struct, we pass it to this function
    /// @param destToken_ Destination token is not in the PaymentParam structure
    /// @param amountIn_ amountIn in the PaymentParam structure contains other amounts as well, so we should pass this param separately
    function _swap(
        PaymentParam memory param_,
        address destToken_,
        uint256 amountIn_
    ) internal returns (uint256) {
        address wnative = getWNative(param_.exchange, param_.exchangeType);
        bool isFromNative = IERC20Upgradeable(param_.payingToken).isETH();
        bool isToNative = IERC20Upgradeable(destToken_).isETH();

        if (isFromNative && destToken_ == wnative) {
            // ETH => WETH
            IWETH(wnative).deposit{value: amountIn_}();
            return amountIn_;
        }
        if (destToken_ == wnative && isToNative) {
            // WETH => ETH
            IERC20Upgradeable(wnative).universalApprove(_ethPlugin, amountIn_);
            IETHPlugin(_ethPlugin).unwrap(wnative, amountIn_);
            return amountIn_;
        }

        IERC20Upgradeable(param_.payingToken).universalApprove(
            param_.exchange,
            amountIn_
        );
        uint256 balanceBefore = IERC20Upgradeable(destToken_)
            .universalBalanceOf(address(this));

        if (param_.exchangeType == DexFlag.UNISWAP_V3) {
            _swapOnUniV3(
                param_.exchange,
                param_.payingToken,
                param_.reserved,
                amountIn_
            );
        } else {
            address[] memory validPath = getUniStyleValidPath(
                param_.payingToken,
                destToken_,
                wnative,
                param_.path
            );
            uint256 msgValue;
            bytes memory funcData;
            if (isFromNative) {
                funcData = abi.encodeWithSignature(
                    getNative2TokenFuncName(param_.exchangeType),
                    0,
                    validPath,
                    address(this),
                    block.timestamp + 300
                );
                msgValue = amountIn_;
            } else if (isToNative)
                funcData = abi.encodeWithSignature(
                    getToken2NativeFuncName(param_.exchangeType),
                    amountIn_,
                    0,
                    validPath,
                    address(this),
                    block.timestamp + 300
                );
            else
                funcData = abi.encodeWithSignature(
                    getToken2TokenFuncName(),
                    amountIn_,
                    0,
                    validPath,
                    address(this),
                    block.timestamp + 300
                );

            (bool callSucceed, ) = param_.exchange.call{value: msgValue}(
                funcData
            );
            if (!callSucceed) revert DexSwapFailed();
        }

        return
            IERC20Upgradeable(destToken_).universalBalanceOf(address(this)) -
            balanceBefore;
    }

    /**
     * @notice Swap on uniswap v3 router
     *
     * We assume that path was configured correctly from the caller
     */
    function _swapOnUniV3(
        address exchange,
        address fromToken,
        bytes memory path,
        uint256 amountIn
    ) private {
        IUniswapV3Router.ExactInputParams memory params = IUniswapV3Router
            .ExactInputParams({
                path: path,
                recipient: address(this),
                deadline: block.timestamp + 300,
                amountIn: amountIn,
                amountOutMinimum: 0
            });
        IUniswapV3Router(exchange).exactInput{
            value: IERC20Upgradeable(fromToken).isETH() ? amountIn : 0
        }(params);
    }

    /// @notice Get wnative address of the exchange
    function getWNative(address exchange_, DexFlag flag_)
        private
        view
        returns (address)
    {
        if (flag_ == DexFlag.UNISWAP_V3)
            return IUniswapV3Router(exchange_).WETH9();
        if (flag_ == DexFlag.AVAX_DEX) return IAvaxRouter02(exchange_).WAVAX();
        if (flag_ == DexFlag.DOGE_DEX)
            return IDogeSwapV2Router02(exchange_).WWDOGE();
        return IUniswapV2Router02(exchange_).WETH();
    }

    /// @dev Get valid uniswap style path
    function getUniStyleValidPath(
        address fromToken_,
        address destToken_,
        address wnative_,
        address[] memory path_
    ) private view returns (address[] memory) {
        address fromTokenReal = IERC20Upgradeable(fromToken_).isETH()
            ? wnative_
            : fromToken_;
        address destTokenReal = IERC20Upgradeable(destToken_).isETH()
            ? wnative_
            : destToken_;

        // Check if path is valid
        bool pathValid = path_.length >= 2 &&
            path_[0] == fromTokenReal &&
            path_[path_.length - 1] == destTokenReal;
        // Rebuild path when invalid
        if (!pathValid) {
            if (fromTokenReal == wnative_ || destTokenReal == wnative_) {
                path_ = new address[](2);
                path_[0] = fromTokenReal;
                path_[1] = destTokenReal;
            } else {
                path_ = new address[](3);
                path_[0] = fromTokenReal;
                path_[1] = wnative_;
                path_[2] = destTokenReal;
            }
        }
        return path_;
    }

    function getToken2TokenFuncName() private view returns (string memory) {
        return
            "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)";
    }

    function getNative2TokenFuncName(DexFlag flag_)
        private
        view
        returns (string memory)
    {
        if (flag_ == DexFlag.AVAX_DEX)
            return
                "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)";
        if (flag_ == DexFlag.DOGE_DEX)
            return
                "swapExactWDOGEForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)";
        return
            "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)";
    }

    function getToken2NativeFuncName(DexFlag flag_)
        private
        view
        returns (string memory)
    {
        if (flag_ == DexFlag.AVAX_DEX)
            return
                "swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)";
        if (flag_ == DexFlag.DOGE_DEX)
            return
                "swapExactWDOGEForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)";
        return
            "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)";
    }

    /// @notice Return eth plugin address
    function ethPlugin() external view returns (address) {
        return _ethPlugin;
    }
}


// File @openzeppelin/contracts-upgradeable/proxy/utils/[email protected]



// solhint-disable-next-line compiler-version
pragma solidity ^0.8.0;

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 */
abstract contract Initializable {

    /**
     * @dev Indicates that the contract has been initialized.
     */
    bool private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Modifier to protect an initializer function from being invoked twice.
     */
    modifier initializer() {
        require(_initializing || !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }
}


// File @openzeppelin/contracts-upgradeable/utils/[email protected]



pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
    uint256[50] private __gap;
}


// File @openzeppelin/contracts-upgradeable/access/[email protected]



pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    uint256[49] private __gap;
}


// File @openzeppelin/contracts-upgradeable/security/[email protected]



pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    function __Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
    }

    function __Pausable_init_unchained() internal initializer {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
    uint256[49] private __gap;
}


// File @openzeppelin/contracts-upgradeable/security/[email protected]



pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuardUpgradeable is Initializable {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    function __ReentrancyGuard_init() internal initializer {
        __ReentrancyGuard_init_unchained();
    }

    function __ReentrancyGuard_init_unchained() internal initializer {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
    uint256[49] private __gap;
}


// File contracts/slashv2/SlashPayment.sol



pragma solidity ^0.8.4;
contract SlashPayment is
    OwnableUpgradeable,
    PausableUpgradeable,
    ReentrancyGuardUpgradeable,
    DexBase
{
    using UniversalERC20 for IERC20Upgradeable;

    uint16 private constant MAX_CASHBACK = 5000; // Max cash back percent, 50%
    uint16 private constant MAX_SLIPPAGE = 1000; // Max slippage fee value, 10%
    uint16 private _stableSlippage; // Slippage fee for stable token payments
    uint16 private _nonStableSlippage; // Slippage fee for non-stable token payments

    uint64 private _lastMerchantId; // Last merchant id

    bytes private _reserved; // Reserved param for future usage

    mapping(address => bool) private _stableCoins; // Stable coins that will pay low slippage fee
    mapping(address => bool) private _recvBlacklist; // Receive token blacklist
    mapping(uint64 => Merchant) private _merchants; // Merchants created in the slash

    function initialize() public initializer {
        __Ownable_init();
        __Pausable_init();
        __ReentrancyGuard_init();

        _stableSlippage = 100; // Slippage fee for stable coin payments is 1%
        _nonStableSlippage = 350; // Slippage fee for non-stable coin payments is 3.5%
        _lastMerchantId = 1; // Last merchant id is set as 1
    }

    /**
     * @dev Submit transaction
     * @param param_ abi encoded value of the params
     * payingToken_ the address of paying token, zero address will be considered as native token
     * exchange_ the address of the dex which the swap will be done
     * exchangeType_ the type flag of the dex
     * amountIn_ paid input amount by user
     * amountOut_ required output amount by seller
     * path_: swap path from paying token to receive token
     * paymentId_ payment id, this param will pass to merchant (if merchant received by contract)
     * optional_ optional data, this param will pass to merchant (if merchant received by contract)
     * reserved_ reserved parameter
     */
    function submitTransaction(PaymentParam calldata param_)
        external
        payable
        whenNotPaused
        nonReentrant
    {
        // Slippage is set according to the token is stable coin or not
        uint16 slippage = _stableCoins[param_.payingToken]
            ? _stableSlippage
            : _nonStableSlippage;
        Merchant storage merchant = _merchants[param_.merchantId];
        uint16 cashBackPercent = merchant.cashBack;

        // Transfer tokens from the account, amountIn + slippage fee - cashback
        // We do not transfer casback amount of tokens
        uint256 amountTemp = (param_.amountIn *
            (10000 + slippage - cashBackPercent)) / 10000; // amountTemp variable is used temporarily for reducing gas
        amountTemp = IERC20Upgradeable(param_.payingToken)
            .universalTransferFromSenderToThis(amountTemp);

        IERC20Upgradeable recvToken = IERC20Upgradeable(merchant.recvToken);

        // If paying token is ETH & receive token is ETH or paying token is same as receive token,
        // we do not swap tokens. In this case, amountOut = amountIn
        // In other cases, we do swap paying token to receive token
        if (
            !(IERC20Upgradeable(param_.payingToken).isETH() &&
                recvToken.isETH()) && param_.payingToken != address(recvToken)
        ) amountTemp = _swap(param_, address(recvToken), amountTemp); // swapped amount

        unchecked {
            uint256 merchantRecvAmount = (param_.amountOut *
                (10000 - cashBackPercent)) / 10000; // Amount that the merchant should receive
            // Swapped amount contains slippage fee as well, so we calculate amount for the merchant only
            if (
                (amountTemp * (10000 - cashBackPercent)) /
                    (10000 + slippage - cashBackPercent) <
                merchantRecvAmount
            ) revert LessThanRequired();

            // If merchant receive funds in plugin contract
            if (merchant.pluginUsed == 2) {
                // approve merchant custom contract
                recvToken.universalApprove(
                    merchant.recvAccount,
                    merchantRecvAmount
                );

                uint256 balanceBefore = recvToken.universalBalanceOf(
                    address(this)
                );

                // call paymentReceive on plugin
                ISlashCustomPlugin(merchant.recvAccount).receivePayment{
                    value: recvToken.isETH() ? merchantRecvAmount : 0
                }(
                    address(recvToken),
                    merchantRecvAmount,
                    param_.paymentId,
                    param_.optional
                );

                // check plugin received exact amount of token
                if (
                    balanceBefore - merchantRecvAmount !=
                    recvToken.universalBalanceOf(address(this))
                ) revert PluginReceiveError();
            }
            // If merchant receive funds directly in a normal wallet
            else
                recvToken.universalTransfer(
                    merchant.recvAccount,
                    merchantRecvAmount
                );
        }

        emit NewTransaction(
            _msgSender(),
            param_.payingToken,
            address(recvToken),
            param_.amountIn,
            param_.amountOut,
            param_.merchantId,
            cashBackPercent
        );
    }

    function transfer2Merchant(
        uint256 amount_,
        address recvToken_,
        address recvAccount_,
        uint16 pluginUsed_,
        string memory paymentId_,
        string memory optional_
    ) private {
        IERC20Upgradeable recvToken = IERC20Upgradeable(recvToken_);
        address recvAccount = recvAccount_;

        // If merchant receive funds in plugin contract
        if (pluginUsed_ == 2) {
            // approve merchant custom contract
            recvToken.universalApprove(recvAccount, amount_);

            uint256 balanceBefore = recvToken.universalBalanceOf(address(this));

            // call paymentReceive on plugin
            ISlashCustomPlugin(recvAccount).receivePayment{
                value: recvToken.isETH() ? amount_ : 0
            }(address(recvToken), amount_, paymentId_, optional_);

            // check plugin received exact amount of token
            require(
                balanceBefore - amount_ ==
                    recvToken.universalBalanceOf(address(this)),
                "Plugin has not received exact token"
            );
        }
        // If merchant receive funds directly in a normal wallet
        else recvToken.universalTransfer(recvAccount, amount_);
    }

    /// @notice Inheritted function from DexBase for setting ETH plugin
    function updateETHPlugin(address plugin_) external override onlyOwner {
        _ethPlugin = plugin_;
    }

    function viewMerchant(uint64 merchantId_)
        external
        view
        returns (Merchant memory)
    {
        return _merchants[merchantId_];
    }

    /// @notice Add merchant
    function addMerchant(
        address owner_,
        address recvToken_,
        address recvAccount_,
        uint16 pluginUsed_,
        uint16 cashBack_,
        bytes memory reserved_
    ) external onlyOwner {
        if (owner_ == address(0)) revert InvalidZeroAddress();
        if (recvAccount_ == address(0)) revert InvalidZeroAddress();
        if (cashBack_ > MAX_CASHBACK)
            revert TooMuchCashBack(cashBack_, MAX_CASHBACK);

        _merchants[_lastMerchantId] = Merchant({
            id: _lastMerchantId,
            pluginUsed: pluginUsed_,
            cashBack: cashBack_,
            owner: owner_,
            recvToken: recvToken_,
            recvAccount: recvAccount_,
            reserved: reserved_
        });

        emit NewMerchant(
            _lastMerchantId,
            pluginUsed_,
            cashBack_,
            owner_,
            recvToken_,
            recvAccount_,
            reserved_
        );

        ++_lastMerchantId;
    }

    /// @notice Update receive account of given merchantId
    /// @dev Only merchant owner or slash owner can call this function
    /// @param pluginUsed_ Receive account is plugin contract or not
    function updateRecvAccount(
        uint64 merchantId_,
        uint16 pluginUsed_,
        address recvAccount_
    ) external {
        Merchant storage merchant = _merchants[merchantId_];
        if (_msgSender() != merchant.owner && _msgSender() == owner())
            revert Unpermitted();
        if (recvAccount_ == address(0)) revert InvalidZeroAddress();
        if (pluginUsed_ == 2 && !isContract(recvAccount_))
            revert InvalidContract();

        merchant.recvAccount = recvAccount_;
        merchant.pluginUsed = pluginUsed_;

        emit RecvAccountUpdated(merchantId_, pluginUsed_, recvAccount_);
    }

    /// @notice Update cash back percent of given merchantId
    /// @dev Only merchant owner or slash owner can call this function
    function updateCashBack(uint64 merchantId_, uint16 cashBack_) external {
        Merchant storage merchant = _merchants[merchantId_];
        if (_msgSender() != merchant.owner && _msgSender() == owner())
            revert Unpermitted();
        if (cashBack_ > MAX_CASHBACK)
            revert TooMuchCashBack(cashBack_, MAX_CASHBACK);
        merchant.cashBack = cashBack_;

        emit CashBackUpdated(merchantId_, cashBack_);
    }

    /// @notice Update reserved param of given merchantId
    /// @dev Only merchant owner or slash owner can call this function
    function updateMerchantReserved(
        uint64 merchantId_,
        bytes calldata reserved_
    ) external {
        Merchant storage merchant = _merchants[merchantId_];
        if (_msgSender() != merchant.owner && _msgSender() == owner())
            revert Unpermitted();

        merchant.reserved = reserved_;

        emit ReservedUpdated(merchantId_, reserved_);
    }

    function updateReserved(bytes calldata reserved_) external {
        _reserved = reserved_;
    }

    function reserved() external view returns (bytes memory) {
        return _reserved;
    }

    /// @notice Set slippage fee for stable coin payments and non-stable coin payments
    /// @dev Only owner is allowed to call this function
    function updateSlippage(uint16 stableSlippage_, uint16 nonStableSlippage_)
        external
        onlyOwner
    {
        require(
            stableSlippage_ <= MAX_SLIPPAGE &&
                nonStableSlippage_ <= MAX_SLIPPAGE,
            "Too much slippage"
        );

        _stableSlippage = stableSlippage_;
        _nonStableSlippage = nonStableSlippage_;
    }

    /// @notice Get how much tokens should paid in real payment
    /// +slippage, -cashback
    /// Recommend to add some more percentage for the swap tx slippage
    function requiredPayAmount(
        uint64 merchantId_,
        address token_,
        uint256 amountIn_
    ) external view returns (uint256) {
        // Slippage is set according to the token is stable coin or not
        uint16 slippage = _stableCoins[token_]
            ? _stableSlippage
            : _nonStableSlippage;
        Merchant storage merchant = _merchants[merchantId_];

        // Transfer tokens from the account, amountIn + slippage fee - cashback
        // We do not transfer casback amount of tokens
        return (amountIn_ * (10000 + slippage - merchant.cashBack)) / 10000;
    }

    /// @notice Get slippage config values
    function viewSlippage()
        external
        view
        returns (
            uint16, /** slippage for stable coin payments */
            uint16 /** slippage for non-stable coin payments */
        )
    {
        return (_stableSlippage, _nonStableSlippage);
    }

    /// @notice Set token_ as stable coin or not
    /// @dev Only owner is allowed to call this function
    function markAsStableCoin(address token_, bool flag_) external onlyOwner {
        _stableCoins[token_] = flag_;
    }

    /// @notice Check if the token is stable coin or not
    function isStableCoin(address token_) external view returns (bool) {
        return _stableCoins[token_];
    }

    function isContract(address account_) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account_)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @notice Pause / Unpause merchant
     */
    function pause(bool flag_) external onlyOwner {
        if (flag_) {
            _pause();
        } else {
            _unpause();
        }
    }

    /// @notice to recieve ETH
    receive() external payable {}

    /**
     * @notice Recover tokens back from the merchant contract
     * @param token_: the address of the token to recover
     * @param amount_: the number of tokens to recover
     * @dev This function is only callable by admin.
     */
    function recoverTokens(address token_, uint256 amount_) external onlyOwner {
        IERC20Upgradeable(token_).universalTransfer(_msgSender(), amount_);
    }
}