// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

interface ERC721 {
    function transferFrom(
        address _from,
        address _to,
        uint256 tokenId
    ) external;
}

// @title  GalaXYKatsFreeClaim
// @author warrencheng.eth
// @notice The contract allows users to claim NFTs for free
contract GalaXYKatsFreeClaim is Ownable, ReentrancyGuard {
    using MerkleProof for bytes32[];
    bytes32 private merkleRoot;
    address public galaxyKats;
    address public deployer;
    uint256 currentIndex;
    uint256 public startTime;
    uint256 public endTime;
    mapping(address => bool) public claimed;

    constructor(address _galaxyKats) {
        galaxyKats = _galaxyKats;
    }

    /* ************** */
    /* USER FUNCTIONS */
    /* ************** */

    // @notice This function can be called by whitelisted users to claim a specified number
    //         of NFTs for free
    // @notice The whitelist mechanism is based on merkle proof; see details in the link below
    //         https://docs.openzeppelin.com/contracts/3.x/api/cryptography#MerkleProof
    // @dev    NOTE: The NFTs are not deposited in this contract, instead we use the NFT's trasnferFrom function
    //         to move NFTs from the owner of this contract to the whitelisted user.
    //         The owner of this contract needs to grant access by calling setApprovalForAll first
    // @param  proof - merkle proof to verify that msg.sender is indeed in the whitelist
    // @param  amount - number of NFTs to be claimed
    function claim(bytes32[] memory proof, uint256 amount)
        external
        nonReentrant
    {
        // checks
        require(startTime != 0, "start time not set");
        require(block.timestamp > startTime, "free claim hasn't started");
        require(block.timestamp < endTime, "free claim has finished");
        
        require(merkleRoot != "", "merkleRoot not set");
        require(!claimed[msg.sender], "this address has already claimed");
        require(
            proof.verify(
                merkleRoot,
                keccak256(abi.encodePacked(msg.sender, amount))
            ),
            "failed to verify merkle root"
        );
        // effects
        claimed[msg.sender] = true;
        uint256 tokenId = currentIndex;
        currentIndex += amount;
        // interaction
        for (uint256 i = 0; i < amount; i++) {
            ERC721(galaxyKats).transferFrom(owner(), msg.sender, tokenId + i);
        }
    }

    /* *************** */
    /* ADMIN FUNCTIONS */
    /* *************** */

    // @notice This function sets the merkle root to verify whether the msg.sender
    //         is in the predetermined whitelist
    // @notice The merkle root can be generated by ./merkle/merkle.js. Please refer
    //         to that source code for merkle tree calculation
    // @param  root - the merkle root
    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
        merkleRoot = _merkleRoot;
    }

    // @notice This function sets the startTime
    //         https://www.epochconverter.com/ for time conversion between unix epoch time to human readable time
    // @param  _startTime - the startTime, in unix epoch time
    function setStartTime(uint256 _startTime) external onlyOwner {
        startTime = _startTime;
    }

    // @notice This function sets the endTime
    //         https://www.epochconverter.com/ for time conversion between unix epoch time to human readable time
    // @param  _endTime - the endTime, in unix epoch time
    function setEndTime(uint256 _endTime) external onlyOwner {
        endTime = _endTime;
    }

}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Trees proofs.
 *
 * The proofs can be generated using the JavaScript library
 * https://github.com/miguelmota/merkletreejs[merkletreejs].
 * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
 *
 * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        bytes32 computedHash = leaf;

        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];

            if (computedHash <= proofElement) {
                // Hash(current computed hash + current element of the proof)
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                // Hash(current element of the proof + current computed hash)
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }

        // Check if the computed hash (root) is equal to the provided root
        return computedHash == root;
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}