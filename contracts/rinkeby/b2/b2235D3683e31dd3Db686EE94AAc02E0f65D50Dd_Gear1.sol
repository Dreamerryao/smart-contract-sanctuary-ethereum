// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

pragma abicoder v2;

import "Strings.sol";
import "SafeCast.sol";

// The internal noun ID tracker
    
   
    /// @title Accessory SVG generator
    contract Gear1 {
        uint256 public libraryCount = 2;
        /// @dev Accessory NÂ°1 => Classic
        function gearSvg0(
            string memory PRIMARY,
            string memory SECONDARY
        ) internal pure returns (string memory, string memory)
            {
            return
                ( "Arachni",
                    string(
                    abi.encodePacked(
                         "<defs><linearGradient id='linear-gradient' x1='960' y1='1884.15' x2='960' y2='1461.69' gradientUnits='userSpaceOnUse'><stop offset='0' stop-opacity='0.7'/><stop offset='0.14' stop-opacity='0.33'/><stop offset='1' stop-opacity='0'/></linearGradient></defs><g id='_3-Gear' data-name='3-Gear'><g id='Arachni'><path id='GB-03-Solid' d='M898.93,1468.5c-34.65-12.33-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.76,106.82-84.76C931.93,1521.08,931.22,1480,898.93,1468.5Zm-175.72,1.16c-31.08-20.1-71.32.68-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.38C743.79,1529.49,752.17,1488.4,723.21,1469.66ZM992.77,1544c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.84-86.7-50.51C988.78,1480,988.07,1521.08,992.77,1544Zm193.08,7.28c28.17,63.66,97.54,81.33,122.89,60.38,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.11-64.63-50.89-95.71-30.79C1167.83,1488.4,1176.21,1529.49,1185.85,1551.28ZM898.93,1720.5c-34.65-12.34-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.77,106.82-84.76C931.93,1773.08,931.22,1732,898.93,1720.5Zm-175.72,1.16c-31.08-20.1-71.32.67-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.39C743.79,1781.49,752.17,1740.4,723.21,1721.66ZM992.77,1796c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.85-86.7-50.51C988.78,1732,988.07,1773.08,992.77,1796Zm193.08,7.27c28.17,63.67,97.54,81.34,122.89,60.39,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.12-64.63-50.89-95.71-30.79C1167.83,1740.4,1176.21,1781.49,1185.85,1803.27Z' style='fill:#",
                        PRIMARY,
                        "'/><path id='Grad' d='M898.93,1468.5c-34.65-12.33-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.76,106.82-84.76C931.93,1521.08,931.22,1480,898.93,1468.5Zm-175.72,1.16c-31.08-20.1-71.32.68-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.38C743.79,1529.49,752.17,1488.4,723.21,1469.66ZM992.77,1544c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.84-86.7-50.51C988.78,1480,988.07,1521.08,992.77,1544Zm193.08,7.28c28.17,63.66,97.54,81.33,122.89,60.38,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.11-64.63-50.89-95.71-30.79C1167.83,1488.4,1176.21,1529.49,1185.85,1551.28ZM898.93,1720.5c-34.65-12.34-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.77,106.82-84.76C931.93,1773.08,931.22,1732,898.93,1720.5Zm-175.72,1.16c-31.08-20.1-71.32.67-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.39C743.79,1781.49,752.17,1740.4,723.21,1721.66ZM992.77,1796c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.85-86.7-50.51C988.78,1732,988.07,1773.08,992.77,1796Zm193.08,7.27c28.17,63.67,97.54,81.34,122.89,60.39,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.12-64.63-50.89-95.71-30.79C1167.83,1740.4,1176.21,1781.49,1185.85,1803.27Z' style='opacity:0.7000000000000001;fill:url(#linear-gradient)'/><path id='Shad' d='M682.63,1608.9c-45.18,21.5-88.74,13.5-84.81-37.17-.52,28.47,20.91,31.38,43.62,24.89,36.51-10.43,68.56-41,82.42-76.15,7-17.82,9.06-48.2-12.86-56.49,26.28,7.33,39.9,27,40.66,57.36,1,40.08-25.26,81.45-59.47,101.31C692.17,1622.67,682.63,1608.9,682.63,1608.9Zm207.28-142.68c27.08,8.16,27.53,39.71,20.42,65.49-15.93,57.75-68.68,85.68-96.44,73.79-8.1-3.47-13.38-12-15.77-23.37,1.54,21.54,8.21,52.71,43.34,50.23,3.76,8.81,13.95,14.93,27.21,13.25,38.66-4.89,64.79-52.84,71.44-88.56C947.1,1519.44,935.4,1469.41,889.91,1466.22Zm347.46,142.68c45.18,21.5,88.74,13.5,84.81-37.17.52,28.47-20.91,31.38-43.62,24.89-36.51-10.43-68.56-41-82.42-76.15-7-17.82-9.06-48.2,12.86-56.49-26.28,7.33-39.9,27-40.66,57.36-1,40.08,25.26,81.45,59.47,101.31C1227.83,1622.67,1237.37,1608.9,1237.37,1608.9Zm-257.48-51.85c6.65,35.72,32.78,83.67,71.44,88.56,13.26,1.68,23.45-4.44,27.21-13.25,35.13,2.48,41.8-28.69,43.34-50.23-2.39,11.32-7.67,19.9-15.77,23.37-27.76,11.89-80.51-16-96.44-73.79-7.11-25.78-6.66-57.33,20.42-65.49C984.6,1469.41,972.9,1519.44,979.89,1557.05ZM682.63,1861.23c-45.18,21.5-88.74,13.5-84.81-37.17-.52,28.48,20.91,31.38,43.62,24.89,36.51-10.43,68.56-41,82.42-76.15,7-17.81,9.06-48.2-12.86-56.49,26.28,7.33,39.9,27,40.66,57.36,1,40.08-25.26,81.45-59.47,101.32C692.17,1875,682.63,1861.23,682.63,1861.23Zm207.28-142.67c27.08,8.15,27.53,39.71,20.42,65.48-15.93,57.75-68.68,85.68-96.44,73.79-8.1-3.47-13.38-12-15.77-23.37,1.54,21.54,8.21,52.71,43.34,50.23,3.76,8.81,13.95,14.93,27.21,13.25,38.66-4.89,64.79-52.84,71.44-88.56C947.1,1771.77,935.4,1721.75,889.91,1718.56Zm347.46,142.67c45.18,21.5,88.74,13.5,84.81-37.17.52,28.48-20.91,31.38-43.62,24.89-36.51-10.43-68.56-41-82.42-76.15-7-17.81-9.06-48.2,12.86-56.49-26.28,7.33-39.9,27-40.66,57.36-1,40.08,25.26,81.45,59.47,101.32C1227.83,1875,1237.37,1861.23,1237.37,1861.23Zm-257.48-51.85c6.65,35.72,32.78,83.67,71.44,88.56,13.26,1.68,23.45-4.44,27.21-13.25,35.13,2.48,41.8-28.69,43.34-50.23-2.39,11.32-7.67,19.9-15.77,23.37-27.76,11.89-80.51-16-96.44-73.79-7.11-25.77-6.66-57.33,20.42-65.48C984.6,1721.75,972.9,1771.77,979.89,1809.38Z' style='opacity:0.2'/><path id='Hi' d='M610.94,1553.25c3.15-5.62,8.61-5,8.56,3.07,0,6.24-2.61,17-6.29,19.62-4,2.87-6.4-1.76-6.14-7S608.59,1557.44,610.94,1553.25Zm9.53-7.81c4.91.25,11.12-12.12,14.7-17.5,4.49-6.74,8.85-14.34,13.89-21,5.49-7.26,10.77-15.82,7-17.55-6.44-3-14.54,7.68-18.76,12.45-7.35,8.28-14,20.56-18.63,30.8C616.36,1537.79,615.23,1545.18,620.47,1545.44Zm188.73,18.25c2.87-5.77,8.35-5.43,8.7,2.64.28,6.23-1.77,17.07-5.32,19.9-3.83,3.07-6.47-1.44-6.47-6.65S807.06,1568,809.2,1563.69Zm6-11.25c7.3,1,11.26-14.76,13.54-19.67a171.83,171.83,0,0,1,12.08-22.54c2-3.1,12.71-18.46,5.93-20-7.29-1.66-16.6,13.9-19.61,19a145.89,145.89,0,0,0-13.18,28.22C812.72,1541.11,810,1551.7,815.17,1552.44ZM610.94,1806.92c3.15-5.62,8.61-5,8.56,3.07,0,6.24-2.61,17-6.29,19.62-4,2.87-6.4-1.76-6.14-7S608.59,1811.1,610.94,1806.92Zm9.53-7.81c4.91.25,11.12-12.12,14.7-17.5,4.49-6.74,8.85-14.34,13.89-21,5.49-7.26,10.77-15.82,7-17.56-6.44-3-14.54,7.69-18.76,12.45-7.35,8.29-14,20.57-18.63,30.81C616.36,1791.45,615.23,1798.84,620.47,1799.11Zm188.73,18.24c2.87-5.77,8.35-5.43,8.7,2.65.28,6.23-1.77,17.07-5.32,19.9-3.83,3.07-6.47-1.44-6.47-6.65S807.06,1821.65,809.2,1817.35Zm6-11.24c7.3,1,11.26-14.76,13.54-19.67a172.48,172.48,0,0,1,12.08-22.55c2-3.09,12.71-18.45,5.93-20-7.29-1.66-16.6,13.9-19.61,19a145.89,145.89,0,0,0-13.18,28.22C812.72,1794.77,810,1805.37,815.17,1806.11ZM1312.93,1569c.26,5.21-2.16,9.84-6.14,7-3.68-2.65-6.26-13.38-6.29-19.62,0-8.08,5.41-8.69,8.56-3.07C1311.41,1557.44,1312.67,1563.81,1312.93,1569Zm-11.6-36.34c-4.58-10.24-11.28-22.52-18.63-30.8-4.22-4.77-12.32-15.41-18.76-12.45-3.77,1.73,1.51,10.29,7,17.55,5,6.67,9.4,14.27,13.89,21,3.58,5.38,9.79,17.75,14.7,17.5C1304.77,1545.18,1303.64,1537.79,1301.33,1532.63Zm-187.44,46.95c0,5.21-2.64,9.72-6.47,6.65-3.55-2.83-5.6-13.67-5.32-19.9.35-8.07,5.83-8.41,8.7-2.64C1112.94,1568,1113.88,1574.41,1113.89,1579.58Zm-7.82-42.08a145.89,145.89,0,0,0-13.18-28.22c-3-5.15-12.32-20.71-19.61-19-6.78,1.54,3.94,16.9,5.93,20a171.83,171.83,0,0,1,12.08,22.54c2.28,4.91,6.24,20.71,13.54,19.67C1110.05,1551.7,1107.28,1541.11,1106.07,1537.5Zm206.86,285.14c.26,5.21-2.16,9.84-6.14,7-3.68-2.66-6.26-13.38-6.29-19.62,0-8.08,5.41-8.69,8.56-3.07C1311.41,1811.1,1312.67,1817.48,1312.93,1822.64Zm-11.6-36.34c-4.58-10.24-11.28-22.52-18.63-30.81-4.22-4.76-12.32-15.4-18.76-12.45-3.77,1.74,1.51,10.3,7,17.56,5,6.67,9.4,14.27,13.89,21,3.58,5.38,9.79,17.75,14.7,17.5C1304.77,1798.84,1303.64,1791.45,1301.33,1786.3Zm-187.44,47c0,5.21-2.64,9.72-6.47,6.65-3.55-2.83-5.6-13.67-5.32-19.9.35-8.08,5.83-8.42,8.7-2.65C1112.94,1821.65,1113.88,1828.08,1113.89,1833.25Zm-7.82-42.08a145.89,145.89,0,0,0-13.18-28.22c-3-5.15-12.32-20.71-19.61-19-6.78,1.54,3.94,16.9,5.93,20a172.48,172.48,0,0,1,12.08,22.55c2.28,4.91,6.24,20.7,13.54,19.67C1110.05,1805.37,1107.28,1794.77,1106.07,1791.17Z' style='fill:#fff;opacity:0.2'/><path id='Outline' d='M898.93,1468.5c-34.65-12.33-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.76,106.82-84.76C931.93,1521.08,931.22,1480,898.93,1468.5Zm-175.72,1.16c-31.08-20.1-71.32.68-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.38C743.79,1529.49,752.17,1488.4,723.21,1469.66ZM992.77,1544c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.84-86.7-50.51C988.78,1480,988.07,1521.08,992.77,1544Zm193.08,7.28c28.17,63.66,97.54,81.33,122.89,60.38,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.11-64.63-50.89-95.71-30.79C1167.83,1488.4,1176.21,1529.49,1185.85,1551.28ZM898.93,1720.5c-34.65-12.34-69.42,16.38-86.7,50.51-21.65,42.75-19.34,96.2,8.18,109.75,29.25,14.41,93.09-17.77,106.82-84.76C931.93,1773.08,931.22,1732,898.93,1720.5Zm-175.72,1.16c-31.08-20.1-71.32.67-95.71,30.79-30.55,37.72-40.09,91.5-16.24,111.21,25.35,20.95,94.72,3.28,122.89-60.39C743.79,1781.49,752.17,1740.4,723.21,1721.66ZM992.77,1796c13.73,67,77.57,99.17,106.82,84.76,27.52-13.55,29.83-67,8.18-109.75-17.28-34.13-52-62.85-86.7-50.51C988.78,1732,988.07,1773.08,992.77,1796Zm193.08,7.27c28.17,63.67,97.54,81.34,122.89,60.39,23.85-19.71,14.31-73.49-16.24-111.21-24.39-30.12-64.63-50.89-95.71-30.79C1167.83,1740.4,1176.21,1781.49,1185.85,1803.27Z' style='fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4px'/></g></g>"
                    )));
            }

        
        /// @dev Accessory NÂ°1 => Classic
        function gearSvg1(
            string memory PRIMARY,
            string memory SECONDARY
        ) internal pure returns (string memory, string memory)
            {
            return
                ( "Beanipede",
                    string(
                    abi.encodePacked(
                        "<defs><linearGradient id='linear-gradient' x1='960' y1='1895.95' x2='960' y2='1452.29' gradientUnits='userSpaceOnUse'><stop offset='0' stop-opacity='0.7'/><stop offset='0.14' stop-opacity='0.33'/><stop offset='1' stop-opacity='0'/></linearGradient></defs><g id='_3-Gear' data-name='3-Gear'><g id='Beanipede'><path id='GB-04-Solid' d='M799.05,1556.44c24,4.64,55.46,6.87,59.52-20.8,3.62-24.73-24.47-32.86-47.32-36.85Zm-5.82,150.73c24.4,2.1,55.87,1,57-26.91,1-25-27.77-30.12-50.91-31.7Zm12.53,152c24.48,0,55.75-3.84,54.45-31.78-1.16-25-30.29-27.58-53.48-27.14Zm303-360.39c-22.85,4-50.94,12.12-47.32,36.85,4.06,27.67,35.48,25.44,59.52,20.8Zm11.91,149.77c-23.14,1.58-51.93,6.73-50.91,31.7,1.15,28,32.62,29,57,26.91Zm-7.39,151.7c-23.19-.44-52.32,2.18-53.48,27.14-1.3,27.94,30,31.74,54.45,31.78Z' style='fill:#",
                        PRIMARY, 
                        "'/><path id='GB-03-Solid' d='M811.28,1523.24c-7.25,63.12-77.12,62.88-124.36,46.81-32.95-11.21-65.84-34.61-53.53-77.11,9.69-33.43,44.92-41.28,84-40.65C772.63,1453.19,817,1473.66,811.28,1523.24ZM801.93,1673c-.62,63.54-70.13,70.6-118.79,59.56-33.94-7.7-69.1-27.53-61.29-71.09,6.14-34.26,40.35-45.75,79.32-49.21C756.17,1607.35,802.42,1623.07,801.93,1673Zm9.52,151.47c4.92,63.35-63.71,76.44-113.15,69.68-34.48-4.71-71.23-21.41-67.25-65.48,3.13-34.66,36.21-49.09,74.73-55.93C760.14,1763.05,807.58,1774.68,811.45,1824.44Zm391.13-372.15c39.11-.63,74.34,7.22,84,40.65,12.31,42.5-20.58,65.9-53.53,77.11-47.24,16.07-117.11,16.31-124.36-46.81C1103,1473.66,1147.37,1453.19,1202.58,1452.29Zm16.25,159.94c39,3.46,73.18,15,79.32,49.21,7.81,43.56-27.35,63.39-61.29,71.09-48.66,11-118.17,4-118.79-59.56C1117.58,1623.07,1163.83,1607.35,1218.83,1612.23Zm-4.61,160.48c38.52,6.84,71.6,21.27,74.73,55.93,4,44.07-32.77,60.77-67.25,65.48-49.44,6.76-118.07-6.33-113.15-69.68C1112.42,1774.68,1159.86,1763.05,1214.22,1772.71Z' style='fill:#",
                        SECONDARY,
                        "'/><path id='Grad' d='M860.21,1827.4c1.3,27.94-30,31.74-54.45,31.78-19.06,34-69,40.64-107.46,34.94-34.42-5.11-71.23-21.41-67.26-65.48,3.13-34.66,36.35-48.37,74.74-55.93,44.76-8.82,85.63.36,100,27.55C828.92,1799.82,859.05,1802.44,860.21,1827.4ZM686.92,1570.05c36.61,13,92,13.69,111.13-13.61,24,4.64,56.46,6.87,60.51-20.8,3.63-24.73-25.46-32.86-48.31-36.85-5.53-22.61-37.54-46.16-92.83-46.5-39.12-.23-74.34,7.22-84,40.65C621.08,1535.44,654.11,1558.44,686.92,1570.05Zm-3.78,162.48c37.62,9.15,88.42,7.31,110.09-25.36,24.39,2.1,55.87,1,57-26.91,1-25-28.76-30.12-51.9-31.7,0,0-15-43.93-97.17-36.33-39,3.61-73.18,15-79.32,49.21C614,1705,649.32,1724.31,683.14,1732.53Zm376.65,94.87c-1.3,27.94,30,31.74,54.45,31.78,19.06,34,69,40.64,107.46,34.94,34.42-5.11,71.23-21.41,67.26-65.48-3.13-34.66-36.35-48.37-74.74-55.93-44.76-8.82-85.63.36-100,27.55C1091.08,1799.82,1061,1802.44,1059.79,1827.4Zm226.82-334.46c-9.69-33.43-44.91-40.88-84-40.65-55.29.34-87.3,23.89-92.83,46.5-22.85,4-51.94,12.12-48.31,36.85,4,27.67,36.47,25.44,60.51,20.8,19.1,27.3,74.52,26.57,111.13,13.61C1265.89,1558.44,1298.92,1535.44,1286.61,1492.94Zm11.54,168.5c-6.14-34.26-40.36-45.6-79.32-49.21-82.22-7.6-97.17,36.33-97.17,36.33-23.14,1.58-52.92,6.73-51.9,31.7,1.14,28,32.62,29,57,26.91,21.67,32.67,72.47,34.51,110.09,25.36C1270.68,1724.31,1306,1705,1298.15,1661.44Z' style='opacity:0.7000000000000001;fill:url(#linear-gradient)'/><path id='Shad' d='M667.21,1562.06c-17.36-11.4-38.92-25.66-35.89-54.15,4.92,23,29.74,34.26,50.1,40.32,28.5,8.48,60.1,7.56,88.33-1.41,22.34-7.1,41.11-37.8,31.77-63.4a82.37,82.37,0,0,1,10.68,19.29c3.3,42.38,47.62,43.88,45.84,23.2,4.72,14.25.73,32.25-12.18,39.58-16.44,9.34-29.33,3-43.46,8.52-6.86,2.65-12.95,6.8-19.23,10.54-31.79,18.92-94.2,10.06-114.13-11.4Zm14.14,180.79c8.76,4.54,27.39,9.19,43.32,8.73,16.32-.47,32.48-3.87,46.89-11.74,13.24-7.22,23.68-15.88,39.2-17.9,13.64-1.78,27.82-3.79,37.33-15.56,8.54-10.58,7.73-31.54-.85-42.06,4.65,20.23-39.45,24.93-48.63-16.57a82.69,82.69,0,0,0-13.27-17.61c12.82,24-1.48,57.06-22.61,67.21-26.7,12.83-57.86,18.15-87.26,13.73-21-3.16-47.17-10.88-55.24-32.93,1.41,25.2,25.53,44.36,65.53,55Zm51.83,165.84c17.38,1.25,43.13-5.3,60.34-20.89,9.86-8.92,20.83-15.86,34-18.67,11.58-2.47,25.37-5.56,31.87-16.67,5.64-9.64,3.89-26.62-2.29-37.17,6.05,19.86-37.61,27.61-49.67-13.14a82.21,82.21,0,0,0-14.46-16.64c14.46,23.09,2.5,57-17.87,68.62-25.74,14.66-56.46,22.14-86.09,19.78-21.18-1.68-47.81-7.56-57.41-29,3.17,25,29.66,48.14,82.55,50.8Zm518.61-346.63c13.46-8.71,39.5-21.71,36.89-54.15-4.92,23-29.74,34.26-50.1,40.32-28.5,8.48-60.1,7.56-88.33-1.41-22.34-7.1-41.11-37.8-31.77-63.4a82.37,82.37,0,0,0-10.68,19.29c-3.3,42.38-47.62,43.88-45.84,23.2-4.72,14.25-.73,32.25,12.18,39.58,16.44,9.34,29.33,3,43.46,8.52,6.86,2.65,13,6.8,19.23,10.54,31.79,18.92,93.2,10.06,113.13-11.4Zm-16.55,171.11c40-10.66,63.12-29.82,64.53-55-8.07,22-34.23,29.77-55.24,32.93-29.4,4.42-60.56-.9-87.26-13.73-21.13-10.15-35.43-43.17-22.61-67.21a82.69,82.69,0,0,0-13.27,17.61c-9.18,41.5-53.28,36.8-48.63,16.57-8.58,10.52-9.39,31.48-.85,42.06,9.51,11.77,23.69,13.78,37.33,15.56,15.52,2,26,10.68,39.2,17.9,14.41,7.87,30.57,11.27,46.89,11.74,15.93.46,35-2.23,44.32-8.73Zm-29.35,162.55c52.89-2.66,79.38-25.76,82.55-50.8-9.6,21.43-36.23,27.31-57.41,29-29.63,2.36-60.35-5.12-86.09-19.78-20.37-11.6-32.33-45.53-17.87-68.62a82.21,82.21,0,0,0-14.46,16.64c-12.06,40.75-55.72,33-49.67,13.14-6.18,10.55-7.93,27.53-2.29,37.17,6.5,11.11,20.29,14.2,31.87,16.67,13.13,2.81,24.1,9.75,34,18.67,17.21,15.59,43,22.14,60.34,20.89Z' style='opacity:0.2'/><path id='Hi' d='M633,1492.94c9.68-33.43,44.91-41.28,84-40.65,24.71.41,47.24,4.73,64.08,13.82,20.8,11.23,14.45,26.46-3.07,18-15.85-7.7-36.16-11.4-58.27-11.77-32.26-.53-59.88,2.11-69.78,19.66C640.55,1508.7,628.45,1508.72,633,1492.94Zm5,164.58c10.86-14.12,38.8-22.81,66-25.29,24.5-2.24,47.2-.14,64.56,7.6s22.46-7.22,5-16.89c-18.49-10.27-44.49-13.22-72.82-10.71-34,3-61.79,13.53-75.68,37.25C614.1,1668.31,626.43,1672.65,638.06,1657.52Zm10.66,161.68c13.21-16.8,38.21-23.81,59.76-26.49,25.89-3.23,49.73-4.36,68.12,2.94s21.63-9,4.89-17.39c-19.53-9.78-46.81-10.75-76.09-5.55-30.9,5.49-58.79,15.62-69.55,37.65C626.9,1828.68,633.53,1838.52,648.72,1819.2ZM1270,1492c-9.9-17.55-37.52-20.19-69.78-19.66-22.11.37-42.42,4.07-58.27,11.77-17.52,8.51-23.87-6.72-3.07-18,16.84-9.09,39.37-13.41,64.08-13.82,39.12-.63,74.35,7.22,84,40.65C1291.55,1508.72,1279.45,1508.7,1270,1492Zm24.9,157.53c-13.89-23.72-41.65-34.23-75.68-37.25-28.33-2.51-54.33.44-72.82,10.71-17.42,9.67-12.32,24.64,5,16.89s40.06-9.84,64.56-7.6c27.15,2.48,55.09,11.17,66,25.29C1293.57,1672.65,1305.9,1668.31,1294.89,1649.48Zm-10.74,160.88c-10.76-22-38.65-32.16-69.55-37.65-29.28-5.2-56.56-4.23-76.09,5.55-16.74,8.38-13.51,24.69,4.89,17.39s42.23-6.17,68.12-2.94c21.55,2.68,46.55,9.69,59.76,26.49C1286.47,1838.52,1293.1,1828.68,1284.15,1810.36ZM841.21,1515.87c4.35-.32,9.67,3.9,11.23,7.85s-1.93,6.2-5.64,5.21a17,17,0,0,1-7.89-5,7.27,7.27,0,0,1-1.91-4.11C836.86,1517.81,838.11,1516.09,841.21,1515.87ZM824.2,1665a7.33,7.33,0,0,0,2.65,3.67,17,17,0,0,0,8.7,3.35c3.83.26,6.88-2.52,4.54-6.2s-8.31-6.7-12.53-5.55C824.56,1661.07,823.66,1663,824.2,1665Zm9.26,151.2a7.34,7.34,0,0,0,3.07,3.33,16.83,16.83,0,0,0,9,2.3c3.83-.19,6.54-3.31,3.78-6.69s-9.05-5.67-13.1-4C833.36,1812.26,832.69,1814.28,833.46,1816.19ZM1083,1519.87a7.27,7.27,0,0,1-1.91,4.11,17,17,0,0,1-7.89,5c-3.71,1-7.24-1.16-5.64-5.21s6.88-8.17,11.23-7.85C1081.89,1516.09,1083.14,1517.81,1083,1519.87Zm9.44,140.39c-4.22-1.15-10.24,2-12.53,5.55s.71,6.46,4.54,6.2a17,17,0,0,0,8.7-3.35,7.33,7.33,0,0,0,2.65-3.67C1096.34,1663,1095.44,1661.07,1092.44,1660.26Zm-8.68,150.84c-4-1.64-10.41.75-13.1,4s-.05,6.5,3.78,6.69a16.83,16.83,0,0,0,9-2.3,7.34,7.34,0,0,0,3.07-3.33C1087.31,1814.28,1086.64,1812.26,1083.76,1811.1Z' style='fill:#fff;opacity:0.2'/><path id='Outline' d='M811.28,1523.24c-7.25,63.12-77.12,62.88-124.36,46.81-32.95-11.21-65.84-34.61-53.53-77.11,9.69-33.43,44.92-41.28,84-40.65C772.63,1453.19,817,1473.66,811.28,1523.24Zm-11.23,33.2c24,4.64,55.46,6.87,59.52-20.8,3.62-24.73-25.47-32.86-48.32-36.85M801.93,1673c-.62,63.54-70.13,70.6-118.79,59.56-33.94-7.7-69.1-27.53-61.29-71.09,6.14-34.26,40.35-45.75,79.32-49.21C756.17,1607.35,802.42,1623.07,801.93,1673Zm-7.7,34.2c24.4,2.1,55.87,1,57-26.91,1-25-28.77-30.12-51.91-31.7m12.11,175.88c4.92,63.35-63.71,76.44-113.15,69.68-34.48-4.71-71.23-21.41-67.25-65.48,3.13-34.66,36.21-49.09,74.73-55.93C760.14,1763.05,807.58,1774.68,811.45,1824.44Zm-4.69,34.74c24.48,0,55.75-3.84,54.45-31.78-1.16-25-31.29-27.58-54.48-27.14m395.85-348c39.11-.63,74.34,7.22,84,40.65,12.31,42.5-20.58,65.9-53.53,77.11-47.24,16.07-117.11,16.31-124.36-46.81C1103,1473.66,1147.37,1453.19,1202.58,1452.29Zm-93.83,46.5c-22.85,4-51.94,12.12-48.32,36.85,4.06,27.67,35.48,25.44,59.52,20.8m98.88,55.79c39,3.46,73.18,15,79.32,49.21,7.81,43.56-27.35,63.39-61.29,71.09-48.66,11-118.17,4-118.79-59.56C1117.58,1623.07,1163.83,1607.35,1218.83,1612.23Zm-98.17,36.33c-23.14,1.58-52.93,6.73-51.91,31.7,1.15,28,32.62,29,57,26.91m88.45,65.54c38.52,6.84,71.6,21.27,74.73,55.93,4,44.07-32.77,60.77-67.25,65.48-49.44,6.76-118.07-6.33-113.15-69.68C1112.42,1774.68,1159.86,1763.05,1214.22,1772.71Zm-101,27.55c-23.19-.44-53.32,2.18-54.48,27.14-1.3,27.94,30,31.74,54.45,31.78' style='fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:4px'/></g></g>"
                )
                            )
                );
            }


        
        function getLibraryCount() public view returns (uint256 ) {
                return libraryCount;

        }

        function getGearSvg(string memory classOne, string memory classTwo, uint256 rand) public pure returns (string memory, string memory ) {
            if (rand == 1) {
                return gearSvg1(classOne, classTwo);
            } else {
                return gearSvg0(classOne, classTwo);
            }

        }
    }

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. `SafeCast` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 *
 * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
 * all math on `uint256` and `int256` and then downcasting.
 */
library SafeCast {
    /**
     * @dev Returns the downcasted uint224 from uint256, reverting on
     * overflow (when the input is greater than largest uint224).
     *
     * Counterpart to Solidity's `uint224` operator.
     *
     * Requirements:
     *
     * - input must fit into 224 bits
     */
    function toUint224(uint256 value) internal pure returns (uint224) {
        require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
        return uint224(value);
    }

    /**
     * @dev Returns the downcasted uint128 from uint256, reverting on
     * overflow (when the input is greater than largest uint128).
     *
     * Counterpart to Solidity's `uint128` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     */
    function toUint128(uint256 value) internal pure returns (uint128) {
        require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
        return uint128(value);
    }

    /**
     * @dev Returns the downcasted uint96 from uint256, reverting on
     * overflow (when the input is greater than largest uint96).
     *
     * Counterpart to Solidity's `uint96` operator.
     *
     * Requirements:
     *
     * - input must fit into 96 bits
     */
    function toUint96(uint256 value) internal pure returns (uint96) {
        require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
        return uint96(value);
    }

    /**
     * @dev Returns the downcasted uint64 from uint256, reverting on
     * overflow (when the input is greater than largest uint64).
     *
     * Counterpart to Solidity's `uint64` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     */
    function toUint64(uint256 value) internal pure returns (uint64) {
        require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
        return uint64(value);
    }

    /**
     * @dev Returns the downcasted uint32 from uint256, reverting on
     * overflow (when the input is greater than largest uint32).
     *
     * Counterpart to Solidity's `uint32` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     */
    function toUint32(uint256 value) internal pure returns (uint32) {
        require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
        return uint32(value);
    }

    /**
     * @dev Returns the downcasted uint16 from uint256, reverting on
     * overflow (when the input is greater than largest uint16).
     *
     * Counterpart to Solidity's `uint16` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     */
    function toUint16(uint256 value) internal pure returns (uint16) {
        require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
        return uint16(value);
    }

    /**
     * @dev Returns the downcasted uint8 from uint256, reverting on
     * overflow (when the input is greater than largest uint8).
     *
     * Counterpart to Solidity's `uint8` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits.
     */
    function toUint8(uint256 value) internal pure returns (uint8) {
        require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
        return uint8(value);
    }

    /**
     * @dev Converts a signed int256 into an unsigned uint256.
     *
     * Requirements:
     *
     * - input must be greater than or equal to 0.
     */
    function toUint256(int256 value) internal pure returns (uint256) {
        require(value >= 0, "SafeCast: value must be positive");
        return uint256(value);
    }

    /**
     * @dev Returns the downcasted int128 from int256, reverting on
     * overflow (when the input is less than smallest int128 or
     * greater than largest int128).
     *
     * Counterpart to Solidity's `int128` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     *
     * _Available since v3.1._
     */
    function toInt128(int256 value) internal pure returns (int128) {
        require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
        return int128(value);
    }

    /**
     * @dev Returns the downcasted int64 from int256, reverting on
     * overflow (when the input is less than smallest int64 or
     * greater than largest int64).
     *
     * Counterpart to Solidity's `int64` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     *
     * _Available since v3.1._
     */
    function toInt64(int256 value) internal pure returns (int64) {
        require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
        return int64(value);
    }

    /**
     * @dev Returns the downcasted int32 from int256, reverting on
     * overflow (when the input is less than smallest int32 or
     * greater than largest int32).
     *
     * Counterpart to Solidity's `int32` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     *
     * _Available since v3.1._
     */
    function toInt32(int256 value) internal pure returns (int32) {
        require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
        return int32(value);
    }

    /**
     * @dev Returns the downcasted int16 from int256, reverting on
     * overflow (when the input is less than smallest int16 or
     * greater than largest int16).
     *
     * Counterpart to Solidity's `int16` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     *
     * _Available since v3.1._
     */
    function toInt16(int256 value) internal pure returns (int16) {
        require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
        return int16(value);
    }

    /**
     * @dev Returns the downcasted int8 from int256, reverting on
     * overflow (when the input is less than smallest int8 or
     * greater than largest int8).
     *
     * Counterpart to Solidity's `int8` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits.
     *
     * _Available since v3.1._
     */
    function toInt8(int256 value) internal pure returns (int8) {
        require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
        return int8(value);
    }

    /**
     * @dev Converts an unsigned uint256 into a signed int256.
     *
     * Requirements:
     *
     * - input must be less than or equal to maxInt256.
     */
    function toInt256(uint256 value) internal pure returns (int256) {
        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
        require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
        return int256(value);
    }
}