// Receive funds from any user
// Withdraw funds (contract owner only)
// Set a minimum funding value

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "./PriceConverter.sol";

error NotOwner();

contract FundMe {
    // immutable = variable can only be assigned during construction time,
    //   and only assigned once even during construction
    //   the contract creation code generated by the compiler will modify
    //   the contract's runtime code before it is returned
    //   by replacing all references to immutables by the values assigned to the them.
    // Reference: https://ethereum.stackexchange.com/questions/82240/what-is-the-immutable-keyword-in-solidity
    address public immutable i_owner;
    // 23619 gas - non-immutable
    // 21508 gas - immutable

    using PriceConverter for uint256;

    // 21415 gas - constant
    // 23515 gas - non-constant
    uint256 public MINIMUM_USD = 10 * 1e18;

    address[] public funders;
    mapping(address => uint256) public addressToAmountFunded;

    AggregatorV3Interface public priceFeed;

    constructor(address priceFeedAddress) {
        i_owner = msg.sender;
        priceFeed = AggregatorV3Interface(priceFeedAddress);
    }

    // payable = this function can send and receive funds
    function fund() public payable {
        // If this "require" condition is not satisfied, the transaction is reverted
        // "Revert" means to undo any action before and send the remaining gas back
        // 1e18 = 1 * 10^18 Wei = 1 Ether
        // require(getConversionRate(msg.value) >= MINIMUM_USD, "Not enough Ether");
        require(
            msg.value.getConversionRate(priceFeed) > MINIMUM_USD,
            "Please send more than 50 USD worth of Ether"
        );
        funders.push(msg.sender);
        addressToAmountFunded[msg.sender] += msg.value;
    }

    function withdraw() public onlyOwner {
        // Reset the mapping that tracks funders and their amount
        for (
            uint256 funderIndex = 0;
            funderIndex < funders.length;
            funderIndex++
        ) {
            address funderAddress = funders[funderIndex];
            addressToAmountFunded[funderAddress] = 0;
        }

        // Reset an array
        // (0) means the new array will have 0 elements to begin with
        funders = new address[](0);

        // 3 ways to withdraw the fund:
        // 1) Transfer
        // Ether can only be sent to payable addresses
        // Transfer will return error and auto-revert if fail
        // payable(msg.sender).transfer(address(this).balance);

        // 2) Send
        // Send will return bool and will not auto-revert
        // bool sendSuccess = payable(msg.sender).send(address(this).balance);
        // require(sendSuccess, "Send failed");

        // 3) Call
        // This is the most powerful, we can call any function without knowing the ABI.
        // We use "call" to create a new transaction to the sender's address and send the "value"
        // instead of making an actual function call
        // (bool callSuccess, bytes memory dataReturned)
        (bool callSuccess, ) = payable(msg.sender).call{
            value: address(this).balance
        }("");
        require(callSuccess, "Call failed");
    }

    modifier onlyOwner() {
        // 21509 gas - require
        // 21255 gas - if + revert error
        // require(msg.sender == i_owner, "You are not the owner.");
        if (msg.sender != i_owner) {
            revert NotOwner();
        }
        // This means execute the rest of the code
        _;
    }

    // Fallback to receive() when msg.data is empty in a transaction
    receive() external payable {
        fund();
    }

    // Fallback to fallback() when msg.data is not empty but cannot be mapped to an actual function
    fallback() external payable {
        fund();
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

// @chainlink/contracts is an npm package
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

// Reference: https://docs.chain.link/docs/ethereum-addresses/
// Kovan Data Feed ETA - USD Address: 0x9326BFA02ADD2366b30bacB125260Af641031331

library PriceConverter {
    // Return the USD price of one ETH, in the same number of decimals as msg.value (decimals = 18)
    function getPrice(AggregatorV3Interface priceFeed)
        internal
        view
        returns (uint256)
    {
        (, int256 price, , , ) = priceFeed.latestRoundData();
        // price decimals = 8
        // Reference: https://etherscan.io/address/0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419#readContract
        // we need to add 10 more decimals here
        return uint256(price * 1e10);
    }

    function getConversionRate(
        uint256 ethAmount,
        AggregatorV3Interface priceFeed
    ) internal view returns (uint256) {
        uint256 ethPrice = getPrice(priceFeed);
        uint256 ethAmountInUSD = (ethAmount * ethPrice) / 1e18;
        return ethAmountInUSD;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}