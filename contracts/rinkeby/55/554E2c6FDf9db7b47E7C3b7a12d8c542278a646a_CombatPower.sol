// SPDX-License-Identifier: MIT LICENSE

pragma solidity 0.8.9;

import "@openzeppelin/contracts/utils/math/Math.sol";

contract CombatPower {
//    address immutable setsAddress1;
//    address immutable setsAddress2;
    bytes constant cpData = hex"";
    bytes constant boostData = hex"";


//constructor(address _setsAddress1, address _setsAddress2) {
//        setsAddress1 = _setsAddress1;
//        setsAddress2 = _setsAddress2;
//    }

    /**
     * NB: tokenIds are required to be pre-sorted. No duplicates allowed.
     */
//    function getHoodBoost(uint256[] calldata tokenIds) external view returns (uint256) {
//        /*
//         * Collection of User's nft tokens staked into the Metroverse Vault defines Hood.
//         * Each Block could contain Special Entities. Certain combinations of
//         * Special Entities incrases rate of MET generation.
//         * For example, if Hospital, Police Station and Fire Station are seen
//         * all together in User's blocks then whole collection will give 5% more
//         * MET.
//         */
//        uint256 hoodSize = tokenIds.length;
//
//        if(hoodSize == 0) {
//            return 0;
//        }
//
//        // count the special bits of the tokens
//        uint256 counterHi;
//        uint256 counterLo;
//        uint256 prevTokenId;
//        for (uint256 i; i < tokenIds.length; i++) {
//            uint256 tokenId = tokenIds[i];
//            require(prevTokenId < tokenId, 'no duplicates allowed');
//            prevTokenId = tokenId;
//
//            uint256 boost = getTokenBoosts256(tokenId);
//        unchecked {
//            counterLo +=  boost       & 0x0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001;
//            counterHi += (boost >> 8) & 0x0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001_0001;
//        }
//        }
//
//        // There are 10 boost categories. Each category gives specific increase in MET production.
//        // To get category boost blocks should have 3 special buildings related to the category
//        // Safety, Education, Entertainment, Transport, Sports, Energy, Cultural, Mansion, Tech, Odds
//        uint256 totalBoost = 0;
//        uint256 hoodSizeCorrection = 1000 * MAX_HOOD_SIZE / Math.max(hoodSize, MAX_HOOD_SIZE);
//
//    unchecked { // River & River
//        uint256 min = ((counterHi >> 240) & 0xffff) / 3;
//        if (min > 0) {totalBoost += 800 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//
//    unchecked { // Rail & Rail
//        uint256 min = ((counterLo >> 240) & 0xffff) / 3;
//        if (min > 0) {totalBoost += 400 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//
//        // for each category get the minimum of the 3 counts and add the stacked boost for that category
//    unchecked { // Safety
//        uint256 min = (counterHi >> 224) & 0xffff;
//        uint256 v   = (counterLo >> 224) & 0xffff; if (v < min) {min = v;}
//        v           = (counterHi >> 208) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 500 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Education
//        uint256 min = (counterLo >> 208) & 0xffff;
//        uint256 v   = (counterHi >> 192) & 0xffff; if (v < min) {min = v;}
//        v           = (counterLo >> 192) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 600 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Entertainment
//        uint256 min = (counterHi >> 176) & 0xffff;
//        uint256 v   = (counterLo >> 176) & 0xffff; if (v < min) {min = v;}
//        v           = (counterHi >> 160) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 600 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Transport
//        uint256 min = (counterLo >> 160) & 0xffff;
//        uint256 v   = (counterHi >> 144) & 0xffff; if (v < min) {min = v;}
//        v           = (counterLo >> 144) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 500 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Sports
//        uint256 min = (counterHi >> 128) & 0xffff;
//        uint256 v   = (counterLo >> 128) & 0xffff; if (v < min) {min = v;}
//        v           = (counterHi >> 112) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 1000 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Energy
//        uint256 min = (counterLo >> 112) & 0xffff;
//        uint256 v   = (counterHi >> 96) & 0xffff; if (v < min) {min = v;}
//        v           = (counterLo >> 96) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 800 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Cultural
//        uint256 min = (counterHi >> 80) & 0xffff;
//        uint256 v   = (counterLo >> 80) & 0xffff; if (v < min) {min = v;}
//        v           = (counterHi >> 64) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 500 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Mansion
//        uint256 min = (counterLo >> 64) & 0xffff;
//        uint256 v   = (counterHi >> 48) & 0xffff; if (v < min) {min = v;}
//        v           = (counterLo >> 48) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 600 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Tech
//        uint256 min = (counterHi >> 32) & 0xffff;
//        uint256 v   = (counterLo >> 32) & 0xffff; if (v < min) {min = v;}
//        v           = (counterHi >> 16) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 800 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//    unchecked { // Odds
//        uint256 min = (counterLo >> 16) & 0xffff;
//        uint256 v   = (counterHi) & 0xffff; if (v < min) {min = v;}
//        v           = (counterLo) & 0xffff; if (v < min) {min = v;}
//        if (min > 0) {totalBoost += 600 * _getSpreadedBoost(hoodSizeCorrection, min);}
//    }
//
//
//        // 10000 equals to 1, to be divided by 10000 in vault contract
//        // return 10100 to give boost of 1%
//    unchecked {
//        return 10000 + totalBoost / 1000 ;
//    }
//    }

//    function getSetInfo(uint256 tokenId) private view returns (uint256) {
//        unchecked {
//            (address contractAddress, uint index) = tokenId <= 5000 ? (boosts1Address, tokenId-1) : (boosts2Address, tokenId-5001);
//            uint256 mem;
//            assembly {
//                let data := mload(0x40) // load the free memory pointer for temporarily storing the data
//            // read a 32 byte word at offset from the runtime code at contractAddress  and put it into the memory location at data,
//            // 32 bytes are added to the offset because that is to skip the 32 STOP opcodes at the start of the runtime code
//                extcodecopy(contractAddress, data, add(shl(2, and(index, not(7))), 32), 32)
//                mem := mload(data) // load the memory into the solidity variable
//            }
//            return (mem >> (index & 7)) & 0x01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01;
//        }
//    }
    
    function getChampionCP(uint256 tokenId) external pure returns (uint256) {
        require(tokenId <= 4444 && tokenId > 0, "Invalid tokenId");
        bytes1 chunk = cpData[tokenId-1];
        uint8 chunkUint8 = uint8(chunk);
        return 100 + uint256(chunkUint8);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}