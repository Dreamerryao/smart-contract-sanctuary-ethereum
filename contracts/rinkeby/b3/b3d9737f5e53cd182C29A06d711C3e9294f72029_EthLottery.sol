/**
 *Submitted for verification at Etherscan.io on 2022-04-28
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7; //version of solidity

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

/**
* @author Lukáš Kuthan
* @title Ethereum Lottery
*/
contract EthLottery is VRFConsumerBase{

    /*variables definition*/
    address payable public creator;
    // array of lottery participants
    address payable[] public participants; 
    uint public lotteryId;     
    // collection of winners                                 
    mapping (uint => address payable) public lotteryWinners;

    // public key against which randomness is generated
    bytes32 internal keyHash; 
    // fee to get random number
    uint  internal fee;       
    uint public randomResult;

     constructor()
        VRFConsumerBase(
            // address of Chainlink VRF coordinator
            0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B,
            //LINK token address for Ethereum
            0x01BE23585060835E02B77ef475b0Cc51aA1e0709 
        ){
            keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
            fee = 0.1 * 10 ** 18; //0,1 LINK fee

            //asign creator to address of contract deployer
            creator = payable(msg.sender);
            lotteryId = 1;
        }
    
    /**
    * @notice mainly makes initial request for randomness
    * @dev make sure that contract has enough LINK
    * @return requestID
    */
    function getRandNum() public returns (bytes32 requestID) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK in contract!");
        return requestRandomness(keyHash, fee);
    }

    /**
    * @notice receive random number and assign it + pay off winner
    * @param requestID  identify particular request to chainlink
    * @param randomness answer from chainlink
    */
    function fulfillRandomness(bytes32 requestID, uint randomness) internal override {
        randomResult = randomness;
        payOutWinner();
    }

    /**
    * @notice provide entrance to lottery for participants
    */
    function enterLottery() public payable {
        // restrictions that creator cannot enter lottery
        require(msg.sender != creator, "Creator cannot enter lottery");
        // compulsory deposit
        require(msg.value > 0.01 ether, "Not enough eth!");
        // addign participant to array
        participants.push(payable(msg.sender)); 
    }

    /**
    * @notice choosing a winner
    */
    function chooseWinner() public {
        // only creator can call this function
        require(msg.sender == creator, "Not a lottery creator!");
        getRandNum();
    }

    /**
    * @notice assign a winner and transfer fee to creator + reward for winner
    * @notice then inicialize a new lottery instance
    */
    function payOutWinner() public {
        // assigning number of winner
        uint index = randomResult % participants.length;

        // pick a fee and transfer it to the creator
        uint feeToCreator = address(this).balance / 10;
        creator.transfer(feeToCreator);
        
        // sending win
        participants[index].transfer(address(this).balance);

        // register lottery winner
        lotteryWinners[lotteryId] = participants[index];
        lotteryId++;
        //restart stavu smart contractu
        participants = new address payable[](0);
    }

    /**
    * @notice show lottery balance
    * @return lottery pot
    */
    function getLotBalance() public view returns(uint){
        return address(this).balance;
    }

    /**
    * @notice show list of actual's lottery instance participants
    * @return array of participants
    */
    function getParticipants() public view returns (address payable[] memory){
        return participants;
    }

    /**
    * @notice show a  former winner by lottery ID
    * @return address of former winner
    */
    function getWinnerByLotteryId(uint lotId) public view returns(address payable){
        return lotteryWinners[lotId];
    }

    /**
    * @notice show ID of actual's lottery instance
    * @return number representing ID
    */
    function getLotteryId() public view returns(uint){
        return lotteryId;
    }

    /**
    * @notice show lottery creator
    * @return address of contract creator
    */
    function getLotteryCreator() public view returns(address){
        return creator;
    }

}