//SPDX-License-Identifier: UNLICENSED

// MWWWWMWWWWMWWWWMWWWMWWWWMWWWWMWWWWWWWWWWWWWWWNNWWNNNNWWWNWWWWWWMWWWWMWWWWMWWWWMWWWWMWWWWMWWWMWWWWMWW
// WWWMWWWMWWWWMWWWWMWWWWMWWWWWWWWMWWWWWWNNNWNNWWWWWWWWWWWNNNXNNWWWWWMWWWWWWWWWWWWWMWWWWMWWWWMWWWWWWWWW
// MWWWWWWWWWWWWWWWWWWWWWWWMWWWWMWWWWWWNNNWWWWWNXXKKKKKXXNWWWWNNNNNWWWWMWWWWWWWWWWWWWWWWWWWWWWWMWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWWWWN0kdolcc::::::clodk0XWWWNNXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWWWNOdl:;::::::::::::;;;;:cdOXWWNXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNWWWXkl:::ccccllllcccc::::;;;;;;cxKWWNXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWMWWWWMWWWWWWWWWWNNWMNkc;::clloooolllllllcc:::;;;;;;;cxXWWXXNWWWWWWWWWWWWWMWWWWMWWWWWWWWW
// MWWWWMWWWWWWWWWWWWWWWWWWWWWNNWWKo;;::cldkO0Oxdooolllllcc:;;;;;;;;;oKWWXKNWWWWWMWWWWMWWWWWWWWWWWWWMWW
// WWWMWWWWWWWWWWWWWMWWWWMWWWNNWMKo;;::clokKXXKkdooolllllcc::;;;;;;;;;l0WWXKXWWWWWWMWWWWMWWWWMWWWWMWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWNWMNd;;:::ccldkO0Oxooollllllcc::;;,,,;;;;;oXMWKXNWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWNNMWO:;;;:::cclooooolllllllcccc::;;,,,,;;;;;kWMXKXWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWNNWMNd;;;;;:::cccccllllllcccccc::;;;,,,,;;;;;oXMNKKWWWWWWWWWWWWWWWWWWWWWWWWW
// MWWWWWWWWWWWWWWWWWWWWWWWWNWMXo,;;;;;::::ccccccccccccc::::;;,,,,,,;;;;lKMNKKNWWWWWWWWWWWWWWWWWWWWWMWW
// WWWWWWWMWWWWMWWWWMWWWWWWNXWMNo;;;;;;;;:::::::::::::::::;;;,,,,,,,;;;;lXMN0KNWWWWMWWWWMWWWWMWWWWMWWWW
// MWWWWMWWWWMWWWMWWWWMWWWWWNNMWx;;;;;;;;;;;;:::::::::;;;;;,,,,,,,,;;;;;dNMN0XNWWMWWWWMWWWWWWWWWWWWWMWW
// WWWWWWWWWWWWWWWWWWWWWWWWWNNWW0c;;;;;,;,,;;;;;;;;;;;;;,,,,,,,,,,,;;;;c0WWK0XWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWNXNWWk:;;;;;,,,,,,,,,,,,,,,,,,,,,,,,,,;;;;:xNMN0KNWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWNNWMNk:;;;;;,,,,,,,,,,,,,,,,,,,,,,,;;;;;:xNMNKKNWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWNNWWWOl;;;;;;,,,,,,,,,,,,,,,,,,,;;;;;;cONMN0KXNWWWWWWWWWWWWWWWWWWWWWWWWWW
// MWWWWMWWWWMWWWWWWWWWWWWWMWWWNXNWWXxc;;;;;;;;,,,,,,,,,,;;;;;;;;;cxKWWX00XWWWWWWMWWWWMWWWWWWWWWWWWWMWW
// WWWMWWWMWWWWWWWWWMWWWWMWWWWWWNXXNWWXkl:;;;;;;;;;;;;;;;;;;;;;:lxKWWNK0XNWWWWWMWWWMWWWWMWWWWMWWWWMWWWW
// MWWWWWWWWWWWWWWWWWWMWWWWMWWWWWWNXXNWWN0xoc:;;;;;;;;;;;;;:cox0NWWNK0KNWWWWMWWWWWWWWWWWWWWWWWWMWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNXXXNWWWNKkc;:ccllllllxKXWWWNK00XNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNXXXXNWMXocoxOO000OkXMWXK0KXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXXWMXocoxO0000OkXMWK0XNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWMWWWWMWWWWWWWWWWWWWWWWWWWWWNNWMXocokO0000OkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWMWWWWMWWWWWWWWW
// MWWWWMWWWWMWWWMWWWWMWWWWMWWWWMWWWWMWWWWNNWMXocdkO0KKKOkXMWK0NNWWWWWWMWWWWMWWWWMWWWWMWWWMWWWWMWWWWMWW
// WWWWWWWWWWWWMWWWWMWWWWWWWWWWWWWMWWWWWWWNNWMXocdkO0KKKOkXMWK0NWWWWWMWWWWWWWWWWWWWWWWWWMWWWWMWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWMWWWMWWWWMWWWWMWWWWWWWWWMWWWMWWWWMWWNNWMXocokO00KKOkXMWK0NWWWWWMWWWMWWWWWMWWWMWWWWMWWWWMWWWWMWWWW
// MWWWWMWWWWMWWWWWWWWWWWWWMWWWWMWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWMWWWWMWWWWMWWWWMWWWWMWWWWWWWWMWWWWMWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// MWWWWMWWWWMWWWMWWWWWWWWWMWWWWMWWWWMWWWWNNWMXocokO00KKOkXMWK0XNWMWWWWMWWWWMWWWWMWWWWMWWWWWWWWWWWWWMWW
// WWWWWWWMWWWWMWWWWMWWWMWWWWWWWWWMWWWWMWWNNWMXocokO00KKOkXMWK0NWWWWWMWWWMWWWWWWWWWMWWWWMWWWWMWWWWMWWWW
// MWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWMWWWWWWWWWWWWWWWWWWWWWWWWWWWWMWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocokO00KKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocdkO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWMWWWWMWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMXocdkO0KKKOkXMWK0NWWWWWWWWWWWWWWWWWWWMWWWWMWWWWMWWWWWWWWW
// MWWWWMWWWWMWWWWWWWWMWWWWMWWWWMWWWWWWWWWNNWMXocokO0KKKOkXMWK0XWWWWWWWMWWWWMWWWWMWWWWWWWWWWWWWMWWWWMWW
// WWWWWWWWWWWWMWWWWMWWWWWWWWWWWWWWWWWWMWWNNWMNkodkO0KKK00NMWK0NWWWWWMWWWWWWWWWWWWWWWWWWMWWWWMWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNWMWNNNNNWWWWWWNKKXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNXXXNNNNNNNNXXKKKXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNXXXXXXXXXXXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
// MWWWWMWWWWMWWWMMWWWMMWWWMWWWWMWWWMMWWWMMWWWMWNNWMWWNNWMWWWMMWNWMMWWWMWWWWMWWWWMWWWMMWWWMMWNWMMWWWMMW
pragma solidity ^0.8.15;


import "solmate/auth/Owned.sol";

interface I {
   function supportsInterface(bytes4 interfaceId) external view returns (bool);
   function ownerOf(uint256 tokenId) external view returns (address owner);
   function balanceOf(address account) external view returns (uint256);
}

contract GANLocator is Owned {
   
   address immutable PokeGAN;
   address immutable GANLP1;
   address immutable GANLP2;

   constructor(
      address _PokeGAN,
      address _GANLP1,
      address _GANLP2
   ) Owned  (
      0x0000000074A05426513aCF7819651069665857af
   )  {
      PokeGAN = _PokeGAN;
      GANLP1 = _GANLP1;
      GANLP2 = _GANLP2;
   }
   
   modifier active {
      require(GANLocationSettingActive);
      _;
   }

   bool public GANLocationSettingActive;
   mapping (uint => string) public GANLocationWithGAN;
   mapping (address => string) public GANLocationWithLP;
    
   function setLocationWithGAN(uint _id, string memory _location) active public {
      require(I(PokeGAN).ownerOf(_id) == msg.sender, "You are not the owner of this token.");
      GANLocationWithGAN[_id] = _location;
   }

   function setLocationWithLP(string memory _location) active public {
      address user = msg.sender;
      require(I(GANLP1).balanceOf(user) > 0 || I(GANLP2).balanceOf(user) > 0, "You do not have any GAN LP tokens.");
      GANLocationWithLP[user] = _location;
   }

   function flipLocationSettingState() public onlyOwner {
      GANLocationSettingActive = !GANLocationSettingActive;
   }

   function executiveGANLocationWithGANSetting(uint _id, string memory _location) public onlyOwner {
      GANLocationWithGAN[_id] = _location;
   }

   function executiveGANLocationWithLPSetting(address _address, string memory _location) public onlyOwner {
      GANLocationWithLP[_address] = _location;
   }

}

// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Simple single owner authorization mixin.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)
abstract contract Owned {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event OwnerUpdated(address indexed user, address indexed newOwner);

    /*//////////////////////////////////////////////////////////////
                            OWNERSHIP STORAGE
    //////////////////////////////////////////////////////////////*/

    address public owner;

    modifier onlyOwner() virtual {
        require(msg.sender == owner, "UNAUTHORIZED");

        _;
    }

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(address _owner) {
        owner = _owner;

        emit OwnerUpdated(address(0), _owner);
    }

    /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

    function setOwner(address newOwner) public virtual onlyOwner {
        owner = newOwner;

        emit OwnerUpdated(msg.sender, newOwner);
    }
}