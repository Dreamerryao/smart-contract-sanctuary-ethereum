// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

/// @title Base64
/// @notice Provides a function for encoding some bytes in base64
/// @author Brecht Devos <[emailÂ protected]>
library Base64 {
  bytes internal constant TABLE =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  /// @notice Encodes some bytes to the base64 representation
  function encode(bytes memory data) internal pure returns (string memory) {
    uint256 len = data.length;
    if (len == 0) return "";

    // multiply by 4/3 rounded up
    uint256 encodedLen = 4 * ((len + 2) / 3);

    // Add some extra buffer at the end
    bytes memory result = new bytes(encodedLen + 32);

    bytes memory table = TABLE;

    assembly {
      let tablePtr := add(table, 1)
      let resultPtr := add(result, 32)

      for {
        let i := 0
      } lt(i, len) {

      } {
        i := add(i, 3)
        let input := and(mload(add(data, i)), 0xffffff)

        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
        out := shl(8, out)
        out := add(
          out,
          and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)
        )
        out := shl(8, out)
        out := add(
          out,
          and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)
        )
        out := shl(8, out)
        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
        out := shl(224, out)

        mstore(resultPtr, out)

        resultPtr := add(resultPtr, 4)
      }

      switch mod(len, 3)
      case 1 {
        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
      }
      case 2 {
        mstore(sub(resultPtr, 1), shl(248, 0x3d))
      }

      mstore(result, encodedLen)
    }

    return string(result);
  }
}

// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

library Helpers {
  // converts a uint to a string
  function toString(uint256 value) internal pure returns (string memory) {
    // Inspired by OraclizeAPI's implementation - MIT license
    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

    if (value == 0) {
      return "0";
    }
    uint256 temp = value;
    uint256 digits;
    while (temp != 0) {
      digits++;
      temp /= 10;
    }
    bytes memory buffer = new bytes(digits);
    while (value != 0) {
      digits -= 1;
      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
      value /= 10;
    }
    return string(buffer);
  }

  // hashes a given string to a random uint
  function random(string memory input) internal pure returns (uint256) {
    return uint256(keccak256(abi.encodePacked(input)));
  }
}

// SPDX-License-Identifier: MIT

import { Types } from "./types.sol";

// IRecPassRenderer defines the interface of a contract which is able to render a RecPass
// given associated data.
interface IRecPassRenderer {
    function render(Types.RecPassData memory data) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import { Helpers } from "../helpers.sol";
import { Base64 } from "../base64.sol";
import { Types } from "../types.sol";
import {IRecPassRenderer} from "../interfaces.sol";

contract BasicRenderer is IRecPassRenderer {

    function render(Types.RecPassData memory data) external view returns (string memory) {
        // A basic rec pass which is rendered the same for all users.
        return
        string(
            abi.encodePacked(
            // header
                '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 308 141" fill="white"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style>;',
            // letters
                buildLetter(data.tokenID, 0),
                buildLetter(data.tokenID, 1),
                buildLetter(data.tokenID, 2),
            // footer
                "</svg>"
            )
        );
    }

    function buildLetter(uint256 tokenId, uint256 index)
    internal
    view
    returns (string memory)
    {
        uint256 rand = Helpers.random(
            string(abi.encodePacked(Helpers.toString(tokenId)))
        );

        return
        string(
            abi.encodePacked(
                '<path d="',
                logoParts[index],
                '" ',
                'fill="',
                foregroundColor[rand % foregroundColor.length],
                '"',
                "/>"
            )
        );
    }

    // == DESIGN ASSETS ==

    string[] private foregroundColor = ["#000000", "#3300FF"];

    string[] private logoParts = [
    "M85.16 1.92156e-05C79.4207 -0.00366423 73.8812 2.10749 69.6 5.93004V5.93004C68.99 6.47004 68.4201 7.04002 67.8701 7.63002C66.3701 8.94002 64.08 10.52 61.76 10.52C59.44 10.52 57.14 8.93004 55.64 7.62004C55.1 7.03004 54.52 6.47002 53.93 5.94002C49.6488 2.10991 44.1045 -0.0052572 38.36 1.92156e-05C32.7523 0.00208161 27.3312 2.01539 23.0815 5.67424C18.8318 9.3331 16.0353 14.3948 15.2 19.94L7.75003 66.53C7.75003 66.61 7.75003 66.69 7.75003 66.78L0.300045 113.37C0.0984671 114.6 -0.00188781 115.844 2.68863e-05 117.09C2.68863e-05 123.299 2.46646 129.253 6.85669 133.643C11.2469 138.034 17.2013 140.5 23.41 140.5C29.0169 140.5 34.4379 138.489 38.6878 134.832C42.9377 131.175 45.7345 126.114 46.57 120.57L54.03 73.98C54.0244 73.8968 54.0244 73.8133 54.03 73.73L61.48 27.14C61.6767 25.9097 61.777 24.6659 61.78 23.42C61.78 29.6297 64.2461 35.5851 68.6361 39.9769C73.026 44.3688 78.9804 46.8374 85.19 46.84C91.4014 46.84 97.3584 44.3726 101.75 39.9805C106.143 35.5884 108.61 29.6314 108.61 23.42V23.42C108.61 20.3419 108.003 17.294 106.824 14.4506C105.646 11.6072 103.918 9.02413 101.74 6.84899C99.562 4.67385 96.9766 2.94936 94.1317 1.77416C91.2868 0.598959 88.2381 -0.00392368 85.16 1.92156e-05V1.92156e-05Z",
    "M252.57 73.73L260.02 27.2C260.222 25.967 260.322 24.7195 260.32 23.47C260.32 29.6814 262.788 35.6384 267.18 40.0305C271.572 44.4226 277.529 46.89 283.74 46.89C289.95 46.8874 295.904 44.4188 300.294 40.0269C304.684 35.6351 307.15 29.6797 307.15 23.47C307.157 20.3911 306.556 17.3411 305.383 14.4945C304.209 11.648 302.486 9.06071 300.312 6.88079C298.137 4.70088 295.555 2.97111 292.711 1.79043C289.867 0.609753 286.819 0.00133384 283.74 2.62035e-05C277.998 -0.00423883 272.455 2.10683 268.17 5.93005V5.93005C267.565 6.46012 266.991 7.02438 266.45 7.62005C264.95 8.93005 262.65 10.51 260.33 10.51C258.01 10.51 255.72 8.93005 254.22 7.62005C253.67 7.03005 253.1 6.46005 252.5 5.93005C248.214 2.1029 242.666 -0.00857973 236.92 2.62035e-05C231.311 0.000719565 225.889 2.01505 221.641 5.67645C217.392 9.33785 214.599 14.403 213.77 19.95L206.31 66.53C206.31 66.61 206.31 66.69 206.31 66.78L198.86 113.37C198.658 114.6 198.558 115.844 198.56 117.09C198.56 123.29 201.02 129.237 205.399 133.626C209.778 138.015 215.72 140.487 221.92 140.5C227.665 140.505 233.209 138.39 237.49 134.56V134.56C237.508 134.529 237.532 134.502 237.56 134.48C238.09 133.99 238.56 133.48 239.1 132.95C240.6 131.63 242.95 129.95 245.34 129.95C247.73 129.95 249.95 131.53 251.45 132.84C251.993 133.433 252.567 133.997 253.17 134.53V134.53C257.452 138.357 262.997 140.469 268.74 140.46C274.95 140.46 280.905 137.994 285.297 133.604C289.689 129.214 292.157 123.26 292.16 117.05C292.16 110.839 289.693 104.882 285.3 100.49C280.908 96.0975 274.951 93.63 268.74 93.63C264.071 93.6314 259.509 95.0277 255.639 97.6397C251.769 100.252 248.768 103.96 247.02 108.29L252.52 73.94C252.54 73.9 252.56 73.81 252.57 73.73Z",
    "M157.29 46.84C157.782 46.84 158.269 46.743 158.724 46.5544C159.178 46.3658 159.591 46.0894 159.938 45.7411C160.286 45.3927 160.561 44.9792 160.748 44.5243C160.936 44.0694 161.031 43.582 161.03 43.09V31.2C161.379 31.2524 161.714 31.3761 162.014 31.5637C162.313 31.7512 162.57 31.9985 162.77 32.29C164.525 36.5999 167.525 40.2888 171.387 42.8858C175.248 45.4827 179.796 46.8699 184.45 46.87C187.532 46.8753 190.585 46.2725 193.433 45.0961C196.282 43.9197 198.87 42.1929 201.05 40.0146C203.231 37.8363 204.96 35.2493 206.138 32.4017C207.317 29.5541 207.923 26.5019 207.92 23.42C207.917 17.2095 205.449 11.254 201.058 6.86249C196.666 2.47096 190.711 0.00265012 184.5 0C179.847 0.00150467 175.299 1.38918 171.438 3.98596C167.577 6.58275 164.576 10.2709 162.82 14.58C162.62 14.8715 162.363 15.1188 162.064 15.3063C161.764 15.4939 161.429 15.6177 161.08 15.67V3.75C161.081 3.25802 160.986 2.77062 160.798 2.3157C160.611 1.86079 160.336 1.44732 159.988 1.09897C159.641 0.750617 159.228 0.474222 158.774 0.285645C158.319 0.0970669 157.832 -1.75863e-06 157.34 0H117.92C116.925 0 115.972 0.395097 115.268 1.09836C114.565 1.80162 114.17 2.75544 114.17 3.75V43.09C114.17 44.0846 113.775 45.0384 113.072 45.7417C112.368 46.4449 111.415 46.84 110.42 46.84C109.929 46.84 109.443 46.9367 108.989 47.1247C108.535 47.3126 108.123 47.5881 107.775 47.9354C107.428 48.2827 107.153 48.695 106.965 49.1488C106.777 49.6025 106.68 50.0889 106.68 50.58V89.92C106.68 90.9146 106.285 91.8684 105.582 92.5717C104.878 93.2749 103.925 93.67 102.93 93.67C101.935 93.67 100.982 94.0651 100.278 94.7684C99.5751 95.4716 99.18 96.4255 99.18 97.42V136.76C99.18 137.752 99.5741 138.703 100.275 139.405C100.977 140.106 101.928 140.5 102.92 140.5H142.26C142.752 140.501 143.239 140.406 143.694 140.218C144.149 140.031 144.563 139.756 144.911 139.408C145.259 139.061 145.536 138.648 145.724 138.194C145.913 137.739 146.01 137.252 146.01 136.76V124.84C146.359 124.89 146.693 125.013 146.991 125.201C147.289 125.389 147.544 125.637 147.74 125.93C149.497 130.238 152.498 133.925 156.359 136.52C160.22 139.115 164.768 140.501 169.42 140.5C172.502 140.512 175.556 139.915 178.406 138.744C181.257 137.573 183.848 135.85 186.032 133.675C188.215 131.5 189.947 128.916 191.129 126.069C192.312 123.223 192.92 120.172 192.92 117.09C192.921 114.014 192.316 110.968 191.14 108.126C189.963 105.284 188.238 102.702 186.063 100.527C183.888 98.3516 181.306 96.6266 178.464 95.4501C175.622 94.2736 172.576 93.6687 169.5 93.67C164.847 93.6715 160.299 95.0592 156.438 97.6559C152.577 100.253 149.576 103.941 147.82 108.25C147.622 108.54 147.367 108.786 147.069 108.972C146.771 109.158 146.438 109.28 146.09 109.33V97.42C146.09 96.4272 146.484 95.4749 147.185 94.7719C147.886 94.0689 148.837 93.6727 149.83 93.67C150.825 93.67 151.778 93.2749 152.482 92.5717C153.185 91.8684 153.58 90.9146 153.58 89.92V78.01C153.928 78.0601 154.261 78.182 154.559 78.368C154.857 78.5539 155.112 78.7998 155.31 79.09C157.062 83.3881 160.051 87.0687 163.899 89.6646C167.747 92.2605 172.279 93.6546 176.92 93.67C179.995 93.67 183.04 93.0642 185.881 91.8871C188.722 90.71 191.303 88.9847 193.477 86.8098C195.651 84.635 197.375 82.0531 198.551 79.2117C199.727 76.3703 200.331 73.3251 200.33 70.25C200.33 64.0413 197.864 58.0869 193.473 53.6967C189.083 49.3064 183.129 46.84 176.92 46.84C172.266 46.8374 167.717 48.2221 163.853 50.8173C159.99 53.4125 156.988 57.1004 155.23 61.41C155.034 61.7029 154.779 61.9514 154.481 62.1392C154.183 62.327 153.849 62.4499 153.5 62.5V50.58C153.5 50.0846 153.598 49.5942 153.789 49.1371C153.981 48.6801 154.26 48.2656 154.613 47.9176C154.966 47.5696 155.384 47.2952 155.843 47.1102C156.303 46.9252 156.795 46.8334 157.29 46.84V46.84Z"
    ];
}

// SPDX-License-Identifier: MIT

library Types {
  struct RecPassData {
    uint256 tokenID;
    Role role;
  }

  enum Role {
    MEMBER,
    CURATOR,
    DIRECTOR,
    UNKNOWN
  }
}