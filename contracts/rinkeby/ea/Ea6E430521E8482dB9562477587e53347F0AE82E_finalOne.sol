/**
 *Submitted for verification at Etherscan.io on 2022-09-15
*/

// File: contracts/struct.sol

pragma solidity ^0.8.0;


// contract A {
//    function b_1Y() public pure returns (uint) {
//        return 1;
//    }
// }

// contract B {
//    function b_1X() public pure returns (uint) {
//        return 1;
//    }
// }

// contract C {

// }

contract finalOne  {
    uint public x;

    function add() public {
        x = x + 1;
    }
}


// {
// 	"functionDebugData": {},
// 	"generatedSources": [],
// 	"linkReferences": {},
// 	"object": "608060405234801561001057600080fd5b5060b48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060265760003560e01c80618e0c14602b575b600080fd5b60316045565b604051603c9190605b565b60405180910390f35b60006001905090565b6055816074565b82525050565b6000602082019050606e6000830184604e565b92915050565b600081905091905056fea26469706673582212205645670f38e511da36194e414e01488feec5ebdcd114738d320e6bd348a0ad4364736f6c63430008070033",
// 	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB4 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x26 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH2 0x8E0C EQ PUSH1 0x2B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x31 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3C SWAP2 SWAP1 PUSH1 0x5B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x55 DUP2 PUSH1 0x74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP GASLIMIT PUSH8 0xF38E511DA36194E COINBASE 0x4E ADD BASEFEE DUP16 0xEE 0xC5 0xEB 0xDC 0xD1 EQ PUSH20 0x8D320E6BD348A0AD4364736F6C63430008070033 ",
// 	"sourceMap": "26:84:0:-:0;;;;;;;;;;;;;;;;;;;"
// }

// PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB4 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x26 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH2 0x8E0C     EQ PUSH1 0x2B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x31 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3C SWAP2 SWAP1 PUSH1 0x5B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x55 DUP2 PUSH1 0x74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x6E PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xAD 0xFB 0xB3 PUSH7 0x4B4B340846FD67 0xE6 LT 0xA5 0xC4 0xAD 0xFC PUSH19 0x41A8F8221F38A50AFDE87B29E64736F6C6343 STOP ADDMOD SMOD STOP CALLER 
// PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB6 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x396F77D7 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x57 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x70 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xC2 DUP10 PUSH5 0x4966FA454D 0xAF RETURN ADDRESS 0xA9 0x27 0xCF 0xC2 0xC 0x2F PUSH6 0x36EE589EDC35 0xD CODECOPY DUP14 0xFB 0xAC 0x23 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER 

// 0x608060405234801561001057600080fd5b506040516101643803806101648339818101604052810190610032919061004d565b506100a0565b60008151905061004781610089565b92915050565b60006020828403121561006357610062610084565b5b600061007184828501610038565b91505092915050565b6000819050919050565b600080fd5b6100928161007a565b811461009d57600080fd5b50565b60b6806100ae6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063396f77d714602d575b600080fd5b60336047565b604051603e9190605d565b60405180910390f35b60006001905090565b6057816076565b82525050565b6000602082019050607060008301846050565b92915050565b600081905091905056fea26469706673582212208e3857b0a2fb7089cd445159a517cb6adbc0b1324ecc9f1acaa6be4aff53c32f64736f6c63430008070033000000000000000000000000000000000000000000000000000000000000bd61
// contract kkk {
    
    // 92295 - A
    // 92727 - B
    
    // function g() public pure returns (uint) {
    //     uint k = 10 + 20;
    //     return k;
    // }

    // PUSH1 0x80 
    // PUSH1 0x40 
    // MSTORE 
    // CALLVALUE 
    // DUP1 
    // ISZERO 
    // PUSH2 0x10 
    // JUMPI 
    // PUSH1 0x0 
    // DUP1 
    // REVERT 
    // JUMPDEST 
    // POP 
    // PUSH1 0xB4 
    // DUP1 
    // PUSH2 0x1F 
    // PUSH1 0x0 
    // CODECOPY 
    // PUSH1 0x0 
    // RETURN 
    // INVALID 
    // PUSH1 0x80 
    // PUSH1 0x40 
    // MSTORE 
    // CALLVALUE 
    // DUP1 
    // ISZERO 
    // PUSH1 0xF 
    // JUMPI 
    // PUSH1 0x0 
    // DUP1 
    // REVERT 
    // JUMPDEST 
    // POP 
    // PUSH1 0x4 
    // CALLDATASIZE 
    // LT 
    // PUSH1 0x26 
    // JUMPI 
    // PUSH1 0x0 
    // CALLDATALOAD 
    // PUSH1 0xE0 
    // SHR 
    // DUP1 
    // PUSH2 0x8E0C 
    // EQ 
    // PUSH1 0x2B 
    // JUMPI 
    // JUMPDEST 
    // PUSH1 0x0 
    // DUP1 
    // REVERT 
    // JUMPDEST 
    // PUSH1 0x31 
    // PUSH1 0x45 
    // JUMP 
    // JUMPDEST 
    // PUSH1 0x40 
    // MLOAD 
    // PUSH1 0x3C 
    // SWAP2 
    // SWAP1 
    // PUSH1 0x5B 
    // JUMP 
    // JUMPDEST 
    // PUSH1 0x40
    // MLOAD 
    // DUP1 
    // SWAP2 
    // SUB 
    // SWAP1 
    // RETURN 
    // JUMPDEST 
    // PUSH1 0x0 
    // PUSH1 0x1 
    // SWAP1 
    // POP 
    // SWAP1 
    // JUMP 
    // JUMPDEST 
    // PUSH1 0x55 
    // DUP2 
    // PUSH1 0x74 
    // JUMP 
    // JUMPDEST 
    // DUP3 
    // MSTORE 
    // POP 
    // POP 
    // JUMP 
    // JUMPDEST 
    // PUSH1 0x0 
    // PUSH1 0x20 
    // DUP3 
    // ADD 
    // SWAP1 
    // POP 
    // PUSH1 
    // 0x6E 
    // PUSH1 0x0 
    // DUP4 
    // ADD 
    // DUP5 
    // PUSH1 0x4E 
    // JUMP 
    // JUMPDEST
    // SWAP3 
    // SWAP2 
    // POP
    // POP 
    // JUMP 
    // JUMPDEST 
    // PUSH1 0x0
    // DUP2 
    // SWAP1 
    // POP 
    // SWAP2 
    // SWAP1 
    // POP 
    // JUMP 
    // INVALID 
    // LOG2 
    // PUSH5 0x6970667358 0x22 
    // SLT 
    // KECCAK256 
    // GT 
    // 0xAD 
    // 0xFB 
    // 0xB3 
    // PUSH7 0x4B4B340846FD67 0xE6 
    // LT 
    // 0xA5 
    // 0xC4 
    // 0xAD 
    // 0xFC 
    // PUSH19 0x41A8F8221F38A50AFDE87B29E64736F6C6343 
    // STOP 
    // ADDMOD 
    // SMOD 
    // STOP 
    // CALLER 

    // function d() public pure returns (uint) {
    //     uint k = 10 + 20;
    //     return k;
    // }

// }

    // function tttt() public view returns (uint) {
    //     uint a1 = gasleft();
    //     bytes memory ddd;
    //     for(uint i = 0; i < 7; i++) {
    //         ddd = abi.encodePacked(ddd, uint256(0), address(1), address(2), address(3), bytes32(0));
    //     }
    //     keccak256(ddd);
    //     uint a2 = gasleft();
    //     return a1-a2;
    // }



// encode
// 12713 (for 5 permssion)
// 21629 (for 7 permi))
// 39238 (for 10 permission)
// 79524 (for 15 permission)


// packed

// 12189 (for 5)
// 19226 (for 7)
// 31995 (for 10)
// 59649 (for 15)

// import "good.sol";

// contract MyContract {
//     using Blax for Blax.Test;

//     function nice(Blax.Test memory test) public {
//         test.addIt(5);

//         test.k = Deployment(5); // error
//         test.k = Blax.Deployment(5); // error                 
//     }
// }