/**
 *Submitted for verification at Etherscan.io on 2021-12-29
*/

// SPDX-License-Identifier: MIT

pragma solidity 0.8.11;



// Part: smartcontractkit/[email protected]/AggregatorV3Interface

interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}

// Part: smartcontractkit/[email protected]/LinkTokenInterface

interface LinkTokenInterface {

  function allowance(
    address owner,
    address spender
  )
    external
    view
    returns (
      uint256 remaining
    );

  function approve(
    address spender,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function balanceOf(
    address owner
  )
    external
    view
    returns (
      uint256 balance
    );

  function decimals()
    external
    view
    returns (
      uint8 decimalPlaces
    );

  function decreaseApproval(
    address spender,
    uint256 addedValue
  )
    external
    returns (
      bool success
    );

  function increaseApproval(
    address spender,
    uint256 subtractedValue
  ) external;

  function name()
    external
    view
    returns (
      string memory tokenName
    );

  function symbol()
    external
    view
    returns (
      string memory tokenSymbol
    );

  function totalSupply()
    external
    view
    returns (
      uint256 totalTokensIssued
    );

  function transfer(
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  )
    external
    returns (
      bool success
    );

  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

}

// Part: smartcontractkit/[email protected]/VRFRequestIDBase

contract VRFRequestIDBase {

  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  )
    internal
    pure
    returns (
      uint256
    )
  {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(
    bytes32 _keyHash,
    uint256 _vRFInputSeed
  )
    internal
    pure
    returns (
      bytes32
    )
  {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// Part: smartcontractkit/[email protected]/VRFConsumerBase

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    internal
    virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 constant private USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(
    bytes32 _keyHash,
    uint256 _fee
  )
    internal
    returns (
      bytes32 requestId
    )
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(
    address _vrfCoordinator,
    address _link
  ) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    external
  {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: Lotto.sol

//import "./LotteryTicket.sol";

contract Lotto is VRFConsumerBase {
    bool public lottoStatus;
    mapping(address => uint256) public ticketHolders;
    mapping(uint256 => address) public winnersAboveTwoFifty;
    uint256 public watfPayout;
    uint256 public entryFeeUSD;
    mapping(uint256 => address) public winnersBelowTwoFifty;
    uint256 public wbtfPayout;
    address public winner;
    uint256 public winnerPayout;
    address public DubFamNFTs;
    uint256 public dfPayout;
    address public donation;
    uint256 public donationPayout;
    uint256 public pot;
    uint256 public maxTickets;
    uint256 public currentHolders; //0 based

    AggregatorV3Interface internal priceFeed;
    bytes32 private keyhash;
    uint256 private fee;

    constructor(
        address _priceFeed,
        address _vrfCoordinator,
        address _link,
        uint256 _fee,
        bytes32 _keyhash
    ) public VRFConsumerBase(_vrfCoordinator, _link) {
        priceFeed = AggregatorV3Interface(_priceFeed);
        entryFeeUSD = 151 * 10**18;
        fee = _fee;
        keyhash = _keyhash;
        lottoStatus = false;
        DubFamNFTs = msg.sender;
        maxTickets = 7777;
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomness)
        internal
        override
    {
        uint256 randomResult = randomness;
    }

    modifier onlyDubFamNFTs() {
        require(msg.sender == DubFamNFTs);
        _;
    }

    function StartLotto() public onlyDubFamNFTs {
        require(lottoStatus = false, "Lottery already started");
        if (!lottoStatus) lottoStatus = true;
    }

    function buyLottoTicket() public payable {
        require(msg.value >= getEntryFee(), "You need to spend more ETH!");
        pot += msg.value;

        //0 based
        ticketHolders[msg.sender] = currentHolders;
        currentHolders += 1;

        //We need to call lottery ticket here
    }

    function getEntryFee() public view returns (uint256) {
        uint256 currentPrice = getPrice();
        return (entryFeeUSD * 10**18) / currentPrice;
    }

    function getPrice() public view returns (uint256) {
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        return uint256(answer * 10**10);
    }

    function getConversionRate(uint256 ethAmount)
        public
        view
        returns (uint256)
    {
        return (getPrice() * ethAmount) / 1000000000000000000;
    }

    //call lottery ticket function
    function hasLotteryTicketBeenPlayed() public returns (bool) {
        require(lottoStatus = true, "Lottery is already closed");
        return false;
    }

    function endLotto() public onlyDubFamNFTs {
        require(lottoStatus = true, "Lottery is already closed");
        lottoStatus = false;
        calculateWinners();
        distributeLottoWinnings();
    }

    function calculateWinners() private {
        // do not allow address to win twice
        // skip address if selected already
        // Calculate Donated Address ()
        // Calculate 0 - 250 (30 Addresses)
        //winnersBelowTwoFifty[new address] = true;
        // if current holders == maxTickets
        // Calculate 251+   (300 Addresses)
        // winnersAboveTwoFifty[new address] = true;
        // else current holders < maxTickets
        // Winner 40%       (1 Address)
        // 251+   10%       (50 Addresses)
        //winnersAboveTwoFifty[new address] = true;
    }

    function distributeLottoWinnings() public payable {
        // Donated 25%
        donationPayout = (getPotValue() * 25) / 100;

        // 0 - 250 15%
        wbtfPayout = (getPotValue() * 15) / 100;

        // DubFam 10%
        dfPayout = (getPotValue() * 10) / 100;

        if (currentHolders == maxTickets) {
            // 251+   50%
            watfPayout = (getPotValue() * 50) / 100;
        } else {
            // Number Guessed Correctly Lotto Ended!!  currentHolders < maxTickets
            // Winner 40%
            winnerPayout = (getPotValue() * 40) / 100;
            // 251+   10%
            watfPayout = (getPotValue() * 10) / 100;
        }

        // This will pay DubFamNFTs 5%.
        // =============================================================================
        dfPayout = (address(this).balance * 10) / 100;
        (bool df, ) = payable(DubFamNFTs).call{value: dfPayout}("");
        require(df);
        // =============================================================================

        // This will pay Donated 25%.
        // =============================================================================
        donationPayout = (address(this).balance * 25) / 100;
        (bool donate, ) = payable(donation).call{value: donationPayout}("");
        require(donate);
        // =============================================================================

        // NEEDS ASSISTANCE

        // This will pay 30 winners below 250 15%.
        // =============================================================================
        wbtfPayout = (address(this).balance * 15) / 30 / 100;
        for (uint256 i = 0; i < 30; i++) {
            (bool btf, ) = payable(winnersBelowTwoFifty[i]).call{
                value: wbtfPayout
            }("");
            require(btf);
        }
        // =============================================================================

        // NEEDS ASSISTANCE

        //auction
        if (currentHolders == maxTickets) {
            // This will pay 300 winners above 250 50%.
            // =============================================================================
            wbtfPayout = (address(this).balance * 50) / 300 / 100;
            for (uint256 i = 0; i < 300; i++) {
                (bool atf, ) = payable(winnersAboveTwoFifty[i]).call{
                    value: wbtfPayout
                }("");
                require(atf);
            }

            // NEEDS ASSISTANCE

            // =============================================================================
        } else {
            // This will pay 50 winners above 250 10%.
            // =============================================================================
            wbtfPayout = (address(this).balance * 10) / 50 / 100;
            for (uint256 i = 0; i < 50; i++) {
                (bool atf, ) = payable(winnersAboveTwoFifty[i]).call{
                    value: wbtfPayout
                }("");
                require(atf);
            }
            // =============================================================================

            // This will payout the owner 95% of the contract balance.
            // Do not remove this otherwise you will not be able to withdraw the funds.
            // =============================================================================
            winnerPayout = address(this).balance;
            (bool os, ) = payable(winner).call{value: winnerPayout}("");
            require(os);
            // =============================================================================
        }
    }

    function getPotValue() public view returns (uint256) {
        return (getPrice() * pot) / 1000000000000000000;
    }

    function getWinnersBelowTwoFiftyPayoutValue()
        public
        view
        returns (uint256)
    {
        return (getPrice() * wbtfPayout) / 1000000000000000000;
    }

    function getWinnersAboveTwoFiftyPayoutValue()
        public
        view
        returns (uint256)
    {
        return (getPrice() * watfPayout) / 1000000000000000000;
    }

    function getDubFamNFTsPayout() public view returns (uint256) {
        return (getPrice() * dfPayout) / 1000000000000000000;
    }

    function getWinnerPayoutValue() public view returns (uint256) {
        return (getPrice() * winnerPayout) / 1000000000000000000;
    }

    function geDonationPayoutValue() public view returns (uint256) {
        return (getPrice() * donationPayout) / 1000000000000000000;
    }

    function getMaxTickets() public view returns (uint256) {
        return maxTickets;
    }

    function getCurrentHolders() public view returns (uint256) {
        return currentHolders;
    }

    function getTicketsLeft() public view returns (uint256) {
        return maxTickets - currentHolders;
    }

    function getOrganizer() public view returns (address) {
        return DubFamNFTs;
    }

    function getWinningCharityAddress() public view returns (address) {
        return donation;
    }

    //return account addresses
    function getCharityAddresses() public view returns (uint256) {
        return 1;
    }

    function getTicketHolder(address _address) public view returns (uint256) {
        return ticketHolders[_address];
    }

    function getLottoStatus() public view returns (bool) {
        return lottoStatus;
    }

    function getWinner() public view returns (address) {
        return winner;
    }

    function isWinnerAboveTwoFifty(address _owner) public view returns (bool) {
        uint256 location = ticketHolders[_owner];
        return winnersAboveTwoFifty[location] == _owner;
    }

    function isHolderAboveTwoFifty(address _owner) public view returns (bool) {
        return ticketHolders[_owner] > 249;
    }

    function isWinnerBelowTwoFifty(address _owner) public view returns (bool) {
        uint256 location = ticketHolders[_owner];
        return winnersBelowTwoFifty[location] == _owner;
    }

    function isHolderBelowTwoFifty(address _owner) public view returns (bool) {
        return ticketHolders[_owner] < 250;
    }
}