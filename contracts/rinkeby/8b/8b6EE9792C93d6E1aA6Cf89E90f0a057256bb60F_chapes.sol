import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

library Base64 {
    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    bytes  internal constant TABLE_DECODE = hex"0000000000000000000000000000000000000000000000000000000000000000"
                                            hex"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000"
                                            hex"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000"
                                            hex"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000";

    function encode(bytes memory data) internal pure returns (string memory) {
        if (data.length == 0) return '';

        // load the table into memory
        string memory table = TABLE_ENCODE;

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((data.length + 2) / 3);

        // add some extra buffer at the end required for the writing
        string memory result = new string(encodedLen + 32);

        assembly {
            // set the actual output length
            mstore(result, encodedLen)

            // prepare the lookup table
            let tablePtr := add(table, 1)

            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))

            // result ptr, jump over length
            let resultPtr := add(result, 32)

            // run over the input, 3 bytes at a time
            for {} lt(dataPtr, endPtr) {}
            {
                // read 3 bytes
                dataPtr := add(dataPtr, 3)
                let input := mload(dataPtr)

                // write 4 characters
                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))
                resultPtr := add(resultPtr, 1)
            }

            // padding with '='
            switch mod(mload(data), 3)
            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
        }

        return result;
    }

    function decode(string memory _data) internal pure returns (bytes memory) {
        bytes memory data = bytes(_data);

        if (data.length == 0) return new bytes(0);
        require(data.length % 4 == 0, "invalid base64 decoder input");

        // load the table into memory
        bytes memory table = TABLE_DECODE;

        // every 4 characters represent 3 bytes
        uint256 decodedLen = (data.length / 4) * 3;

        // add some extra buffer at the end required for the writing
        bytes memory result = new bytes(decodedLen + 32);

        assembly {
            // padding with '='
            let lastBytes := mload(add(data, mload(data)))
            if eq(and(lastBytes, 0xFF), 0x3d) {
                decodedLen := sub(decodedLen, 1)
                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {
                    decodedLen := sub(decodedLen, 1)
                }
            }

            // set the actual output length
            mstore(result, decodedLen)

            // prepare the lookup table
            let tablePtr := add(table, 1)

            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))

            // result ptr, jump over length
            let resultPtr := add(result, 32)

            // run over the input, 4 characters at a time
            for {} lt(dataPtr, endPtr) {}
            {
               // read 4 characters
               dataPtr := add(dataPtr, 4)
               let input := mload(dataPtr)

               // write 3 bytes
               let output := add(
                   add(
                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),
                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),
                   add(
                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),
                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)
                    )
                )
                mstore(resultPtr, shl(232, output))
                resultPtr := add(resultPtr, 3)
            }
        }

        return result;
    }
}

contract Base {
    string[11] names = ['albino','ape','blue-cat','chimp','creep','sleepy','rock','pox','pasty','golden','normal']; 
    function baser(uint t) public view returns (string memory) {

        string[11] memory bases = ['<path stroke="#000000" d="M13 5h5M21 7h1M10 8h1M9 9h1M22 9h1M22 10h1M9 12h1M8 15h1M8 17h1M9 19h1M22 19h1M22 20h1M21 21h1M8 22h1M14 23h2M17 23h1M7 24h1M24 24h1M7 25h1M24 25h1M7 27h1" /> <path stroke="#000100" d="M18 5h1M9 10h1M9 11h1M23 18h1M10 21h1M23 21h1M18 22h1M20 22h1M23 22h1M16 23h1M24 23h1M6 28h1" /> <path stroke="#060506" d="M11 6h1" /> <path stroke="#010000" d="M12 6h1M22 11h1M9 13h1M8 18h1M9 20h1M11 22h1M13 22h1M10 25h1M21 25h1M10 26h1M21 26h1M24 26h1M10 27h1M21 27h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1" /> <path stroke="#ffffff" d="M13 6h6M11 7h10M11 8h2M14 8h5M20 8h1M10 9h6M17 9h5M10 10h12M10 11h2M13 11h7M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h4M23 23h1M8 24h1M10 24h14M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h1M9 28h1M11 28h3M18 28h3M22 28h1M24 28h1M7 29h2M10 29h3M20 29h2M23 29h2" /> <path stroke="#000001" d="M19 6h1M10 7h1M22 12h1M22 14h1M23 15h1M23 17h1M7 23h1M24 27h1" /> <path stroke="#060505" d="M20 6h1" /> <path stroke="#f1eded" d="M13 8h1M19 8h1M16 9h1M12 11h1M20 11h1M22 23h1M9 24h1M8 28h1M23 28h1M19 29h1" /> <path stroke="#010101" d="M21 8h1M12 22h1" /> <path stroke="#f1bcff" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#010100" d="M22 13h1M23 16h1" /> <path stroke="#070505" d="M9 14h1" /> <path stroke="#010001" d="M8 16h1M19 22h1M25 29h1" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" /> <path stroke="#000101" d="M8 21h1M7 26h1" />','<path stroke="#36103b" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#832b8f" d="M13 6h6M11 7h3M15 7h6M11 8h10M10 9h8M19 9h3M10 10h4M15 10h7M10 11h1M12 11h8M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h1M10 23h4M18 23h6M8 24h2M11 24h9M21 24h3M8 25h2M11 25h2M15 25h2M20 25h1M23 25h1M9 26h1M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M20 28h1M22 28h3M7 29h2M10 29h1M19 29h3M24 29h1" /> <path stroke="#7a3084" d="M14 7h1M18 9h1M14 10h1M11 11h1M20 11h1M9 23h1M10 24h1M20 24h1M19 25h1M22 25h1M8 26h1M18 28h2M11 29h2M23 29h1" /> <path stroke="#cd72da" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#82effc" d="M13 6h6M11 7h7M19 7h2M12 8h9M10 9h6M17 9h5M10 10h2M13 10h7M21 10h1M10 11h7M18 11h4M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h2M12 18h1M19 18h2M22 18h1M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h2M11 23h1M13 23h1M18 23h3M22 23h2M8 24h11M20 24h4M8 25h1M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h1M13 27h1M18 27h3M22 27h1M7 28h3M11 28h3M18 28h1M20 28h1M22 28h3M7 29h2M10 29h1M12 29h1M19 29h3M23 29h2" /> <path stroke="#a0f3fc" d="M18 7h1M16 9h1M12 10h1M20 10h1M17 11h1M12 23h1M19 24h1M23 27h1M11 29h1" /> <path stroke="#aff5fc" d="M11 8h1M11 18h1M21 18h1M10 23h1M21 23h1M19 28h1" /> <path stroke="#52868c" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" /> <path stroke="#bef7fd" d="M9 25h1M12 27h1" />','<path stroke="#161616" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#1e6f7e" d="M13 6h6M11 7h6M18 7h3M11 8h10M10 9h4M15 9h7M10 10h9M20 10h2M10 11h2M13 11h9M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h1M11 17h3M18 17h5M9 18h4M19 18h1M21 18h2M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h1M10 23h4M18 23h3M22 23h2M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M23 25h1M8 26h1M11 26h1M19 26h1M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h2M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#2c9290" d="M17 7h1M14 9h1M19 10h1M12 11h1M10 17h1M20 18h1M9 23h1M21 23h1M22 25h1M9 26h1M12 26h1M20 26h1M24 28h1" /> <path stroke="#299db3" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0c0c" d="M14 17h1M17 17h1" />','<path stroke="#2e774f" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M11 13h4M17 13h4M22 13h1M9 14h1M11 14h10M22 14h1M8 15h1M11 15h10M23 15h1M8 16h1M11 16h10M23 16h1M8 17h1M15 17h2M23 17h1M8 18h1M13 18h6M23 18h1M9 19h1M13 19h6M22 19h1M9 20h1M13 20h6M22 20h1M8 21h1M10 21h1M14 21h4M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M13 25h2M17 25h2M21 25h1M24 25h1M7 26h1M10 26h1M13 26h6M21 26h1M24 26h1M7 27h1M10 27h1M14 27h4M21 27h1M24 27h1M6 28h1M10 28h1M14 28h4M21 28h1M25 28h1M6 29h1M9 29h1M13 29h6M22 29h1M25 29h1" /> <path stroke="#22f380" d="M13 6h6M11 8h10M10 10h12M10 12h12M10 14h1M21 14h1M9 16h2M21 16h2M9 18h4M19 18h4M10 20h3M19 20h3M9 21h1M22 21h1M9 22h2M14 22h4M21 22h2M8 24h16M8 26h2M11 26h2M19 26h2M22 26h2M7 28h3M11 28h3M18 28h3M22 28h3" /> <path stroke="#9fff85" d="M11 7h10M10 9h12M10 11h12M10 13h1M15 13h2M21 13h1M9 15h2M21 15h2M9 17h5M18 17h5M10 19h3M19 19h3M11 21h3M18 21h3M8 23h6M18 23h6M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 27h2M11 27h3M18 27h3M22 27h2M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#58554e" d="M13 6h6M11 7h10M11 8h10M10 9h12M10 10h12M10 11h12M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#ccb08b" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#000000" d="M14 17h1M17 17h1" />','<path stroke="#161616" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#2f3635" d="M13 6h6M11 8h1M14 8h1M17 8h1M20 8h1M10 9h1M12 9h2M15 9h2M18 9h2M21 9h1M10 11h2M14 11h1M17 11h1M20 11h2M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M10 15h1M21 15h1M9 16h1M22 16h1M9 17h2M13 17h1M18 17h1M21 17h2M10 18h2M20 18h2M11 19h2M19 19h2M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h1M17 22h1M21 22h2M8 23h1M10 23h3M19 23h3M23 23h1M8 24h2M13 24h6M22 24h2M9 25h1M11 25h2M15 25h2M19 25h2M22 25h1M8 26h1M23 26h1M9 27h1M11 27h1M20 27h1M22 27h1M8 28h1M11 28h3M18 28h3M23 28h2M7 29h1M12 29h1M19 29h1" /> <path stroke="#2b2c2c" d="M11 7h10M12 8h2M15 8h2M18 8h2M11 9h1M14 9h1M17 9h1M20 9h1M10 10h12M12 11h2M15 11h2M18 11h2M10 12h12M9 15h1M22 15h1M10 16h1M21 16h1M11 17h2M19 17h2M9 18h1M12 18h1M19 18h1M22 18h1M10 19h1M21 19h1M10 20h3M19 20h3M15 22h2M9 23h1M13 23h1M18 23h1M22 23h1M10 24h3M19 24h3M8 25h1M23 25h1M9 26h1M11 26h2M19 26h2M22 26h1M8 27h1M12 27h2M18 27h2M23 27h1M7 28h1M9 28h1M22 28h1M8 29h1M10 29h2M20 29h2M23 29h2" /> <path stroke="#4d5050" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#000000" d="M13 5h5M21 7h1M10 8h1M9 9h1M22 9h1M22 10h1M9 12h1M8 15h1M8 17h1M9 19h1M22 19h1M22 20h1M21 21h1M8 22h1M14 23h2M17 23h1M7 24h1M24 24h1M7 25h1M24 25h1M7 27h1" /> <path stroke="#000100" d="M18 5h1M9 10h1M9 11h1M23 18h1M10 21h1M23 21h1M18 22h1M20 22h1M23 22h1M16 23h1M24 23h1M6 28h1" /> <path stroke="#060506" d="M11 6h1" /> <path stroke="#010000" d="M12 6h1M22 11h1M9 13h1M8 18h1M9 20h1M11 22h1M13 22h1M10 25h1M21 25h1M10 26h1M21 26h1M24 26h1M10 27h1M21 27h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1" /> <path stroke="#ffefa7" d="M13 6h6M11 7h10M11 8h2M14 8h3M18 8h3M10 9h12M10 10h9M20 10h2M11 11h4M16 11h6M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h4M9 18h1M11 18h2M19 18h1M21 18h2M10 19h3M19 19h3M10 20h2M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h2M11 23h3M18 23h6M8 24h11M20 24h2M23 24h1M9 25h1M11 25h1M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M20 26h1M22 26h2M8 27h2M11 27h3M18 27h3M22 27h1M7 28h3M11 28h3M18 28h3M22 28h3M8 29h1M10 29h3M19 29h3M23 29h2" /> <path stroke="#000001" d="M19 6h1M10 7h1M22 12h1M22 14h1M23 15h1M23 17h1M7 23h1M24 27h1" /> <path stroke="#060505" d="M20 6h1" /> <path stroke="#e64e4e" d="M13 8h1M17 8h1M19 10h1M10 11h1M15 11h1M22 17h1M10 18h1M20 18h1M12 20h1M10 23h1M19 24h1M22 24h1M8 25h1M12 25h1M19 26h1M23 27h1M7 29h1" /> <path stroke="#010101" d="M21 8h1M12 22h1" /> <path stroke="#615d5d" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#010100" d="M22 13h1M23 16h1" /> <path stroke="#070505" d="M9 14h1" /> <path stroke="#010001" d="M8 16h1M19 22h1M25 29h1" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" /> <path stroke="#000101" d="M8 21h1M7 26h1" />','<path stroke="#161616" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#fff0ee" d="M13 6h6M11 7h4M16 7h5M11 8h8M20 8h1M10 9h2M13 9h9M10 10h7M18 10h4M10 11h3M14 11h8M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M10 16h1M22 16h1M9 17h5M18 17h5M9 18h2M12 18h1M19 18h4M10 19h3M19 19h3M10 20h3M19 20h1M21 20h1M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h4M13 23h1M18 23h6M9 24h10M20 24h2M23 24h1M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h1M19 26h2M22 26h2M8 27h1M11 27h3M18 27h3M22 27h1M7 28h3M11 28h3M18 28h1M20 28h1M22 28h3M8 29h1M10 29h1M12 29h1M19 29h3M23 29h2" /> <path stroke="#e1c3c3" d="M15 7h1M19 8h1M12 9h1M17 10h1M13 11h1M9 16h1M21 16h1M11 18h1M20 20h1M12 23h1M8 24h1M19 24h1M22 24h1M12 26h1M9 27h1M23 27h1M19 28h1M7 29h1M11 29h1" /> <path stroke="#cbc6c5" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0c0c" d="M14 17h1M17 17h1" />','<path stroke="#887504" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M11 13h4M17 13h4M22 13h1M9 14h1M11 14h10M22 14h1M8 15h1M11 15h10M23 15h1M8 16h1M11 16h10M23 16h1M8 17h1M15 17h2M23 17h1M8 18h1M13 18h6M23 18h1M9 19h1M13 19h6M22 19h1M9 20h1M13 20h6M22 20h1M8 21h1M10 21h1M14 21h4M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M13 25h2M17 25h2M21 25h1M24 25h1M7 26h1M10 26h1M13 26h6M21 26h1M24 26h1M7 27h1M10 27h1M14 27h4M21 27h1M24 27h1M6 28h1M10 28h1M14 28h4M21 28h1M25 28h1M6 29h1M9 29h1M13 29h6M22 29h1M25 29h1" /> <path stroke="#e6c600" d="M13 6h6M11 7h10M11 8h10M10 9h12M10 10h12M10 11h12M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#000000" d="M13 5h5M21 7h1M10 8h1M9 9h1M22 9h1M22 10h1M9 12h1M8 15h1M8 17h1M9 19h1M22 19h1M22 20h1M21 21h1M8 22h1M14 23h2M17 23h1M7 24h1M24 24h1M7 25h1M24 25h1M7 27h1" /> <path stroke="#000100" d="M18 5h1M9 10h1M9 11h1M23 18h1M10 21h1M23 21h1M18 22h1M20 22h1M23 22h1M16 23h1M24 23h1M6 28h1" /> <path stroke="#060506" d="M11 6h1" /> <path stroke="#010000" d="M12 6h1M22 11h1M9 13h1M8 18h1M9 20h1M11 22h1M13 22h1M10 25h1M21 25h1M10 26h1M21 26h1M24 26h1M10 27h1M21 27h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1" /> <path stroke="#62453a" d="M13 6h1" /> <path stroke="#755345" d="M14 6h1" /> <path stroke="#795548" d="M15 6h1M16 9h1M13 10h2M15 11h1M18 11h1M15 12h1M17 12h3M10 14h1M21 15h1M10 16h1M21 16h1M10 17h1M12 17h1M18 17h1M20 17h2M19 18h1M11 19h2M19 19h1M18 21h1M22 22h1M20 23h1M15 24h1" /> <path stroke="#795449" d="M16 6h1M15 7h1M16 10h1M19 10h1M20 18h1M9 27h1M8 28h1" /> <path stroke="#795549" d="M17 6h1M13 7h1M16 7h1M19 7h1M12 8h1M14 8h1M17 8h1M14 9h1M15 10h1M19 11h1M12 12h1M11 18h2M21 19h1M10 20h2M19 20h1M21 20h1M11 21h2M14 22h3M10 24h1M20 24h3M11 25h2M15 25h2M19 25h2M22 25h1M11 26h2M19 26h1M22 26h1M11 27h3M18 27h2M22 27h1M9 28h1M11 28h3M18 28h2M22 28h1M10 29h3M19 29h3M23 29h1" /> <path stroke="#543b33" d="M18 6h1" /> <path stroke="#000001" d="M19 6h1M10 7h1M22 12h1M22 14h1M23 15h1M23 17h1M7 23h1M24 27h1" /> <path stroke="#060505" d="M20 6h1" /> <path stroke="#523a32" d="M11 7h1" /> <path stroke="#785448" d="M12 7h1M13 8h1M15 9h1M19 9h1M12 11h1M15 13h1M10 15h1M11 17h1M21 18h1M13 24h2M19 24h1" /> <path stroke="#795448" d="M14 7h1M13 9h1M18 10h1M13 11h1M14 12h1M16 12h1M20 12h1M13 17h1M13 21h1M19 21h1M10 22h1M21 22h1M10 23h1M22 23h1M11 24h1M18 24h1M8 29h1" /> <path stroke="#785549" d="M17 7h1M16 8h1M17 9h1M14 11h1M17 11h1M10 18h1M10 19h1M12 23h1M21 23h1M17 24h1" /> <path stroke="#755347" d="M18 7h1M19 8h1" /> <path stroke="#5a4136" d="M20 7h1M9 17h1" /> <path stroke="#523b32" d="M11 8h1" /> <path stroke="#785548" d="M15 8h1M18 8h1M12 9h1M17 10h1M11 11h1M16 11h1M11 12h1M13 12h1M12 20h1M9 22h1M18 23h2M12 24h1M16 24h1" /> <path stroke="#5b4036" d="M20 8h1" /> <path stroke="#010101" d="M21 8h1M12 22h1" /> <path stroke="#65463c" d="M10 9h1" /> <path stroke="#755246" d="M11 9h1" /> <path stroke="#785449" d="M18 9h1M12 10h1M16 13h1M11 23h1M13 23h1" /> <path stroke="#765446" d="M20 9h1" /> <path stroke="#61453b" d="M21 9h1" /> <path stroke="#64463c" d="M10 10h1M22 16h1" /> <path stroke="#745347" d="M11 10h1" /> <path stroke="#775547" d="M20 10h1M9 23h1M9 26h1" /> <path stroke="#61443b" d="M21 10h1M8 24h1M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#64463d" d="M10 11h1" /> <path stroke="#765546" d="M20 11h1M9 24h1" /> <path stroke="#60443a" d="M21 11h1M24 28h1M24 29h1" /> <path stroke="#66483e" d="M10 12h1" /> <path stroke="#61443a" d="M21 12h1M21 13h1M8 25h1M8 26h1" /> <path stroke="#6f5244" d="M10 13h1" /> <path stroke="#bdb78f" d="M11 13h4M17 13h4M11 14h1M11 15h1M15 15h1M11 16h1M15 17h2M13 19h6M13 20h6M14 21h4" /> <path stroke="#010100" d="M22 13h1M23 16h1" /> <path stroke="#070505" d="M9 14h1" /> <path stroke="#bdb68f" d="M12 14h1M12 15h1M17 15h1M13 16h1" /> <path stroke="#bdb78e" d="M13 14h2M13 15h1M14 16h1M16 16h1M18 16h1M14 18h4" /> <path stroke="#bcb68f" d="M15 14h1M18 15h1" /> <path stroke="#bcb78f" d="M16 14h1" /> <path stroke="#bcb68e" d="M17 14h1M19 14h1M14 15h1M16 15h1M19 15h1M19 16h1" /> <path stroke="#bdb68e" d="M18 14h1M12 16h1M17 16h1M13 18h1" /> <path stroke="#b6ae88" d="M20 14h1" /> <path stroke="#62453b" d="M21 14h1" /> <path stroke="#5b4136" d="M9 15h1" /> <path stroke="#b8b18b" d="M20 15h1" /> <path stroke="#64473d" d="M22 15h1" /> <path stroke="#010001" d="M8 16h1M19 22h1M25 29h1" /> <path stroke="#5b4037" d="M9 16h1" /> <path stroke="#bcb78e" d="M15 16h1" /> <path stroke="#b9b08b" d="M20 16h1" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" /> <path stroke="#7b594a" d="M19 17h1" /> <path stroke="#64473c" d="M22 17h1M7 29h1" /> <path stroke="#5a4036" d="M9 18h1" /> <path stroke="#b3a782" d="M18 18h1" /> <path stroke="#65473c" d="M22 18h1" /> <path stroke="#795447" d="M20 19h1" /> <path stroke="#765246" d="M20 20h1" /> <path stroke="#000101" d="M8 21h1M7 26h1" /> <path stroke="#4f362f" d="M9 21h1" /> <path stroke="#725045" d="M20 21h1" /> <path stroke="#46332b" d="M22 21h1" /> <path stroke="#715043" d="M17 22h1" /> <path stroke="#61453a" d="M8 23h1" /> <path stroke="#4e372f" d="M23 23h1" /> <path stroke="#4f372e" d="M23 24h1M23 27h1" /> <path stroke="#775447" d="M9 25h1M8 27h1" /> <path stroke="#4e362e" d="M23 25h1" /> <path stroke="#715143" d="M20 26h1" /> <path stroke="#4e362f" d="M23 26h1" /> <path stroke="#705043" d="M20 27h1" /> <path stroke="#65473d" d="M7 28h1" /> <path stroke="#735145" d="M20 28h1" /> <path stroke="#745244" d="M23 28h1" />'];
        return bases[t];
        }
}
contract mutation {
    
    string[14] s = ['bear','alien','tron','angry','devil','green-gummy','blue-gummy','fire-rock','tron','leedle','vampire','zombie','tiger','puma'];
    function m(uint t) public view returns (string memory) {
        string[14] memory bases = ['<path stroke="#211f1f" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#3b2c2c" d="M13 6h6M11 7h4M17 7h4M11 8h2M14 8h4M19 8h2M10 9h3M14 9h2M17 9h1M19 9h1M21 9h1M12 10h4M17 10h3M21 10h1M10 11h3M15 11h7M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M15 14h2M21 14h1M9 15h2M15 15h2M21 15h2M8 16h1M10 16h1M15 16h2M21 16h1M23 16h1M8 17h1M10 17h4M18 17h4M23 17h1M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h1M12 20h1M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h1M11 24h10M23 24h1M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h1M11 26h2M19 26h2M22 26h1M9 27h1M11 27h3M18 27h3M22 27h1M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /><path stroke="#443333" d="M15 7h2M13 8h1M18 8h1M13 9h1M16 9h1M18 9h1M20 9h1M10 10h2M16 10h1M20 10h1M14 11h1M20 18h1M20 19h1M11 20h1M10 24h1M21 24h1M9 26h1M8 27h1M23 27h1" /><path stroke="#4d3a3a" d="M13 11h1M11 18h1M22 24h1M23 26h1" /><path stroke="#5c4a4a" d="M11 13h4M17 13h4M11 14h1M13 14h2M17 14h4M11 15h4M17 15h4M11 16h3M17 16h4" /><path stroke="#5a4a4a" d="M12 14h1M14 16h1" /><path stroke="#e2aef8" d="M9 16h1M22 16h1M9 17h1M22 17h1" /><path stroke="#1b1212" d="M14 17h4M15 18h2" /><path stroke="#6c5858" d="M13 18h1M18 18h1M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /><path stroke="#362424" d="M14 18h1M17 18h1" /><path stroke="#564141" d="M11 19h1M9 24h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#a6ebb5" d="M13 6h6M11 7h10M11 8h10M10 9h12M10 10h12M10 11h12M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M7 16h4M21 16h4M7 17h7M18 17h7M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#56ff7b" d="M11 13h4M17 13h4M11 14h10M5 15h2M11 15h10M25 15h2M4 16h3M11 16h10M25 16h3M4 17h3M15 17h2M25 17h3M5 18h2M13 18h6M25 18h2M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0c0c" d="M14 17h1M17 17h1" />','<path stroke="#030502" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#161616" d="M13 6h2M17 6h2M11 7h1M20 7h1M11 8h4M17 8h4M10 9h1M12 9h1M19 9h1M21 9h1M10 10h5M17 10h5M10 11h1M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M10 16h1M21 16h1M10 17h4M18 17h4M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M9 23h1M13 23h1M18 23h1M22 23h1M9 24h14M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h1M11 26h2M19 26h2M23 26h1M8 27h1M11 27h1M20 27h1M23 27h1M7 28h3M11 28h3M18 28h3M22 28h3M8 29h1M10 29h3M19 29h3M23 29h1" /> <path stroke="#16eb76" d="M15 6h2M12 7h8M15 8h2M11 9h1M13 9h6M20 9h1M15 10h2M11 11h10M9 16h1M22 16h1M9 17h1M22 17h1M11 18h1M20 18h1M11 19h1M20 19h1M8 23h1M10 23h3M19 23h3M23 23h1M8 24h1M23 24h1M9 26h1M22 26h1M9 27h1M12 27h2M18 27h2M22 27h1M7 29h1M24 29h1" /> <path stroke="#43ca00" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#d41d1d" d="M13 5h6M11 6h2M19 6h2M10 7h1M15 7h2M21 7h1M10 8h1M13 8h1M18 8h1M21 8h1M9 9h1M13 9h1M15 9h2M18 9h1M22 9h1M9 10h1M13 10h1M18 10h1M22 10h1M9 11h1M11 11h1M15 11h2M20 11h1M22 11h1M9 12h1M22 12h1M9 13h1M11 13h4M17 13h4M22 13h1M9 14h1M11 14h10M22 14h1M8 15h1M11 15h10M23 15h1M8 16h1M11 16h10M23 16h1M8 17h1M15 17h2M23 17h1M8 18h1M11 18h1M13 18h6M20 18h1M23 18h1M9 19h1M11 19h1M13 19h6M20 19h1M22 19h1M9 20h1M13 20h6M22 20h1M8 21h1M10 21h1M14 21h4M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M9 23h1M14 23h4M22 23h1M24 23h1M7 24h1M11 24h1M20 24h1M24 24h1M7 25h1M10 25h1M13 25h2M17 25h2M21 25h1M24 25h1M7 26h2M10 26h1M13 26h6M21 26h1M23 26h2M7 27h1M10 27h2M14 27h4M20 27h2M24 27h1M6 28h1M10 28h1M14 28h4M21 28h1M25 28h1M6 29h1M9 29h1M13 29h6M22 29h1M25 29h1" /> <path stroke="#0c0c0c" d="M13 6h6M11 7h4M17 7h4M11 8h2M14 8h4M19 8h2M10 9h3M14 9h1M17 9h1M19 9h3M10 10h3M14 10h4M19 10h3M10 11h1M12 11h3M17 11h3M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h1M10 23h4M18 23h4M23 23h1M8 24h3M12 24h8M21 24h3M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M9 26h1M11 26h2M19 26h2M22 26h1M8 27h2M12 27h2M18 27h2M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#000000" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#610000" d="M13 6h6M11 7h10M11 8h2M14 8h1M17 8h1M19 8h2M10 9h2M13 9h2M17 9h2M20 9h2M10 10h1M13 10h1M18 10h1M21 10h1M10 11h1M12 11h1M14 11h1M17 11h1M19 11h1M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h1M11 17h3M18 17h3M22 17h1M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M21 22h2M8 23h1M10 23h1M12 23h2M18 23h2M21 23h1M23 23h1M8 24h2M11 24h1M13 24h6M20 24h1M22 24h2M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M11 26h1M20 26h1M8 27h2M11 27h1M13 27h1M18 27h1M20 27h1M22 27h2M7 28h1M9 28h1M11 28h1M13 28h1M18 28h1M20 28h1M22 28h1M24 28h1M7 29h2M12 29h1M19 29h1M23 29h2" /> <path stroke="#290404" d="M13 8h1M15 8h2M18 8h1M12 9h1M15 9h2M19 9h1M11 10h2M14 10h4M19 10h2M11 11h1M13 11h1M15 11h2M18 11h1M20 11h1M10 17h1M21 17h1M11 18h1M20 18h1M11 19h1M20 19h1M5 21h1M7 21h1M24 21h1M26 21h1M6 22h1M25 22h1M5 23h1M9 23h1M11 23h1M20 23h1M22 23h1M26 23h1M5 24h1M10 24h1M12 24h1M19 24h1M21 24h1M26 24h1M8 26h2M12 26h1M19 26h1M22 26h2M12 27h1M19 27h1M8 28h1M12 28h1M19 28h1M23 28h1M10 29h2M20 29h2" /> <path stroke="#101010" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M6 19h1M13 19h6M25 19h1M5 20h4M13 20h6M23 20h4M4 21h1M14 21h4M27 21h1M3 22h2M27 22h2M4 23h1M27 23h1M4 24h1M27 24h1M3 25h2M6 25h1M13 25h2M17 25h2M25 25h1M27 25h2M4 26h2M13 26h6M26 26h2M4 27h1M14 27h4M27 27h1M14 28h4M13 29h6" /> <path stroke="#000000" d="M14 17h1M17 17h1" /> <path stroke="#f2f2f2" d="M2 18h2M28 18h2M2 19h3M27 19h3M3 20h2M27 20h2" /> <path stroke="#d41d1d" d="M6 21h1M25 21h1M5 22h1M7 22h1M24 22h1M26 22h1M6 23h1M25 23h1M6 24h1M25 24h1M5 25h1M26 25h1" /> <path stroke="#58554e" d="M14 22h4" />','<path stroke="#34ff09" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#65ff45" d="M13 6h6M11 7h10M11 8h10M10 9h12M10 10h12M10 11h12M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#49c82f" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#00ccff" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#0941ff" d="M13 6h6M11 7h10M11 8h10M10 9h12M10 10h12M10 11h12M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h4M19 18h4M10 19h3M19 19h3M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h6M18 23h6M8 24h16M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /> <path stroke="#04667f" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#1b0000" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#e00000" d="M13 6h2M17 6h2M11 7h2M14 7h2M18 7h3M11 8h3M19 8h2M10 9h4M15 9h1M17 9h2M14 10h2M17 10h5M10 11h2M13 11h4M19 11h3M10 12h2M13 12h5M20 12h1M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M10 17h2M13 17h1M18 17h1M20 17h3M9 18h2M22 18h1M10 19h1M12 19h1M19 19h2M12 20h1M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M10 22h1M14 22h4M21 22h2M8 23h1M11 23h1M13 23h1M18 23h1M21 23h1M8 24h2M11 24h1M13 24h2M17 24h2M20 24h2M23 24h1M8 25h2M11 25h2M19 25h2M22 25h2M9 26h1M11 26h2M19 26h2M22 26h1M11 27h3M18 27h3M7 28h3M13 28h1M18 28h1M20 28h1M23 28h2M8 29h1M10 29h3M21 29h1M24 29h1" /> <path stroke="#7b0000" d="M15 6h2M13 7h1M16 7h2M14 8h5M14 9h1M16 9h1M19 9h3M10 10h4M16 10h1M12 11h1M17 11h2M12 12h1M18 12h2M21 12h1M9 16h2M21 16h2M9 17h1M12 17h1M19 17h1M11 18h2M19 18h3M11 19h1M21 19h1M10 20h2M9 22h1M9 23h2M12 23h1M19 23h2M22 23h2M10 24h1M12 24h1M15 24h2M19 24h1M22 24h1M15 25h2M8 26h1M23 26h1M8 27h2M22 27h2M11 28h2M19 28h1M22 28h1M7 29h1M19 29h2M23 29h1" /> <path stroke="#04667f" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#030502" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#161616" d="M13 6h2M17 6h2M11 7h1M20 7h1M11 8h4M17 8h4M10 9h1M12 9h1M19 9h1M21 9h1M10 10h5M17 10h5M10 11h1M21 11h1M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M10 16h1M21 16h1M10 17h4M18 17h4M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h3M19 20h3M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M9 23h1M13 23h1M18 23h1M22 23h1M9 24h14M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h1M11 26h2M19 26h2M23 26h1M8 27h1M11 27h1M20 27h1M23 27h1M7 28h3M11 28h3M18 28h3M22 28h3M8 29h1M10 29h3M19 29h3M23 29h1" /><path stroke="#16eb76" d="M15 6h2M12 7h8M15 8h2M11 9h1M13 9h6M20 9h1M15 10h2M11 11h10M9 16h1M22 16h1M9 17h1M22 17h1M11 18h1M20 18h1M11 19h1M20 19h1M8 23h1M10 23h3M19 23h3M23 23h1M8 24h1M23 24h1M9 26h1M22 26h1M9 27h1M12 27h2M18 27h2M22 27h1M7 29h1M24 29h1" /><path stroke="#43ca00" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /><path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#211f1f" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#61e855" d="M13 6h1M17 6h1M11 7h3M17 7h4M12 8h2M15 8h1M18 8h2M12 9h2M15 9h1M15 10h2M18 10h3M10 11h2M14 11h2M18 11h2M21 11h1M11 12h2M21 12h1M21 13h1M10 15h1M22 15h1M9 16h2M21 16h2M9 17h1M21 17h1M21 18h2M11 19h2M10 20h2M20 20h2M9 21h1M18 21h3M9 22h1M15 22h2M8 23h1M12 23h2M18 23h1M9 24h1M14 24h2M18 24h2M22 24h2M15 25h1M19 25h2M22 25h1M19 26h2M22 26h1M9 27h1M12 27h1M22 27h2M9 28h1M12 28h2M19 28h1M23 28h1M7 29h2M10 29h2M19 29h2M23 29h2" /><path stroke="#a442ff" d="M14 6h1M16 6h1M18 6h1M16 7h1M11 8h1M20 8h1M10 9h2M14 9h1M16 9h2M20 9h2M14 10h1M17 10h1M12 11h2M16 11h2M10 12h1M13 12h1M16 12h3M20 12h1M10 13h1M15 13h1M10 14h1M21 14h1M21 15h1M10 17h2M13 17h1M18 17h3M22 17h1M9 18h1M12 18h1M12 20h1M19 20h1M11 21h3M22 21h1M14 22h1M17 22h1M21 22h2M19 23h1M10 24h1M16 24h1M8 25h2M11 25h1M16 25h1M23 25h1M11 27h1M18 27h1M20 27h1M7 28h2M11 28h1M20 28h1M22 28h1M24 28h1M12 29h1M21 29h1" /><path stroke="#4264ff" d="M15 6h1M14 7h2M14 8h1M16 8h2M18 9h2M10 10h4M21 10h1M20 11h1M14 12h2M19 12h1M16 13h1M9 15h1M12 17h1M10 18h2M19 18h2M10 19h1M19 19h3M10 22h1M9 23h3M20 23h4M8 24h1M11 24h3M17 24h1M20 24h2M12 25h1M8 26h2M11 26h2M23 26h1M8 27h1M13 27h1M19 27h1M18 28h1" /><path stroke="#d69fff" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /><path stroke="#0c0a09" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /> <path stroke="#e3e3e3" d="M13 6h6M11 7h10M11 8h2M19 8h2M10 9h2M13 9h6M20 9h2M10 10h3M19 10h3M10 11h2M13 11h6M20 11h2M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M9 18h2M12 18h1M19 18h1M21 18h2M10 19h1M12 19h1M19 19h1M21 19h1M10 20h1M12 20h1M19 20h1M21 20h1M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M21 22h2M8 23h1M10 23h4M18 23h4M23 23h1M8 24h1M10 24h12M23 24h1M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M11 27h3M18 27h3M8 28h2M11 28h3M18 28h3M22 28h2M7 29h1M10 29h3M19 29h3M24 29h1" /> <path stroke="#d4d2d2" d="M13 8h6M12 9h1M19 9h1M13 10h6M12 11h1M19 11h1M11 18h1M20 18h1M11 19h1M20 19h1M11 20h1M20 20h1M9 23h1M22 23h1M9 24h1M22 24h1M8 27h2M22 27h2M7 28h1M24 28h1M8 29h1M23 29h1" /> <path stroke="#c7c7c7" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /> <path stroke="#000000" d="M14 17h1M17 17h1" /> <path stroke="#1a1a1a" d="M5 18h3M24 18h3M5 19h1M26 19h1M6 20h1M25 20h1M7 21h1M24 21h1M7 22h1M24 22h1M6 26h1M25 26h1M6 27h1M25 27h1M5 28h1M26 28h1M4 29h1M27 29h1" /> <path stroke="#ff0a0a" d="M6 19h3M23 19h3M7 20h2M23 20h2M5 29h1M26 29h1" /> <path stroke="#58554e" d="M14 22h4" />','<path stroke="#232323" d="M13 5h6M11 6h1M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#610000" d="M12 6h1M12 7h2M17 8h1M16 9h2M20 9h2M12 10h2M22 10h1M12 11h1M9 18h2M10 19h1M20 19h2M21 20h1M11 23h2M20 23h1M8 24h2M20 24h1M22 24h2M13 26h1M12 27h2" /><path stroke="#3c7a24" d="M13 6h6M11 7h1M14 7h7M11 8h6M18 8h3M10 9h6M18 9h2M10 10h2M14 10h8M10 11h2M13 11h9M10 12h12M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M9 17h5M18 17h5M11 18h2M19 18h4M11 19h2M19 19h1M10 20h3M19 20h2M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h3M13 23h1M18 23h2M21 23h3M10 24h10M21 24h1M8 25h2M11 25h2M15 25h2M19 25h2M22 25h2M8 26h2M11 26h2M19 26h2M22 26h2M8 27h2M11 27h1M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M7 29h2M10 29h3M19 29h3M23 29h2" /><path stroke="#295a16" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M14 26h5M14 27h4M14 28h4M13 29h6" /><path stroke="#000000" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#000000" d="M13 6h2M17 6h2M14 7h1M17 7h1M11 8h2M14 8h1M17 8h1M19 8h2M10 10h3M19 10h3M10 12h3M19 12h3M9 15h1M22 15h1M9 17h2M21 17h2M10 19h2M20 19h2M11 21h2M19 21h2M14 22h1M17 22h1M8 23h2M12 23h1M19 23h1M22 23h2M12 24h1M19 24h1M8 25h1M23 25h1M9 27h1M11 27h2M19 27h2M22 27h1M7 28h1M24 28h1M8 29h1M10 29h2M20 29h2M23 29h1" /><path stroke="#f98f30" d="M15 6h2M11 7h3M15 7h2M18 7h3M13 8h1M15 8h2M18 8h1M10 9h12M13 10h6M10 11h12M13 12h6M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M10 15h1M21 15h1M9 16h2M21 16h2M11 17h3M18 17h3M9 18h4M19 18h4M12 19h1M19 19h1M10 20h3M19 20h3M9 21h1M13 21h1M18 21h1M22 21h1M9 22h2M15 22h2M21 22h2M10 23h2M13 23h1M18 23h1M20 23h2M8 24h4M13 24h6M20 24h4M9 25h1M11 25h2M15 25h2M19 25h2M22 25h1M8 26h2M11 26h2M19 26h2M22 26h2M8 27h1M13 27h1M18 27h1M23 27h1M8 28h2M11 28h3M18 28h3M22 28h2M7 29h1M12 29h1M19 29h1M24 29h1" /><path stroke="#f8a356" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /><path stroke="#0c0c0c" d="M14 17h1M17 17h1" />','<path stroke="#232323" d="M13 5h6M11 6h2M19 6h2M10 7h1M21 7h1M10 8h1M21 8h1M9 9h1M22 9h1M9 10h1M22 10h1M9 11h1M22 11h1M9 12h1M22 12h1M9 13h1M22 13h1M9 14h1M22 14h1M8 15h1M23 15h1M8 16h1M23 16h1M8 17h1M23 17h1M8 18h1M23 18h1M9 19h1M22 19h1M9 20h1M22 20h1M8 21h1M10 21h1M21 21h1M23 21h1M8 22h1M11 22h3M18 22h3M23 22h1M7 23h1M14 23h4M24 23h1M7 24h1M24 24h1M7 25h1M10 25h1M21 25h1M24 25h1M7 26h1M10 26h1M21 26h1M24 26h1M7 27h1M10 27h1M21 27h1M24 27h1M6 28h1M10 28h1M21 28h1M25 28h1M6 29h1M9 29h1M22 29h1M25 29h1" /><path stroke="#f0c14d" d="M13 6h1M15 6h2M18 6h1M12 7h2M15 7h2M18 7h2M11 8h1M13 8h6M20 8h1M10 9h12M10 10h12M10 11h12M10 12h1M15 12h2M21 12h1M10 13h1M15 13h2M21 13h1M10 14h1M21 14h1M9 15h2M21 15h2M9 16h2M21 16h2M10 17h4M18 17h4M10 18h3M19 18h3M11 19h2M19 19h2M11 20h2M19 20h2M9 21h1M11 21h3M18 21h3M22 21h1M9 22h2M14 22h4M21 22h2M8 23h1M11 23h1M13 23h1M18 23h1M20 23h1M23 23h1M8 24h16M8 25h2M11 25h1M15 25h2M20 25h1M22 25h1M8 27h2M11 27h3M18 27h3M22 27h2M7 28h3M11 28h3M18 28h3M22 28h3M8 29h1M10 29h3M19 29h1M23 29h1" /><path stroke="#d89537" d="M14 6h1M17 6h1M11 7h1M14 7h1M17 7h1M20 7h1M12 8h1M19 8h1M11 12h4M17 12h4M9 17h1M22 17h1M9 18h1M22 18h1M10 19h1M21 19h1M10 20h1M21 20h1M9 23h2M12 23h1M19 23h1M21 23h2M12 25h1M19 25h1M23 25h1M8 26h2M11 26h2M19 26h2M22 26h2M7 29h1M20 29h2M24 29h1" /><path stroke="#f4e299" d="M11 13h4M17 13h4M11 14h10M11 15h10M11 16h10M15 17h2M13 18h6M13 19h6M13 20h6M14 21h4M13 25h2M17 25h2M13 26h6M14 27h4M14 28h4M13 29h6" /><path stroke="#0c0c0c" d="M14 17h1M17 17h1" />']; 
        return bases[t];
        }
    
}

contract eyes {
    string[26] e = ['gerp','squints','simple','darkness','tiny','serp','tired','derp','sleeping','shocked','happy','nouns','nerd','rainbow-unishades','monocle','weirdo','puppy','agent','angry','not-impressed','herb','small-tired','giant','creepo','evil','devil'];
    function eye(uint t) public view returns (string memory _name) {
        string[26] memory eyes = ['<path stroke="#000000" d="M18 13h2M12 14h2M18 14h2" />','<path stroke="#000000" d="M11 13h3M18 13h3M11 15h3M18 15h3" /> <path stroke="#ffffff" d="M11 14h1M13 14h1M18 14h1M20 14h1" /> <path stroke="#060505" d="M12 14h1M19 14h1" />','<path stroke="#060505" d="M12 14h1M19 14h1M12 15h1M19 15h1" />','<path stroke="#060505" d="M12 14h2M18 14h2M12 15h2M18 15h2" />','<path stroke="#060505" d="M12 15h1M19 15h1" />','<path stroke="#060505" d="M12 13h2M12 14h2M18 14h2M12 15h2M18 15h2" />','<path stroke="#060505" d="M11 13h1M13 13h1M18 13h1M20 13h1M11 14h1M13 14h1M18 14h1M20 14h1M11 15h3M18 15h3" /> <path stroke="#ffffff" d="M12 13h1M19 13h1M12 14h1M19 14h1" />','<path stroke="#060505" d="M11 13h1M20 13h1M11 14h1M20 14h1M11 15h1M20 15h1M11 16h1M20 16h1" /> <path stroke="#ffffff" d="M12 13h2M18 13h2M12 14h2M18 14h2M12 15h2M18 15h2M12 16h2M18 16h2" />','<path stroke="#060505" d="M11 15h3M18 15h3" />','<path stroke="#ffffff" d="M11 13h3M18 13h3M11 14h1M13 14h1M18 14h1M20 14h1M11 15h1M13 15h1M18 15h1M20 15h1M11 16h3M18 16h3" /> <path stroke="#060505" d="M12 14h1M19 14h1M12 15h1M19 15h1" />','<path stroke="#060505" d="M11 13h3M18 13h3M11 14h1M13 14h1M18 14h1M20 14h1M11 15h1M13 15h1M18 15h1M20 15h1" /> <path stroke="#ffffff" d="M12 14h1M19 14h1M12 15h1M19 15h1" />','<path stroke="#ff0000" d="M11 13h10M11 14h1M14 14h1M17 14h1M20 14h1M11 15h1M14 15h1M17 15h1M20 15h1M11 16h4M17 16h4" /> <path stroke="#ffffff" d="M12 14h1M18 14h1M12 15h1M18 15h1" /> <path stroke="#060505" d="M13 14h1M19 14h1M13 15h1M19 15h1" />','<path stroke="#141414" d="M11 13h4M17 13h4M11 14h1M13 14h2M17 14h2M20 14h1M11 15h1M13 15h1M18 15h1M20 15h1M11 16h3M18 16h3" /><path stroke="#ffffff" d="M15 13h2" /><path stroke="#3f87ff" d="M12 14h1M19 14h1M12 15h1M19 15h1" />','<path stroke="#141414" d="M11 13h10M11 14h1M20 14h1M11 15h1M20 15h1M11 16h10" /><path stroke="#ff0a0a" d="M12 14h1M17 14h1M12 15h1M17 15h1" /><path stroke="#ffcc0a" d="M13 14h1M18 14h1M13 15h1M18 15h1" /><path stroke="#59ff0a" d="M14 14h1M19 14h1M14 15h1M19 15h1" /><path stroke="#0a45ff" d="M15 14h1M15 15h1" /><path stroke="#ff0aea" d="M16 14h1M16 15h1" />','<path stroke="#000000" d="M11 14h3" /> <path stroke="#3f87ff" d="M18 14h3M18 15h3M18 16h3" /> <path stroke="#ffffff" d="M11 15h1M13 15h1" /> <path stroke="#181818" d="M12 15h1" /> <path stroke="#eecd25" d="M21 17h1M22 18h1" />','<path stroke="#000000" d="M12 14h2M18 14h2M12 15h1M19 15h1" />','<path stroke="#000000" d="M11 14h1M20 14h1M11 15h1M20 15h1M11 16h3M18 16h3" /> <path stroke="#ffffff" d="M12 14h2M18 14h2M12 15h2M18 15h2" />','<path stroke="#000000" d="M11 14h10M11 15h4M17 15h4" />','<path stroke="#000000" d="M11 13h3M18 13h3M13 14h2M17 14h2M12 15h1M19 15h1" />','<path stroke="#000000" d="M11 13h4M17 13h4M12 14h1M19 14h1M12 15h1M19 15h1" />','<path stroke="#000000" d="M11 14h2M19 14h2M11 15h2" />','<path stroke="#000000" d="M12 14h1M14 14h1M17 14h1M19 14h1M12 15h3M17 15h3" /> <path stroke="#ffffff" d="M13 14h1M18 14h1" />','<path stroke="#ffffff" d="M11 13h4M17 13h4M11 14h1M14 14h1M17 14h1M20 14h1M11 15h1M14 15h1M17 15h1M20 15h1M11 16h4M17 16h4" /> <path stroke="#000000" d="M12 14h2M18 14h2M12 15h2M18 15h2" />','<path stroke="#000000" d="M11 13h3M18 13h3M11 14h3M18 14h3M11 15h1M13 15h1M18 15h1M20 15h1M11 16h3M18 16h3" /> <path stroke="#ffffff" d="M12 15h1M19 15h1" />','<path stroke="#000000" d="M11 13h3M18 13h3M11 15h3M18 15h3" /> <path stroke="#ffffff" d="M11 14h1M13 14h1M18 14h1M20 14h1" /> <path stroke="#ff0a0a" d="M12 14h1M19 14h1" />','<path stroke="#000000" d="M11 13h4M17 13h4M11 14h1M14 14h1M17 14h1M20 14h1M11 15h4M17 15h4M11 16h1M13 16h1M18 16h1M20 16h1" /> <path stroke="#ff0a0a" d="M12 14h2M18 14h2" />'];
        return eyes[t];
    }
}

contract mouths {
    string[30] mo = ['normal','cig','kissy','robot','lame','yep','excited','happy','sad','beta','alpha','kawaii','lipstick','baby-lipstick','predator','buck-teeth','bloody','joint','barf','zipper','vampire','big-lipstick','bashfull','stitches','gold-grill','goth','creep','dopey','clown','monster'];

    function mouth(uint t) public view returns (string memory) {
        string[30] memory mouths = ['<path stroke="#000000" d="M14 20h4" />','<path stroke="#000000" d="M14 20h3" /> <path stroke="#d0d0d0" d="M17 20h2" /> <path stroke="#ff9d00" d="M19 20h1" />','<path stroke="#ff0000" d="M15 19h2M14 20h1M17 20h1M15 21h2" /> <path stroke="#000000" d="M15 20h2" />','<path stroke="#818181" d="M13 19h6M13 20h1M18 20h1M13 21h6" /> <path stroke="#ff0a0a" d="M14 20h1" /> <path stroke="#ffcc0a" d="M15 20h1" /> <path stroke="#59ff0a" d="M16 20h1" /> <path stroke="#0a45ff" d="M17 20h1" />','<path stroke="#000000" d="M13 20h6" />','<path stroke="#000000" d="M14 20h4M14 21h4" />','<path stroke="#000000" d="M15 19h2M15 20h2M15 21h2" />','<path stroke="#000000" d="M13 19h1M18 19h1M14 20h4" />','<path stroke="#000000" d="M14 20h4M13 21h1M18 21h1" />','<path stroke="#ffffff" d="M13 19h1M13 20h1" /> <path stroke="#000000" d="M14 20h5" />','<path stroke="#ffffff" d="M13 19h1M18 19h1M13 20h1M18 20h1" /> <path stroke="#000000" d="M14 20h4" />','<path stroke="#000000" d="M14 20h4M15 21h2" />','<path stroke="#ff0a0a" d="M14 20h4" />','<path stroke="#ff0000" d="M15 20h2" />','<path stroke="#ffffff" d="M13 19h1M18 19h1M13 21h1M18 21h1" /> <path stroke="#000000" d="M14 19h4M13 20h2M17 20h2M14 21h1M17 21h1" /> <path stroke="#ff8af5" d="M15 20h2M15 21h2M15 22h2M15 23h2M14 24h1M17 24h1" />','<path stroke="#ffffff" d="M13 19h2M17 19h2" /> <path stroke="#0c0a09" d="M15 19h2M13 20h6M13 21h6" />','<path stroke="#ff0000" d="M13 20h1M18 20h1M12 21h3M17 21h3M11 22h1M13 22h1M18 22h2M13 23h1M18 23h1M20 23h1M18 24h1" /> <path stroke="#000000" d="M14 20h4" />','<path stroke="#244e14" d="M12 20h1" /> <path stroke="#ffffff" d="M13 20h2" /> <path stroke="#000000" d="M15 20h3" />','<path stroke="#7cb865" d="M12 20h1M19 20h1M12 21h2M17 21h3M11 22h1M14 22h1M18 22h2M14 23h1M19 23h1M14 24h1M14 25h1" /> <path stroke="#000000" d="M13 20h6" />','<path stroke="#d0d0d0" d="M13 19h1M15 19h1M17 19h1M14 20h1M16 20h1M18 20h1" /> <path stroke="#acacac" d="M14 19h1M16 19h1M18 19h1M13 20h1M15 20h1M17 20h1" />','<path stroke="#f2f2f2" d="M13 20h1M18 20h1M13 21h1M18 21h1" /> <path stroke="#000000" d="M14 20h4" />','<path stroke="#d41d1d" d="M13 19h6M13 20h1M18 20h1M13 21h6" /> <path stroke="#0c0a09" d="M14 20h4" />','<path stroke="#000000" d="M15 20h2M15 21h2" />','<path stroke="#ff0000" d="M13 19h1M15 19h2M18 19h1M13 20h1M15 20h2M18 20h1M13 21h1M15 21h2M18 21h1" /> <path stroke="#000000" d="M14 20h1M17 20h1" />','<path stroke="#000000" d="M14 19h4M14 21h4" /> <path stroke="#ffcf19" d="M14 20h1" /> <path stroke="#ffd537" d="M15 20h1" /> <path stroke="#ffcc0a" d="M16 20h1" /> <path stroke="#ffde64" d="M17 20h1" />','<path stroke="#000000" d="M13 18h6M13 19h1M18 19h1M13 20h6" /> <path stroke="#ffffff" d="M14 19h4" />','<path stroke="#0a45ff" d="M12 19h8M12 20h1M19 20h1M12 21h3M17 21h3" /> <path stroke="#000000" d="M13 20h2M17 20h2" /> <path stroke="#ffa8f7" d="M15 20h2M15 21h2M15 22h2" />','<path stroke="#000000" d="M13 19h4M18 19h1M13 20h6M15 21h3" /> <path stroke="#ffffff" d="M17 19h1M14 21h1" /> <path stroke="#00aeff" d="M12 20h1M12 21h2M18 21h2M11 22h3M17 22h4M11 23h1M13 23h2M20 23h1" />','<path stroke="#ffffff" d="M13 18h6M12 19h1M19 19h1M12 20h1M19 20h1M12 21h1M19 21h1M13 22h6" /> <path stroke="#ff2020" d="M13 19h6M13 20h1M18 20h1M13 21h6" /> <path stroke="#000000" d="M14 20h4" />','<path stroke="#000000" d="M9 15h1M22 15h1M9 16h1M22 16h1M9 17h1M12 17h1M19 17h1M22 17h1M9 18h2M12 18h1M19 18h1M21 18h2M10 19h4M15 19h2M18 19h4M11 20h1M13 20h6M20 20h1M13 21h2M17 21h1M17 22h1" /> <path stroke="#fffb82" d="M10 17h2M20 17h2M11 18h1M13 18h2M17 18h2M20 18h1M14 19h1M17 19h1M12 20h1M19 20h1M11 21h2M15 21h2M19 21h2M15 22h2" /> <path stroke="#5a9800" d="M10 20h1M21 20h2M9 21h2M18 21h1M22 21h2M10 22h2M14 22h1M18 22h3M22 22h1M11 23h1M13 23h3M20 23h1M15 24h1" />'];
        return mouths[t];
    }
}

contract chapes is ERC721 {
    uint total;
    uint mutated;
    uint max = 3333;
    address owner;

    

    constructor() ERC721('Chain Apes','CHAPES') {
        owner = msg.sender;
    }

    mapping(uint => uint256) public seed;
    mapping(uint => uint[3]) public gene;
    mapping(uint => bool) public mutant;


    modifier noCheaters(uint _seed) {
            uint256 size = 0;
            address acc = msg.sender;
            assembly {
                  size := extcodesize(acc)
            }
            seed[total] =  uint256(keccak256(abi.encodePacked(acc, block.coinbase,_seed,block.timestamp)));
            _;
    }

    function roll() public noCheaters(total) {
        gene[total] = [seed[total]%10,seed[total]%25,seed[total]%29];
        _mint(msg.sender, total);
        
        total++;
    }
    function tokenURI(uint _token) public view override returns(string memory) {
        return getBase(_token);
    }

    function getBase(uint256 _token) internal view returns (string memory) {
            string memory svg = uri(_token);
            string memory json = Base64.encode(bytes(string(abi.encodePacked('{"name": "ChainApe", "description": "APES", "image_data": "',svg,'","attributes": [{ "trait_type": "Base", "value": "??????" }, { "trait_type": "face", "value": "??????" }, { "trait_type": "body", "value": "??????" }, { "trait_type": "head", "value": "??????" }, { "trait_type": "background", "value": "??????" }]}'))));
            return string(abi.encodePacked('data:application/json;base64,', json));
        
      }

    function uri(uint _t) public view returns(string memory) {
        return mutant[_t] == true ? maper(_t) : aper(_t);
    }

    function maper(uint _t) internal view returns(string memory) {
        string memory base = mute(gene[_t][0]);
        string memory eye = eye(gene[_t][1]); 
        string memory mouth = mouth(gene[_t][2]);
        string memory color = background(seed[_t]%7); 
        return svg(base,eye,mouth,color);
    }

    function aper(uint _t) internal view returns(string memory) {  
        
        string memory base = base(gene[_t][0]);
        string memory eye = eye(gene[_t][1]); 
        string memory mouth = mouth(gene[_t][2]); 
        string memory color = background(seed[_t]%7);
        return svg(base,eye,mouth,color);
    }

    function svg(string memory one, string memory two, string memory three, string memory colers) internal view returns (string memory) {
        return string(abi.encodePacked("<svg style='width:352;height:352;background:",colers,"' viewBox='0 -0.5 32 32' shape-rendering='crispEdges'> <g style='transform:translateY(2px)'>",one,two,three,"</g></svg>"));
    }
    function background(uint _t) public view returns (string memory) {
        return ['radial-gradient(#ff4040, black)','#ff2929','#29ff61','radial-gradient(#63ff1c, black)','#4029ff','radial-gradient(#ff009e, black)','#ffd129'][seed[_t]%7];
    }
    function mouth(uint _t) public view returns(string memory) {
        return mouths(0x97d757bFecc340fc364Bf3deB68A3021f0a8Df48).mouth(_t);
    }

    function eye(uint _t) public view returns(string memory) {
        return eyes(0x1d6082Ae96cF92Ea66df1d38AbAbDc67C7DEA430).eye(_t);
    }

    function base(uint _t) public view returns(string memory) {
        return Base(0xCA2B8f317C243c9bb057BD23E7316Aa187d68e14).baser(_t);
    }

    function mute(uint _t) public view returns(string memory) {
        return mutation(0x448aDA9a516cF231b4Cc2164e2eB09851Ab90c4b).m(_t);
    }

    function mutate(uint _t) public noCheaters(mutated) returns(string memory) {
        
        gene[_t][0] = seed[total]%13;
        mutant[_t] = true;
        mutated++;
    }





}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}