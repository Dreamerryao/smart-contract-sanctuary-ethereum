/**
 *Submitted for verification at Etherscan.io on 2021-12-03
*/

// SPDX-License-Identifier: MIT
// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {

  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  )
    internal
    pure
    returns (
      uint256
    )
  {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(
    bytes32 _keyHash,
    uint256 _vRFInputSeed
  )
    internal
    pure
    returns (
      bytes32
    )
  {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}
// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {

  function allowance(
    address owner,
    address spender
  )
    external
    view
    returns (
      uint256 remaining
    );

  function approve(
    address spender,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function balanceOf(
    address owner
  )
    external
    view
    returns (
      uint256 balance
    );

  function decimals()
    external
    view
    returns (
      uint8 decimalPlaces
    );

  function decreaseApproval(
    address spender,
    uint256 addedValue
  )
    external
    returns (
      bool success
    );

  function increaseApproval(
    address spender,
    uint256 subtractedValue
  ) external;

  function name()
    external
    view
    returns (
      string memory tokenName
    );

  function symbol()
    external
    view
    returns (
      string memory tokenSymbol
    );

  function totalSupply()
    external
    view
    returns (
      uint256 totalTokensIssued
    );

  function transfer(
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  )
    external
    returns (
      bool success
    );

  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    internal
    virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 constant private USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(
    bytes32 _keyHash,
    uint256 _fee
  )
    internal
    returns (
      bytes32 requestId
    )
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(
    address _vrfCoordinator,
    address _link
  ) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    external
  {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: contracts/DiceGame.sol


pragma solidity ^0.8.7;

contract DiceGame is VRFConsumerBase {
    
    bytes32 internal keyHash;
    uint256 internal fee;
    uint256 internal totalAmountToBePaid;
    uint256 MIN_BET;
    uint256 MAX_BET;
    address admin;
    address nextOwner;
    uint256 constant HOUSE_EDGE_PERCENT = 1;
    uint256 HOUSE_EDGE_MINIMUM_AMOUNT;
    
    struct Bet {
        // Bet amount in wei.
        uint amount;
     	// Modulo of a game.
        uint8 modulo;
        // bet choice
        bytes32 choice;
        // Address of a gambler, used to pay out winning bets.
        address gambler;
    }

    // Mapping from commits to all currently active & processed bets.
    mapping (bytes32 => Bet) bets;
    mapping (address => uint256) dice_games_played;
    mapping (address => uint256) flip_games_played;
    
    enum GAMESTAT{ RUNNING, PAUSED }
    GAMESTAT gameStatus;

    
    event DiceGameLost(bytes32 indexed requestId, uint256 first, uint256 second, uint256 third,address indexed _address);
    event DiceGameWon(bytes32 indexed requestId, uint256 first, uint256 second, uint256 third, uint256 amountWon,address indexed _address);
    event notEnoughBalance(uint256 first,address indexed _address);
    event dice_requestIDGenerated(bytes32 indexed requestId,bytes32 guess,address indexed _address);
    event flip_requestIDGenerated(bytes32 indexed requestId,bytes32 guess,address indexed _address);
    event FlipGameWon(bytes32 indexed requestId, uint256 first, uint256 amountWon,address indexed _address);
    event FlipGameLost(bytes32 indexed requestId, uint256 first,address indexed _address);

    mapping(address => uint256) public winnerList;

    //rinkedby
    constructor()
        VRFConsumerBase(
            0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator
            0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK Token
        )
    {
        MIN_BET = 0.02 ether;
        MAX_BET = 1 ether;    
        HOUSE_EDGE_MINIMUM_AMOUNT = 0.015 ether;
    
        keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)
        admin = msg.sender;
        gameStatus = GAMESTAT.RUNNING;
    }

    //mainnet
    // constructor()
    //     VRFConsumerBase(
    //         0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator
    //         0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token
    //     )
    // {
    //     MIN_BET = 0.02 ether;
    //     MAX_BET = 1 ether;    
    //     HOUSE_EDGE_MINIMUM_AMOUNT = 0.015 ether;
    
    //     keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;
    //     fee = 2 * 10 ** 18; // 0.1 LINK (Varies by network)
    //     admin = msg.sender;
    //     gameStatus = GAMESTAT.RUNNING;
    // }
    
    //binance testnet
    // constructor()
    //     VRFConsumerBase(
    //         0xa555fC018435bef5A13C6c6870a9d4C11DEC329C, // VRF Coordinator
    //         0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06  // LINK Token
    //     )
    // {
    //     MIN_BET = 0.01 ether;
    //     MAX_BET = 2 ether;    
    //     HOUSE_EDGE_MINIMUM_AMOUNT = 0.003 ether;
    //     keyHash = 0xcaf3c3727e033261d383b315559476f48034c13b18f8cafed4d871abe5049186;
    //     fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)
    //     admin = msg.sender;
    //     gameStatus = GAMESTAT.RUNNING;
    // }

    //binance main
    // constructor()
    //     VRFConsumerBase(
    //         0x747973a5A2a4Ae1D3a8fDF5479f1514F65Db9C31, // VRF Coordinator
    //         0x404460C6A5EdE2D891e8297795264fDe62ADBB75  // LINK Token
    //     )
    // {
    //     MIN_BET = 0.01 ether;
    //     MAX_BET = 2 ether;    
    //     HOUSE_EDGE_MINIMUM_AMOUNT = 0.003 ether;
    //     keyHash = 0xc251acd21ec4fb7f31bb8868288bfdbaeb4fbfec2df3735ddbd4f7dc8d60103c;
    //     fee = 0.2 * 10 ** 18; // 0.1 LINK (Varies by network)
    //     admin = msg.sender;
    //     gameStatus = GAMESTAT.RUNNING;
    // }    
    
    //polygon mumbai
    //     constructor()
    //     VRFConsumerBase(
    //         0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, // VRF Coordinator
    //         0x326C977E6efc84E512bB9C30f76E30c160eD06FB  // LINK Token
    //     )
    // {
    //     MIN_BET = 0.01 ether;
    //     MAX_BET = 100 ether;
    //     HOUSE_EDGE_MINIMUM_AMOUNT = 0.003 ether;
    
    //     keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;
    //     fee = 0.0001 * 10 ** 18; // 0.1 LINK (Varies by network)
    //     admin = msg.sender;
    //     gameStatus = GAMESTAT.RUNNING;
    // }

    //polygon main
    //     constructor()
    //     VRFConsumerBase(
    //         0x3d2341ADb2D31f1c5530cDC622016af293177AE0, // VRF Coordinator
    //         0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK Token
    //     )
    // {
    //     MIN_BET = 0.01 ether;
    //     MAX_BET = 100 ether;
    //     HOUSE_EDGE_MINIMUM_AMOUNT = 0.003 ether;
    
    //     keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
    //     fee = 0.0001 * 10 ** 18; // 0.1 LINK (Varies by network)
    //     admin = msg.sender;
    //     gameStatus = GAMESTAT.RUNNING;
    // }

    modifier onlyAdmin() {
		require(msg.sender == admin, "This operation is only for Admins");
		_;
	}
	receive() external payable {
    }

    /**
     * Requests randomness
     */
    function rollDice(bytes32 guess, uint modulo) public payable returns (bytes32 requestId)  {

        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with faucet");
        require(msg.value >= MIN_BET, "Need an amount greater than minimum bet amount");
        require(msg.value <= MAX_BET, "Bet amount should not be greater than the MAX bet amount");
        require(gameStatus == GAMESTAT.RUNNING,"Game is presently paused!");
        if (msg.value > msg.sender.balance) {revert();}
        //check if they are already playing dice
        if((modulo==6) && (dice_games_played[msg.sender] > 0)){
            // Check if the player is trying to play again while waiting for the bet to finalize
            // if they do it system would not allow
            // even if someone forges the timestamp, what would happen is Chainlink would return the same random number. So they don't get an advantage
            // dice_games_played[msg.sender] would be set to 0 when Chainlink returns the random number
            require(block.timestamp - dice_games_played[msg.sender] > 10 minutes, 'Need to wait 10 minutes');
        }
        //check if they are already playing flip coin
        if((modulo==2) && (flip_games_played[msg.sender] > 0)){
            // Check if the player is trying to play again while waiting for the bet to finalize
            // if they do it systeem would not allow
            // even if someone forges the timestamp, what would happen is Chainlink would return the same random number. So they don't get an advantage
            // flip_games_played[msg.sender] would be set to 0 when Chainlink returns the random number
            require(block.timestamp - flip_games_played[msg.sender] > 10 minutes, 'Need to wait 10 minutes');
        }
        // request Chainlink
        requestId = requestRandomness(keyHash, fee);

        Bet storage bet = bets[requestId];
	    bet.amount = msg.value;
        bet.modulo = uint8(modulo);
        bet.choice = guess;
        bet.gambler = msg.sender;
        if(modulo==6)
            dice_games_played[msg.sender] = block.timestamp;
        else
            flip_games_played[msg.sender] = block.timestamp;

        if(modulo==6)
            emit dice_requestIDGenerated(requestId,guess,msg.sender);
        else
            emit flip_requestIDGenerated(requestId,guess,msg.sender);
        return requestId;
    }



    function getHouseEdge(uint256 amount) private view returns (uint256){
        uint houseEdge = amount * HOUSE_EDGE_PERCENT / 100;

        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {
            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;
        }
        return houseEdge;
    }

    /**
     * Callback function used by VRF Coordinator
     */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        //randomResult = randomness;

	    Bet memory bet = bets[requestId];
	    // set this to 0 so that they can play again
	    if(bet.modulo == 6){
            //dice game
            dice_games_played[bet.gambler] = 0;
            uint256[] memory return_values = expand(randomness,3);
            uint first = (return_values[0] % bet.modulo) + 1;
            uint second = (return_values[1] % bet.modulo) + 1;
            uint third = (return_values[2] % bet.modulo) + 1;
            uint sum = first + second + third;
            uint256 amountWon = bet.amount * 3;//return thrice if they win

            bytes32 guess = bet.choice;

            bool gameWon = false;
            bool triples = false;

            if(first== second && second==third){
                triples = true;
            }

            uint256 houseEdge = getHouseEdge(bet.amount);

            if(guess == "small" && sum >=4 && sum<=10 && (triples == false)){
                gameWon = true;
                amountWon = bet.amount * 2;// for this they get twice the amount they bet
            }
            else if(guess == "big" && sum >=11 && sum<=17 && (triples == false)){
                gameWon = true;
                amountWon = bet.amount * 2;// for this they get twice the amount they bet
            }
            else if(guess == "4" && sum == 4){
                 gameWon = true;
            }
            else if(guess == "5" && sum == 5){
                 gameWon = true;
            }
            else if(guess == "6" && sum == 6){
                 gameWon = true;
            }
            else if(guess == "7" && sum == 7){
                 gameWon = true;
            }
            else if(guess == "8" && sum == 8){
                 gameWon = true;
            }
            else if(guess == "9" && sum == 9){
                 gameWon = true;
            }
            else if(guess == "10" && sum == 10){
                 gameWon = true;
            }
            else if(guess == "11" && sum == 11){
                 gameWon = true;
            }
            else if(guess == "12" && sum == 12){
                 gameWon = true;
            }
            else if(guess == "13" && sum == 13){
                 gameWon = true;
            }
            else if(guess == "14" && sum == 14){
                 gameWon = true;
            }
            else if(guess == "15" && sum == 15){
                 gameWon = true;
            }
            else if(guess == "16" && sum == 16){
                 gameWon = true;
            }
            else if(guess == "17" && sum == 17){
                 gameWon = true;
            }
            if(gameWon){
                //game won
                //reduce the houseEdge
                amountWon = amountWon - houseEdge;
                winnerList[bet.gambler] = winnerList[bet.gambler] + amountWon;
                totalAmountToBePaid += amountWon;
                emit DiceGameWon(requestId, first, second, third,amountWon,bet.gambler);
            }else{
                //game lost
                emit DiceGameLost(requestId, first, second, third,bet.gambler);
            }

        }
	    else if(bet.modulo == 2){
            //flip coin
            flip_games_played[bet.gambler] = 0;
            uint256[] memory return_values = expand(randomness,1);
            uint flip_coin = (return_values[0] % bet.modulo) + 1;
            uint256 amountWon = bet.amount * 2;//return thrice if they win


            bytes32 guess = bet.choice;

            bool gameWon = false;

            uint256 houseEdge = getHouseEdge(bet.amount);

            if(guess == "heads" && flip_coin == 1){
                 gameWon = true;
            }
            else if(guess == "tails" && flip_coin == 2){
                 gameWon = true;
            }

            if(gameWon){
                //game won
                //reduce the houseEdge
                amountWon = amountWon - houseEdge;
                winnerList[bet.gambler] = winnerList[bet.gambler] + amountWon;
                totalAmountToBePaid += amountWon;
                emit FlipGameWon(requestId, flip_coin,amountWon,bet.gambler);
            }else{
                //game lost
                emit FlipGameLost(requestId, flip_coin,bet.gambler);
            }


        }


    }
    function expand(uint256 randomValue, uint256 n) private pure returns (uint256[] memory expandedValues) {
        expandedValues = new uint256[](n);
        for (uint256 i = 0; i < n; i++) {
            expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));
        }
        return expandedValues;
    }

    function withdraw() public {
        require(winnerList[msg.sender] != 0, "No funds to withdraw");
		uint amount = winnerList[msg.sender];
		uint256 balanceContract = address(this).balance;
		if(balanceContract < amount){
		    emit notEnoughBalance(balanceContract,msg.sender);
		}else{
    		winnerList[msg.sender] = 0;
    		totalAmountToBePaid -= amount;
    		(bool success, ) = msg.sender.call{value: amount}("");
            require(success, "Transfer failed.");
		}
	}
    function getMyBalance() public view returns (uint256,uint256)  {
        uint256 _balance = winnerList[msg.sender];
        uint256 balanceContract = address(this).balance;
		return (_balance,balanceContract);
	}

	function withdrawAmount(uint256 amount) public onlyAdmin {
		payable(admin).transfer(amount);
	}

	function getTotalAmountOwed() public view onlyAdmin returns(uint256)  {
		return totalAmountToBePaid;
	}

    function withdrawForUser(address addr)  public onlyAdmin{
        require(winnerList[addr] != 0, "No funds to withdraw");
		uint amount = winnerList[addr];
		uint256 balanceContract = address(this).balance;
		if(balanceContract < amount){
		    emit notEnoughBalance(balanceContract,msg.sender);
		}else{
    		winnerList[addr] = 0;
    		totalAmountToBePaid -= amount;
    		(bool success, ) = addr.call{value: amount}("");
            require(success, "Transfer failed.");
		}
	}
	// withdrawLink allows the owner to withdraw any extra LINK on the contract
    function withdrawLink() public onlyAdmin
    {
        require(LINK.transfer(msg.sender, LINK.balanceOf(address(this))), "Unable to transfer");
    }
    
    function getLinkBalance() public view onlyAdmin returns (uint256)  {
        return LINK.balanceOf(address(this));
    }
    function approveNextOwner(address _nextOwner) public onlyAdmin {
        require (_nextOwner != admin, "Cannot approve current owner.");
        nextOwner = _nextOwner;
    }
    function pauseGame() public onlyAdmin {
        gameStatus = GAMESTAT.PAUSED;
    }
    
    function restartGame() public onlyAdmin {
        gameStatus = GAMESTAT.RUNNING;
    }

    function acceptNextOwner() external {
        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
        admin = nextOwner;
    }

    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract
}