// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "Ownable.sol";
import "MerkleProof.sol";

interface SchoolYard {
    function contractURI() external view returns (string memory);
    function ownerOf(uint256 tokenId) external view returns (address);
    function balanceOf(address owner) external view returns (uint256);   
}

contract aeHolders is Ownable {

    SchoolYard schoolAddress;

    // Ugly array of houses

    // 0 = Organica
    // 1 = Neue
    // 2 = Psychedelia
    // 3 = Retrogroove
    // bytes32[4] private houseRoots;

    
    uint16[][] houseNumbers = [[1,2,7,8,9,10,15,18,26,28,30,31,32,39,43,47,49,56,58,64,66,86,90,93,95,98,102,106,113,120,123,129,132,136,139,141,146,149,154,158,159,165,175,179,183,186,188,190,194,199,205,206,210,214,220,224,225,226,229,236,242,246,251,255,257,261,269,271,274,278,282,283,290,294,307,308,314,315,316,320,326,327,332,335,337,345,346,354,356,361,364,368,370,376,379,380,385,386,388,393,402,406,408,414,415,423,426,433,436,439,440,441,443,450,452,457,467,471,477,479,480,488,493,495,496,502,506,510,514,519,520,522,529,533,534,535,538,543,547,553,562,568,569,576,579,591,596,598,608,610,613,614,615,617,620,622,632,634,635,637,639,644,645,648,649,650,652,659,664,665,666,671,674,680,681,682,684,694,697,703,715,719,720,723,724,725,728,729,732,739,741,766,771,776,778,781,785,792,793,798,806,808,814,815,820,821,827,830,835,837,844,845,850,851,856,858,859,870,871,875,880,885,890,894,897,902,905,906,911,914,921,924,927,933,939,941,946,949,950,954,962,969,984,985,986,988,990,991,996,998,1003,1005,1009,1013,1018,1025,1030,1031,1038,1042,1044,1046,1047,1050,1054,1057,1058,1059,1061,1064,1067,1069,1077,1078,1080,1108,1110,1112,1115,1116,1123,1130,1135,1137,1138,1144,1147,1151,1155,1158,1161,1166,1170,1173,1174,1177,1179,1183,1184,1190,1194,1195,1198,1199,1206,1211,1224,1227,1230,1238,1240,1244,1247,1249,1261,1263,1266,1271,1274,1276,1286,1287,1289,1294,1300,1306,1312,1313,1314,1321,1322,1327,1331,1332,1341,1343,1345,1346,1354,1358,1367,1368,1369,1374,1375,1383,1388,1390,1396,1402,1404,1408,1410,1416,1423,1425,1428,1431,1435,1441,1446,1448,1450,1451,1459,1461,1462,1469,1471,1473,1475,1482,1489,1494,1496,1497,1506,1510,1515,1516,1519,1524,1525,1526,1530,1533,1535,1537,1544,1548,1556,1557,1559,1560,1561,1581,1582,1583,1584,1588,1592,1594,1596,1600,1620,1623,1630,1636,1641,1642,1643,1646,1648,1649,1653,1655,1664,1672,1676,1679,1687,1688,1689,1695,1696,1697,1705,1713,1718,1719,1725,1727,1729,1730,1741,1742,1743,1748,1749,1753,1759,1765,1767,1769,1770,1771,1785,1789,1793,1799,1801,1806,1808,1814,1819,1822,1829,1837,1840,1843,1845,1846,1851,1852,1858,1862,1864,1871,1874,1878,1880,1882,1886,1901,1903,1905,1910,1911,1914,1917,1920,1921,1925,1926,1935,1936,1944,1946,1948,1951,1953,1954,1956,1959,1978,1981,1987,1992,1994,1998,2009,2013,2015,2022,2035,2037,2040,2043,2048,2049,2052,2055,2063,2066,2068,2070,2071,2072,2073,2077,2082,2089,2095,2096,2097,2104,2105,2107,2110,2117,2122,2126,2127,2129,2133,2135,2142,2143,2144,2162,2165,2168,2173,2174,2181,2183,2186,2198,2199,2201,2203,2206,2208,2215,2222,2225,2227,2231,2232,2238,2245,2247,2250,2252,2256,2259,2269,2271,2283,2287,2290,2291,2295,2299,2300,2304,2307,2313,2317,2318,2322,2327,2328,2336,2338,2340,2343,2345,2347,2349,2352,2356,2366,2368,2370,2379,2382,2383,2384,2385,2387,2393,2394,2404,2405,2409,2412,2417,2418,2422,2443,2445,2448,2453,2456,2466,2467,2469,2474,2477,2482,2492,2493,2494,2499,2501,2505,2507,2516,2518,2520,2538,2541,2542,2543,2544,2550,2555,2556,2558,2565,2567,2570,2572,2575,2583,2584,2597,2601,2603,2607,2611,2613,2615,2621,2624,2629,2632,2635,2637,2640,2643,2644,2660,2663,2669,2676,2678,2680,2685,2686,2688,2693,2698,2699,2702,2709,2710,2711,2715,2716,2722,2726,2727,2730,2735,2750,2753,2755,2758,2762,2765,2771,2774,2776,2777,2780,2783,2789,2802,2803,2805,2806,2814,2820,2822,2825,2829,2831,2836,2838,2842,2850,2856,2859,2860,2864,2877,2878,2881,2883,2884,2887,2892,2894,2896,2907,2913,2918,2928,2929,2930,2931,2933,2936,2944,2946,2947,2950,2960,2964,2966,2968,2976,2977,2978,2992,2995,2996,2997],
        [3,5,6,17,22,24,27,37,41,46,48,54,57,62,63,69,71,74,77,79,81,84,91,103,104,107,108,110,112,114,126,130,131,137,145,147,148,150,152,161,162,167,174,178,187,192,202,204,207,211,212,219,221,227,230,231,233,234,235,241,248,249,250,252,253,256,262,265,268,277,279,295,303,304,306,309,310,311,321,322,323,329,331,333,339,340,341,344,347,355,363,369,374,377,387,392,397,401,404,413,416,418,419,421,422,425,428,431,435,437,447,449,454,459,461,463,468,470,482,483,485,487,490,497,498,500,507,509,511,515,516,525,527,540,541,546,548,555,556,558,563,570,572,575,578,580,585,586,592,597,602,605,606,607,621,623,625,629,638,640,643,646,656,658,663,675,677,683,685,686,687,688,696,700,701,702,711,714,717,722,726,733,736,738,745,749,751,755,757,760,763,764,772,774,782,783,787,790,795,797,801,804,811,819,823,825,829,831,838,842,843,848,852,854,863,864,867,868,872,874,879,887,891,895,900,909,910,913,917,919,923,928,932,935,938,940,955,957,959,961,964,967,970,972,975,980,982,993,997,999,1000,1002,1004,1010,1015,1024,1028,1029,1035,1036,1043,1048,1051,1060,1062,1066,1073,1074,1081,1088,1089,1090,1094,1098,1100,1101,1113,1117,1119,1121,1122,1125,1129,1141,1142,1143,1148,1150,1154,1156,1167,1169,1171,1172,1176,1180,1182,1187,1196,1203,1205,1209,1212,1213,1214,1218,1219,1222,1229,1241,1245,1248,1250,1253,1255,1264,1265,1270,1277,1279,1282,1284,1285,1292,1296,1303,1307,1308,1315,1324,1328,1329,1330,1333,1337,1340,1342,1352,1355,1360,1361,1362,1364,1377,1380,1382,1386,1387,1392,1394,1400,1403,1405,1409,1417,1420,1422,1427,1433,1439,1440,1443,1444,1445,1458,1464,1467,1472,1480,1484,1491,1492,1493,1498,1499,1504,1511,1512,1513,1518,1520,1527,1531,1540,1541,1547,1549,1552,1554,1555,1564,1565,1571,1572,1575,1578,1579,1587,1601,1604,1610,1611,1614,1615,1617,1619,1626,1629,1634,1635,1639,1644,1656,1660,1665,1666,1668,1670,1677,1680,1682,1684,1686,1694,1699,1706,1707,1712,1715,1717,1721,1726,1732,1734,1735,1736,1745,1752,1760,1761,1768,1773,1774,1777,1783,1784,1787,1792,1795,1796,1813,1825,1827,1830,1831,1832,1834,1835,1836,1842,1848,1849,1853,1854,1857,1861,1863,1869,1873,1877,1883,1889,1894,1896,1897,1898,1906,1909,1913,1923,1928,1932,1934,1937,1942,1943,1950,1957,1960,1963,1965,1966,1968,1970,1973,1979,1988,1989,1995,1999,2002,2003,2004,2010,2017,2021,2024,2027,2031,2039,2044,2045,2046,2053,2054,2057,2059,2067,2074,2080,2081,2086,2090,2092,2101,2102,2109,2113,2115,2118,2128,2130,2137,2138,2139,2147,2151,2154,2156,2159,2161,2166,2167,2170,2180,2187,2190,2191,2192,2194,2197,2204,2205,2211,2213,2217,2223,2229,2235,2237,2242,2246,2254,2258,2260,2266,2268,2274,2276,2277,2281,2285,2286,2293,2297,2301,2305,2308,2309,2311,2315,2320,2330,2335,2337,2342,2348,2358,2359,2361,2364,2367,2369,2374,2380,2389,2391,2395,2401,2403,2407,2410,2419,2420,2425,2426,2427,2429,2432,2434,2436,2438,2449,2455,2458,2462,2465,2473,2475,2484,2487,2488,2490,2491,2500,2504,2509,2511,2512,2515,2517,2528,2529,2539,2540,2546,2547,2553,2561,2562,2563,2568,2571,2573,2576,2580,2581,2585,2594,2598,2600,2606,2609,2614,2620,2622,2626,2628,2631,2633,2645,2650,2653,2654,2657,2662,2664,2671,2674,2675,2677,2679,2681,2682,2690,2696,2705,2714,2717,2721,2724,2725,2734,2737,2740,2741,2743,2746,2748,2752,2756,2761,2764,2770,2787,2788,2792,2793,2796,2799,2800,2808,2813,2815,2818,2824,2828,2833,2835,2837,2846,2852,2854,2858,2861,2865,2867,2870,2873,2874,2879,2885,2886,2890,2897,2899,2903,2906,2909,2914,2920,2922,2924,2935,2940,2942,2948,2953,2955,2956,2957,2970,2973,2979,2982,2983,2984,2989,2998,2999],
        [4,12,13,14,16,19,21,34,38,42,45,50,55,60,61,68,73,75,76,80,85,88,92,99,100,105,109,111,115,116,121,127,128,133,135,144,151,153,157,163,164,168,169,171,173,176,180,182,185,189,193,196,198,201,203,209,213,215,223,228,232,238,245,254,263,267,270,273,280,281,287,291,292,293,298,299,300,301,302,312,317,324,330,336,343,348,350,352,353,358,359,362,365,366,375,383,390,391,394,398,399,400,403,405,407,424,429,430,432,442,444,446,448,451,458,462,466,475,476,478,481,486,489,491,501,505,508,513,521,523,524,526,531,536,544,545,549,552,554,559,561,564,567,571,574,582,587,589,590,599,600,604,612,618,619,624,626,628,630,636,641,642,647,653,657,661,662,673,676,692,705,707,709,713,716,727,730,731,735,737,740,742,743,744,746,747,750,753,761,762,765,768,769,773,779,784,786,791,796,799,803,805,807,809,812,817,822,826,828,834,840,849,853,855,860,862,865,869,881,882,884,888,892,896,899,903,904,908,916,918,920,930,931,934,942,944,945,952,953,960,965,966,971,974,976,977,981,987,992,995,1001,1007,1011,1012,1014,1017,1019,1020,1021,1037,1039,1045,1053,1056,1063,1072,1075,1079,1082,1085,1086,1091,1092,1095,1097,1103,1105,1106,1107,1120,1124,1126,1131,1133,1136,1139,1140,1152,1153,1157,1162,1164,1165,1175,1181,1186,1189,1192,1197,1202,1208,1210,1216,1217,1220,1221,1225,1233,1235,1237,1239,1246,1252,1258,1259,1262,1272,1280,1281,1283,1288,1293,1295,1298,1301,1302,1305,1310,1316,1317,1325,1326,1334,1335,1339,1344,1349,1350,1356,1357,1363,1365,1372,1376,1378,1381,1385,1391,1398,1399,1406,1407,1413,1418,1419,1421,1430,1432,1437,1438,1442,1447,1449,1455,1457,1460,1468,1470,1476,1477,1485,1486,1488,1490,1501,1503,1505,1508,1521,1522,1523,1532,1534,1536,1543,1546,1550,1562,1563,1567,1568,1569,1573,1577,1580,1585,1586,1589,1597,1602,1605,1607,1613,1616,1618,1621,1625,1632,1633,1638,1647,1650,1651,1654,1658,1659,1661,1662,1669,1671,1678,1685,1691,1692,1700,1703,1704,1708,1714,1720,1722,1723,1737,1738,1744,1746,1747,1750,1751,1754,1755,1756,1772,1776,1780,1781,1788,1791,1794,1798,1803,1807,1815,1817,1818,1821,1826,1833,1838,1839,1841,1847,1850,1855,1859,1865,1868,1872,1875,1876,1879,1887,1891,1892,1899,1904,1907,1908,1916,1919,1922,1929,1930,1931,1940,1945,1947,1955,1961,1967,1969,1971,1974,1977,1980,1982,1983,1990,1993,1997,2005,2007,2008,2012,2018,2019,2025,2026,2028,2030,2032,2038,2041,2051,2056,2060,2062,2065,2075,2076,2084,2087,2088,2094,2099,2100,2106,2111,2116,2120,2121,2125,2131,2132,2141,2146,2149,2150,2152,2153,2155,2157,2164,2169,2176,2178,2184,2189,2193,2200,2207,2216,2218,2219,2220,2224,2226,2233,2239,2240,2243,2244,2249,2255,2257,2261,2267,2270,2273,2275,2280,2284,2292,2294,2296,2312,2314,2319,2321,2324,2325,2329,2333,2334,2341,2344,2346,2351,2355,2360,2362,2372,2373,2376,2381,2386,2392,2396,2400,2402,2406,2414,2415,2421,2423,2424,2430,2437,2439,2440,2444,2446,2450,2452,2457,2459,2460,2464,2471,2478,2479,2485,2486,2489,2495,2497,2498,2503,2510,2513,2514,2521,2522,2525,2531,2533,2534,2537,2545,2549,2551,2564,2574,2577,2578,2582,2587,2588,2596,2599,2602,2605,2608,2610,2616,2619,2627,2630,2634,2638,2642,2647,2648,2649,2659,2661,2665,2667,2670,2684,2691,2692,2694,2695,2697,2701,2703,2707,2713,2719,2728,2729,2731,2738,2742,2749,2754,2757,2760,2763,2766,2767,2769,2772,2779,2781,2782,2786,2790,2791,2797,2801,2804,2817,2819,2823,2827,2830,2834,2843,2844,2847,2849,2851,2853,2862,2866,2869,2872,2880,2882,2889,2891,2893,2898,2900,2901,2902,2908,2917,2919,2925,2937,2939,2943,2949,2952,2954,2958,2961,2962,2965,2969,2971,2975,2985,2988,2993,2994,3000],
        [11,20,23,25,29,33,35,36,40,44,51,52,53,59,65,67,70,72,78,82,83,87,89,94,96,97,101,117,118,119,122,124,125,134,138,140,142,143,155,156,160,166,170,172,177,181,184,191,195,197,200,208,216,217,218,222,237,239,240,243,244,247,258,259,260,264,266,272,275,276,284,285,286,288,289,296,297,305,313,318,319,325,328,334,338,342,349,351,357,360,367,371,372,373,378,381,382,384,389,395,396,409,410,411,412,417,420,427,434,438,445,453,455,456,460,464,465,469,472,473,474,484,492,494,499,503,504,512,517,518,528,530,532,537,539,542,550,551,557,560,565,566,573,577,581,583,584,588,593,594,595,601,603,609,611,616,627,631,633,651,654,655,660,667,668,669,670,672,678,679,689,690,691,693,695,698,699,704,706,708,710,712,718,721,734,748,752,754,756,758,759,767,770,775,777,780,788,789,794,800,802,810,813,816,818,824,832,833,836,839,841,846,847,857,861,866,873,876,877,878,883,886,889,893,898,901,907,912,915,922,925,926,929,936,937,943,947,948,951,956,958,963,968,973,978,979,983,989,994,1006,1008,1016,1022,1023,1026,1027,1032,1033,1034,1040,1041,1049,1052,1055,1065,1068,1070,1071,1076,1083,1084,1087,1093,1096,1099,1102,1104,1109,1111,1114,1118,1127,1128,1132,1134,1145,1146,1149,1159,1160,1163,1168,1178,1185,1188,1191,1193,1200,1201,1204,1207,1215,1223,1226,1228,1231,1232,1234,1236,1242,1243,1251,1254,1256,1257,1260,1267,1268,1269,1273,1275,1278,1290,1291,1297,1299,1304,1309,1311,1318,1319,1320,1323,1336,1338,1347,1348,1351,1353,1359,1366,1370,1371,1373,1379,1384,1389,1393,1395,1397,1401,1411,1412,1414,1415,1424,1426,1429,1434,1436,1452,1453,1454,1456,1463,1465,1466,1474,1478,1479,1481,1483,1487,1495,1500,1502,1507,1509,1514,1517,1528,1529,1538,1539,1542,1545,1551,1553,1558,1566,1570,1574,1576,1590,1591,1593,1595,1598,1599,1603,1606,1608,1609,1612,1622,1624,1627,1628,1631,1637,1640,1645,1652,1657,1663,1667,1673,1674,1675,1681,1683,1690,1693,1698,1701,1702,1709,1710,1711,1716,1724,1728,1731,1733,1739,1740,1757,1758,1762,1763,1764,1766,1775,1778,1779,1782,1786,1790,1797,1800,1802,1804,1805,1809,1810,1811,1812,1816,1820,1823,1824,1828,1844,1856,1860,1866,1867,1870,1881,1884,1885,1888,1890,1893,1895,1900,1902,1912,1915,1918,1924,1927,1933,1938,1939,1941,1949,1952,1958,1962,1964,1972,1975,1976,1984,1985,1986,1991,1996,2000,2001,2006,2011,2014,2016,2020,2023,2029,2033,2034,2036,2042,2047,2050,2058,2061,2064,2069,2078,2079,2083,2085,2091,2093,2098,2103,2108,2112,2114,2119,2123,2124,2134,2136,2140,2145,2148,2158,2160,2163,2171,2172,2175,2177,2179,2182,2185,2188,2195,2196,2202,2209,2210,2212,2214,2221,2228,2230,2234,2236,2241,2248,2251,2253,2262,2263,2264,2265,2272,2278,2279,2282,2288,2289,2298,2302,2303,2306,2310,2316,2323,2326,2331,2332,2339,2350,2353,2354,2357,2363,2365,2371,2375,2377,2378,2388,2390,2397,2398,2399,2408,2411,2413,2416,2428,2431,2433,2435,2441,2442,2447,2451,2454,2461,2463,2468,2470,2472,2476,2480,2481,2483,2496,2502,2506,2508,2519,2523,2524,2526,2527,2530,2532,2535,2536,2548,2552,2554,2557,2559,2560,2566,2569,2579,2586,2589,2590,2591,2592,2593,2595,2604,2612,2617,2618,2623,2625,2636,2639,2641,2646,2651,2652,2655,2656,2658,2666,2668,2672,2673,2683,2687,2689,2700,2704,2706,2708,2712,2718,2720,2723,2732,2733,2736,2739,2744,2745,2747,2751,2759,2768,2773,2775,2778,2784,2785,2794,2795,2798,2807,2809,2810,2811,2812,2816,2821,2826,2832,2839,2840,2841,2845,2848,2855,2857,2863,2868,2871,2875,2876,2888,2895,2904,2905,2910,2911,2912,2915,2916,2921,2923,2926,2927,2932,2934,2938,2941,2945,2951,2959,2963,2967,2972,2974,2980,2981,2986,2987,2990,2991]
];

    // REMEMBER TO UPDATE THIS
    // REMEMBER TO UPDATE THIS
    // REMEMBER TO UPDATE THIS
    uint256 public TOTAL_SUPPLY = 12;

    constructor(
        address _schAdd
    ) {
        schoolAddress = SchoolYard(_schAdd); // NEED TO ADD THIS IN, IT IS THE OG CONTRACT
    }

    // ** return a list of addresses from tokenIDs ** //
    // ********************************************** //

    function returnAddressOfHolder(uint256[] calldata tokenIds) external view returns (address[] memory) {
        
        address[] memory fetchedAdd = new address[](tokenIds.length);

        for(uint256 i = 0; i < tokenIds.length; i++) {
            fetchedAdd[i] = schoolAddress.ownerOf(tokenIds[i]);
        }
        // string memory tmp2 = schoolAddress.contractURI();
        return fetchedAdd;
    }


    // ** return a list of addresses from tokenIDs ** //
    // ********************************************** //

    function returnTokens(address _owner) external view returns (uint256[] memory) {
        uint256 ownerBalance = schoolAddress.balanceOf(_owner);
        require(ownerBalance > 0, "Owner holds no Alphas");
        uint256 foundTokens = 0;
        uint256[] memory tokens = new uint256[](ownerBalance);

        for(uint256 i = 1; i <= TOTAL_SUPPLY; i++) {
            if(schoolAddress.ownerOf(i) == _owner) {
                tokens[foundTokens] = i;
                foundTokens++;
            }
        }
        return tokens;
    }

    // ** Returns true if owner holds at least 1 of each house ** //
    // ********************************************************** //

    // function fourHouseHolder(address _owner) external view returns (bool) {
    //     uint256 ownerBalance = schoolAddress.balanceOf(_owner);
    //     require(ownerBalance > 3, "Owner doesn't hold 4 Alphas");
    //     bool result = false;
    //     // call returnTokens to get token array
    //     uint256[] memory tokenArr = this.returnTokens(_owner);

    //     for(uint256 i = 0; i < 4; i++) {
    //         result = searchArray(houseNumbers[i], tokenArr);
    //         if(result == false) {
    //             return false;
    //         }
    //     }
        
    //     return true;
    // }

    // function searchArray(uint16[] memory houseArray, uint256[] memory artworks) internal view returns (bool) {
    //     for(uint256 i = 0; i < artworks.length; i++) {
    //         for(uint256 j = 0; j < 750; j++) {
    //             if(houseArray[j] == artworks[i]) {
    //                 return true;
    //             }
    //         }
    //     }
    //     return false;
    // }

    // function verifyMe() external view returns (bool) {
    //     return this.fourHouseHolder(msg.sender);
    // }

    // ** SETTINGS ** //
    // ************** //

    function updateSchoolyard(address addr) external onlyOwner {
        schoolAddress = SchoolYard(addr);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Trees proofs.
 *
 * The proofs can be generated using the JavaScript library
 * https://github.com/miguelmota/merkletreejs[merkletreejs].
 * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
 *
 * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];
            if (computedHash <= proofElement) {
                // Hash(current computed hash + current element of the proof)
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                // Hash(current element of the proof + current computed hash)
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }
        return computedHash;
    }
}