// SPDX-License-Identifier: MIT
/**
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOdc;.              ..;coxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0ko:,.          ...             .';cox0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxl;..          .':ox0XKOxoc;'.             .':dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoc,.           .,cdOKNWMMMMMMMMMWNKOxoc,.           :KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.          .:lx0XWMMMMMMMMMMMMMMMMMMMN0xc'            :KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl.           'lx0XWMMMMMMMMMMMMMMMWXOd:'.         ..    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.               ..;lxOXWMMMMMMNKkl;.         .,cd00;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ,kxo:'.          .,cdOOdc,.         .;lkKNMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMWNKko:'.                   .'cdOXWMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMWNKko:,.          .;lxKNMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMNKOdc,..':dOXWMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMMMMWXXNWMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMMXkddONMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMX:   .oNMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxookKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;.    .;oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl,.           .:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc'       .''.       .,lkXWMMMMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd:.       .;o0NN0d:.        .:d0NMMMMMMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;     .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo;.       .:xKWMMMMMMWXOo;.       .'coxKWMMMMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;        .;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'.       'ckXWMMMMMMMMMMMMMWKxc'.        .;oOXMMMMMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;           .'lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxc.       .,oONMMMMMMMMMMMMMMMMMMMMWN0d:.         'cxKWMMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;     ,,.       .:xXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:       .;d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'.        .kWMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kN0d;        ,0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO:.       .;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOo,.         cNMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kWKd;        .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.            .;o0NMMMMMMMMMMMMMMMMMMMMMNKxc'             :XMMMMMMk.    :XMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .;:.          .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:    .okc'       .,lkXWMMMMMMMMMMMMMWXkl,.        .',.    ;KMMMMW0c     .:lx0NMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;            ..    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMNOl,.       .cxKWMMMMMMMN0d:.        .:ld0NO'    ,KMWKd;.          .'cdOXWMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;         'lOK:    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMN0d;.       .;d0NWKxc'.       .;okXWMMMM0,    .xx:.      .'.         .:okXWMMO.    ,KMMMMMMMMMMMMMMMMMMMMX:      'lONMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxx0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMWKx:.       .,,.       .'cxKWMMMMMMMMK,             ,o0NXko;.         .;lxd.    ,KMMMMMMMMMMMMMMMMMMMMW0c'.,lONMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.   .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMWXkl'            .:d0NWMMMMMMMMMMMX:          'lONMMMMMMWXOd:'.              ,KMMMMMMMMMMMMMMMMMMMMMMWNXWMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl,.          .:d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMNOo,.    .,lkXWMMMMMMMMMMMMMMMNc       .ckNMMMMMMMMMMMMMWN0dc,.          ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc.        ..       .,oONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMW0l',o0WMMMMMMMMMMMMMMMMMMMNl      .:kKWMMMMMMMMMMMMMMMMMMNKkl;.      ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo;.       .;oOXKxc'        'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMNd. .'xWMMMMMMMMMMMMMMMMMMMWo         .;lkKWMMMMMMMMMMMMMMMMMMWXOo:.  .l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'        .:xKWMMMMMMNOo,.       .;d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMM0'    ;KMMMMMMMMMMMMMMMMMMMWd             .;lkKWMMMMMMMMMMMMMMMMN0l.    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0d:.       .,lOXWMMMMMMMMMMMMN0d:.       .,lkXWMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMx.    .:,.        .;lkKWMMMMMMMMMW0o,.      'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.       .:d0NMMMMMMMMMMMMMMMMMMMWXkl'.       .:dKWMMMMMMMMMMMMMMMMMMMMX;    .lXWMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMk.    :XNKxc,.        .;lkKWMMWKd;.      .;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMWKd:.       .'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;.       .;oONMMMMMMMMMMMMMMMMMNc      .:d0NMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMWKx;     ;XMMMMNKxc,.        .;lo:.      .,o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMNOo,.       .;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc.        'cxKWMMMMMMMMMMMMMW0c.       .,lkXWMMMMMMMMMO.    ,KMMMMMMMMMMMMWXkdl,.       cNMMMMMMMMNKxl,.              ,o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO,    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMWKxc'        'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo,.       .;d0NMMMMMMMMMMMMWKxc'.       .:d0NMMMMMMO.    ,KMMMMMMMMWN0d:.          ;xXMMMMMMMMMMMMMNKxl,.       'lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo,.     .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMNOo;.       .,oONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d:.       .,lkXWMMMMMMMMMMMWN0o;.       .'lkXWMMO.    ,KMMMMMWKxc'.            .kMMMMMMMMMMMMMMMMMMMNKx,   'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl'.      .,xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMWXkl'.       .:d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'.       .:xKWMMMMMMMMMMMMWKxc.        .:d0k.    ,KMWXOo;.        .':.    .xMMMMMMMMMMMMMMMMMMMMMO'   .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc'       .;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMN0d:.       .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo;.       .;oONMMMMMMMMMWXk:.           ..     :kd:.           .;oO:    .xMMMMMMMMMMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc.       .;d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMWXOl,.       .;d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc.        'ckKWMMWXxc.       .;'.         ...       ..        ..    .xMMMMMMMMMMMMMMMMMMMMWd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.      .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
Kx:.        'cxXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl,.       .;ddc.       .ckXWNOo;.             'cx0Kkc'           '0MMMMMMMMMMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;     ;xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
.       .;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.              .ckXWMMMMMMWKxc'.     .;oONWMMMMWXkc'.       .cKMMMMMMMMMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
       .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o'             ;OWMMMMMMMMMMMMMN0dc:lkKWMMMMMMMMMMMNkl,        lWMMMMMMMMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
        .'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo,.                'cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo;.          cNMMMMMMMMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
            .:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'             .,.       'lONMMMMMMMMMMMMMMMMMMMMMWXkl'.             .cxKNMMMMMMMMMMMMMMMWd     lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .od:.       .,lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc.       .;ol.    ,0Xx:.       'lONMMMMMMMMMMMMMMMWKxc.        .,l;        .,lkKWMMMMMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMWXkc'        .cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd:.       .:dKWMO.    ,KMMWKx:.       ,o0NMMMMMMMMMN0d;.       .;dk0NWd.           .;lkXWMMMMMMMWd.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMWNOo;.       .;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;.       .cxKWMMMMO.    ,KMMMMMWKd;.      .,o0NMMMNOo,.       .cxKWMMMMWd.    .,.        .;oOXWMMMWd.    lNMMMMWNWWMMMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMMMWKx:.       .'lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl,.       'ckXWMMMMMMM0'    ,KMMMMMMMMWKd;.      .,oko'       .'lkXWMMMMMMMWd.    cXKkl,.        .:d0NWd.    lNMWXd:',c0WMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMMMMMMWXkl,.       .:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc'       .,oONMMMMMMMMMMMO.    ,KMMMMMMMMMMMW0d;.             .;oONMMMMMMMMMMMMd.    cNMMMK;           .':,     lX0l.     :XMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMMMMMMMMMMN0d:.       .,lONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx:.       .;d0NMMMMMMMMMMMMMMO'    ,KMMMMMMMMMMMMMMW0o,.       .:d0WMMMMMMMMMMMMMMMd.    cNMMMX;     ''             .,.       ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMMNXXNMMMMMMMWKxc'        'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.       .:xKWMMMMMMMMWNXXWMMMMO.    ,KMMMMMMMMMMMMMMMMMN0c.    'OWMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kNOd:.                   ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMWx,..,cxKWMMMMMMWNOo,.       .;o0NMMMMMMMMMMMMMMMMMMMNOo,.       'ckXWMMMMMMMMN0d:...c0MMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMWXOo;.         .     ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'      .;oOXWMMMMMMWKx:.       .'lkXWMMMMMMMMMMMWXkl'       .'lkXWMMMMMMMWXkl,.      lNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMWXkl;.  .;xx.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'          .:d0NMMMMMMWXkl,.       .:dKNMMMMMWXxc.       .,oONMMMMMMMMN0d:.          cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMWKOOKWMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'             .,lkKWMMMMMMN0d;.       .,oOX0d:.       .;d0WMMMMMMMWXkl,.             cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    'xxc'        .;oOXWMMMMMWKxc'        ..       .:xKWMMMMMMMN0d:.        'cxl.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMWNOo;.        ':d0NMMMMMWNOo;.          'ckXWMMMMMMWXkl,.       .;oONMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMWKkl,.       .,lkXWMMMMMNKx,     .lONMMMMMMMN0d:.        'cxKWMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMN0d:.        .cKMMMMMMMk.    ;XMMMMMMXkl,.       .;oONMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMWXOo;.      lWMMMMMMk.    :XMMMMMK;       .'cxKWMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMWK:     lNMMMMMMk.    :XMMMMMd.    .;oONWMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMMWl     oWMMMMMMk.    :XMMMMWo     lNMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc;;l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMMNl    .dWMMMMMMk.    :XMMMMWl     oWMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.     ;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMMNc    .xMMMMMMMk.    :XMMMMNc    .xMMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMMMMWXkl'.       .dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMMX:    .kMMMMMMMk.    :XMMMMN:    .xMMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMMMMN0d:.       .'lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    ,KMMMMMMMMMMMMMMMMMK;    .OMMMMMMMk.    :XMMMMX;    .kMMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .kMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMX;    .kMMMMMMMMMMMMMMMMMMNOl,.       .;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'    '0MMMMMMMMMMMMMMMMMK,    '0MMMMMMMK:   .dWMMMMK,    .OMMMMMMMMMMMMMMMMMMMMx.    cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX;    .xWMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMN0l.    .kMMMMMMMMMMMMMMMMMK:        'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMM0'     'ckXWMMMMMMMMMMMMM0'    '0MMMMMMMMNOxxKWMMMMM0'    '0MMMMMMMMMMMMMMMMMWXO:     cNMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMX:     .:d0NMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMWXkl'.      ,0MMMMMMMMMMMMMMMMMO'       .oKWMMMMMMMMMMMMMMWKkxkKWMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMNo.       .:d0NMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMM0'    ,KMMMMMMMMMMMMMMNOd:'       lWMMO.    ,KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMWx.       .'cxKWMMMMMMMMMMO.    ,KMMMMMMMMMMMWKx:.       .,oKWMMMMMMMMMMMMMMMMMWOc.       .:xXWMMMMMMMMNOo;.   .;oOXWMMMMMMMMMMMMMMMMMM
   .OMMMMMMW0d:.       .,lkXWMMMMMMk.    ;XMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMWNOd:.         'lKMMM0'    ;KMMMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMMWKxc'.       .;oOXWMMMMMMO.    ,KMMMMMMMMN0o;.       .;d0NMMMMMMMMWXkddONMMMMMMMWXkc.       .:xXWMWKxc'           'cxKWMMMMMMMMMMMMMMM
   .OMMMMMMMMMWXkl'.       .:d0NMMMx.    :XMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMWXOd:'         .:dONWMMMMXc    .o0NMMMMMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    lNMMMMMMMWN0d;.        .:d0NMMMO.    ,KMMMMWXkl'.       'cxKWMMMMMMMMNOd:.    cXMMMMMMMMMWXkc.       .:c,.       ...       .;oONWMMMMMMMMMMM
   .OMMMMMMMMMMMMMN0d;.       .,lkXd.    cNMMMMMMMMMMMMMMMMMMMx.    :NMWXOd:.         ':dONWMMMMMWXxc.      .,oOXWMMMMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMWXkl,.       .'lxKk.    ,KMWKx:.       .,lOXWMMMMMMMWKxc'.       cXMMMMMMMMMMMMWXkc.             .:d0X0d:.        'cxKWMMMMMMMM
   .OMMMMMMMMMMMMMMMMWKxc'        ..     lWMMMMMMMMMMMMMMMMMMWd.    ;kd:.         .:dONWMMMMMMWKx:.             .cxKWMMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMNKxc'        ..     'do;.       .;d0NMMMMMMMWXkl,.       .'ckXMMMMMMMMMMMMMMMMWXkc.      .,oOXWMMMMMWXkl,.       .;o0NMMMMM
   .OMMMMMMMMMMMMMMMMMMMMNOo;.           oWMMMMMMMMMMMMMMMMMMWo               ':dOXWMMMMMMMWKd;.       .:c;.       .;oOXWMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMWNOo;.                    'cxKWMMMMMMMMXd:.        .:d0NMMMMMMMMMMMMMMMMMMMMMMWXkl;;cxKWMMMMMMMMMMMMMN0d:.       .'lkXWM
   .OMMMMMMMMMMMMMMMMMMMMMMMWKxc'       .dWMMMMMMMMMMMMMMMMMMWl           ':dONWMMMMMMMMMMMK;       'ckXWMWKx:.        'cxKWMMMK;    :XMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMWXkl,.            .,lOXWMMMMMMMMMMX:        .lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMWXkl'.       .:d
   .OMMMMMMMMMMMMMMMMMMMMMMMMMMWNOo,.   ;KMMMMMMMNOlclONMMMMMWo       .:d0NWMMMMMMMMMMMMMMMXl.  .,lONWMMMMMMMWXOl,.       .;oONW0o::dKMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.      .;d0NMMMMMMMMMMMMMMNl.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.
   .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkxONMMMMMMMMx.   .xWMMMMMKl'.':dOXWMMMMMMMMMMMMMMMMMMMMN0xx0NMMMMMMMMMMMMMMMW0d:.        'cxKWMMMMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxxxxkKWMMMMMMMMMWMMMMMMMMNOo,.       .;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd'
   .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     oWMMMMMMWNXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.       .;xNMMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx:;cxKWMMMMMMMNKx:.        'cxKWMMMMMMMMMMMMNKKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOo,.       .;
   .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.      .dWMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMWo     .:xXWMMMMMMMWXOl,.       .;oONWMMMMMNkl'..,xNMMMMMMMMMMMMMMMMMMMMMMMMWKxc'        'cxKW
   .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.       cNMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKo;;cd0WMMMMMWO,       .:xXWMMMMMMMMW0d:.       .'ckKXkl'      ;XMMMMMMMMMMMMMMMMMMMMMMNx;.       .,oOXWMMM
   .OMMMMMMMNOdox0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     oWMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.          cNMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl     .,oONWMMMXkc'       .dNMMMMMMMMMMWXkl,.       ..       .:OWMMMMMMMMMMMMMMMMMMMMMMk.      .:d0NMMMMMMM
   .OMMMMMMWd.   .,lkKWMMMMMMMMMMMMMMMMMMMMMMMMMWo     oWMMWKx:,':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo;.        .     :XMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWl         'cxKWMMWXkc.     ;OOOKNMMMMMMMMMMN0d:.            :0WMMMMMMMMMMMMMMMMMWKOOXWMKc. .,lkXWMMMMMMMMMM
   .OMMMMMMX:        .;oONWMMMMMMMMMMMMMMMMMMMMMWo     oNKx:.     ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xc'        .:oOd.    ;XMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.           .;d0NMMWXkl;;c:.  .,lkXWMMMMMMMMMWXkl'.        .,oONMMMMMMMMMMMMW0d;.  .xWMWX0KNMMMMMMMMMMMMMM
   .OMMMMMMX;            'cxKWMMMMMMMMMMMMMMMMMMWo     ';.       'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.       .,lkXWMMO.    ;XMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,     ..       .,lOXWMMWWNl       .;oONMMMMMMMMMMN0xdo,.      .,lONMMMMMMW0d;.      cNMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:     ',.       .,lkXWMMMMMMMMMMMMMMWo            'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.        .:d0NMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMMd.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWl     lKkl'.       .cxKWMMXd;.       .'cxKWMMMMMMMMMMMN0o,.       'ckXN0d;.      .,dKMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kN0d:.        .:d0NMMMMMMMMMMMWo         'lkXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.       .;oOXWMMMMMMMMMO.    ,KMMMMMMMMMMMMMMMMMMMWd.    cNMMMMMMMMMMMMMMMMMMMMMWNNXK00Okxd:     ;XMMNOo;.       .;o0NWWKxc'.       .;oOXWMMMMMMMMMMW0d;.       .'.      .,oONMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMWXOo,.       .,ckKWMMMMMMMWd.       .l0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo;.       .'cxKWMMMMMMMMMMMMM0'    ,0MMMMMMMMMMMMMMMMWN0d'     lNMMMMMMMMMMMMMMMMMMNx:;'....           .OMMMMMWKx:.       .'lkXWMN0d:.        .:d0NMMMMMMMMMMWKd:.          .,o0NMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMWKxc'        .lXMMMMMMMXo'.       .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.        .;dONMMMMMMMMMMMMMMMMM0'    '0MMMMMMMMMMMMMNOoc,.      .xWMMMMMMMMMMMMMMMMMWd.                   oWMMMMMMMWXkl,.       .:dKWMWXkl,.       .,lkXWMMMMMMMMMWXx:.    .,o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMWNOo;.     .xMMMMMMMMMN0d:.        .:oONMMMMMMMMMMMMMMMMMMWXkl,.       .,lkXWMMMMMMMMMMMMMMMMMMMM0'    '0MMMMMMMMMWXkl'         'lOWMMMMMMMMWX00NWMMMMMO,           ,lc.    lNMMMMMMMMMMMN0d;.       .;oONMMWKxc'        .:kNMMMMMMMMMMWXkold0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMWK;    .dWMMMMMMMMMMMWXkl;.       .;OWMMMMMMMMMMMMMN0d:.        .:d0NMMMMMMMMMMMMMMMMMMMMMMMMK,    .OMMMMMMWKx:.        .,oONWMMMMMMMN0d;. .'ckXWMMMNOo,.       .;lc,,;oKMMMMMMMMMMMMMMMWKxc'        'ckXWMWNOo;.      .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMMNc    .dWMMMMMMMMMMMMMMMWKxc'.     oWMMMMMMMMMWKxc'.       .;oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMK,    .OMMMN0d;.       .,:d0NMMMMMMMMN0o,.        .:xKWMMMW0d:.       .'cxXWMMMMMMMMMMMMMMMMMMWXOo,.       .:d0NMMWKxc'...lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMMNc    .dWMMMMMMMMMMMMMMMMMMMN0d:;:dXMMMMMMMWKo;.       .'cxKWMMMMMMMMMMMMMMMMWKkolo0WMMMMMMMX;    .kNOl,.       .cxKNWMMMMMMMMNOl,.              .;d0NMMMWXkl,.       .:d0NMMMMMMMMMMMMMMMMMMMW0d:.       .,o0WMMMNK0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMM0,       .:d0NMMMMMMMMMMMMMMMMWXOo;.    .kMMMMMMMX;     ''       .,lkXWMMMMMMMMWXkl'       .;okxc'       .,lONMMMMN0d;.       .,oOXWMMMMMMMMMMMMMMMMMMWXkc'.      'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    .ckXWMMMMMMMMMMMMMMMWNOd:.         lWMMMMMMX:           .;o0NMMMMMMMMMMWOc.       .;d0WMMMWNOl,.       'ckXWMMMWKxc'        .cxKWMMMMMMMMMMMMMMMMMMMNOo;.   :KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .kMMMMMMMMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMMMMMN0xc'.            cNMMMMMMNc        .:xKWMMMMMMMMMMMMMk.      .;dKWMMMMMMMMMMN0o;.       .cxKWMMMWNOo;.       .;oONMMMMMMMMMMMMMMMMMMMWKkxONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:    .dWMMMMMMMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMWKkl,.       .'c:.    :XMMMMMMNc     'lkXWMMMMMMMMMMMMMMMMK:.     .;d0NMMMMMMMMMMMMMWKd:.       .;d0NMMMMWKx:.       .'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMX:     .;d0NMMMMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMW0o;.        .:d0NMO.    ;KMMMMMMNc    .dMMMMMMMMNOdokXWMMMMMMNO:       .,oONMMMMMMMMMMMMMWKxc.       .,oONMMMMWXkl,.       .:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMWk'       .,oONMMMMMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMWd.       .;oOXWMMMM0'    '0MMMMMMNl     dWMMMMMMNl    .:dk0NMMMMNkc'        'cxKWMMMMMMMMMMMMWXkl'.      .'lkXWMMMMN0d:.       .,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .OMMMMMMMWXkl'.       'ckXWMMMMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;     'lkKWMMMMMMMMK,    .OMMMMMMWl     oWMMMMMMNl        .,oOXMMMWNOo,.       .;d0NMMMMMMMMMMMMMNOo,.       .cxXWMMMMWXkc'.     .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .xNMMMMMMMMMMNOo;.       .:xKWMNc    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMMMX;    .kMMMMMMWo     oWMMMMMMMNkc'.        'cxKWMMMW0d:.       .,lkXWMMMMMMMMMMMMN0d;.       .:dKWMMMMMNOo;...:0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
    .,oONMMMMMMMMMMW0d:.       .;ok:    .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMMMN:    .xMMMMMMWo     lWMMMMMMMMMMNOo;.        .:d0NMMMWXkl'.       .:xKWMMMMMMMMMMMMWKx:.       .;dXMMMMMMWX0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
        'lkXWMMMMMMMMMWXkc'             .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMMMNc    .dWMMMMMWd     lNMMMMMMMMMMMMMW0kd:.       .,lONWMMMN0o;.       .;oONMMMMMMMMMMMMWXk:.       :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
Oo;.       .cxKWMMMMMMMMMWXOl,.         .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMMMWo     oWMMMMMWd.    .cxKWMMMMMMMMMMMMMMWXkl'        'cxKWMMMWKxc.       .'lkXWMMMMMMMMNOl'       .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMWKd:.       .:dKWMMMMMMMMMMN0d;.      .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMMMWd.    cNMMMMMMx.       .;d0NMMMMMMMMMMMMMMMNO:         .;d0NMMMWXOl,.       .:d0WMWXkl'       .,o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMWKxc.       .;o0NMMMMMMMMMMWKx:.  .cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMMMMMN0o'     :NMMMMMMx.          .,oONMMMMMMMMMMMNkc.            .,oONMMMMN0d:.       .,cc.       .;d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMWXkl'       .,lONWMMMMMMMMMWX0O0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMMMMMWKxc'.      .oWMMMMMMk.    ...       'ckXWMMMMW0o'       ,lc'.       'cxKWMMMWKxc'             .:dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMNOo,.       'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .kMMWNOo;.       .'lONMMMMMMMk.    ;00o;.       .:x0Kx;.      .ckNMMNOo;.       .:d0NMMMMNOo;.      .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMN0d;.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;    .xKxc.        .:d0NMMMMMMMMMMk.    ;XMMWKd:.       ..      .;xXWMMMMMMMWKx:.       .,oONWMMMWKxc;;ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMWKd:.       .;d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;     ..       .,lkXWMMMMMMMMMMMMNd.    ;KMMMMMWXxc'           ,kNMMMMMMMMMMMMMWXkl'        'lKMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMWXkc.       .,oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX;           .:d0NMMMMMMMMMMMMWXOl,.     ;XMMMMMMMMMXOl,.        'ckXWMMMMMMMMMMMMMMNOo;.      dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMWXkl'.      .'lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMX:       .,lOXWMMMMMMMMMMMMWXkc'       .;OWMMMMMMMMMMMMNOoc;.       .:xKWMMMMMMMMMMMMMMWKx:'..c0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo,.       'cxXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMWx.  .'cxKWMMMMMMMMMMMMMWKx:.       .;o0NMMMMMMMMMMMMMMMMMMWKd:.       .;d0NMMMMMMMMMMMMMMWNXXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d;.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMWXOk0NWMMMMMMMMMMMMMN0o;.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMWXxc'       .,oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx:.       .;d0NMMMMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMMMMMMMMMMMMMMWXOl,.       'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXOl,.      .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc'       .,oONMMMMMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMMMMMMMMMMMWXkc'       .,lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOl,.       'lkXWMMMMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMMMMMMMMWKd:.       .;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxookNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;.       .cxKWMMMMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMMMMMN0o;.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d:.       .:dKWMMMMMMMMMMMMMk.    ;XMMMMMMMMMMMWXOl,.       'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc.       .;o0NMMMMMMMMMMk.    ;XMMMMMMMMWXkc'       .,lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'       .,lONMMMMMMMk.    ;XMMMMMWKd:.       .;o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo,.       'ckXWMMMk.    ;XMMN0o;.       .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.       .:xKWk.    ;0Ol,.       'ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd:.       .;;.    ..       .,lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXxc.                  .;d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl'.           .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXd'        .l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
**/
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @title Creature
 * Creature - a contract for my non-fungible creatures.
 */
contract Gente is ERC721 {

    using Counters for Counters.Counter;

    Counters.Counter private currentTokenId;

    /// @dev Base token URI used as a prefix by tokenURI().
    string public baseTokenURI;

    constructor() ERC721("8bit Gente", "GENTE")
    {
        baseTokenURI = "";
    }


    function mintTo(address recipient) public returns (uint256) {
        currentTokenId.increment();
        uint256 newItemId = currentTokenId.current();
        _safeMint(recipient, newItemId);
        return newItemId;
    }


    /// @dev Returns an URI for a given token ID
    function _baseURI() internal view virtual override returns (string memory) {
        bytes memory tempEmptyStringTest = bytes(baseTokenURI);
        if (tempEmptyStringTest.length == 0) {
            return "https://www.main-bvxea6i-telwwy7z25xi4.us-4.platformsh.site/collection/1/nft/";
        }
        else {
            return baseTokenURI;
        }
    }

    /// @dev Sets the base token URI prefix.
    function setBaseTokenURI(string memory _baseTokenURI) public {
        baseTokenURI = _baseTokenURI;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}