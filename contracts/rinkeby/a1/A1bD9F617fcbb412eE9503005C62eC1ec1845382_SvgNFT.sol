// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "base64-sol/base64.sol";
import "./libraries/Addr.sol";
import "hardhat/console.sol";

contract SvgNFT is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {
    constructor() ERC721("SVGNFT", "SVG") {}

    struct SVGParam {
        uint256 tokenId;
        string author;
        string title;
        string date;
        string fileHash;
    }

    mapping(uint256 => SVGParam) private svgs;

    function mint(
        address to,
        string memory author,
        string memory title,
        string memory date,
        string memory fileHash
    ) public returns (uint256) {
        uint256 tokenId = totalSupply();
        _safeMint(to, tokenId);

        svgs[tokenId] = SVGParam(tokenId, author, title, date, fileHash);

        return tokenId;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        require(_exists(tokenId));
        SVGParam memory svg = svgs[tokenId];

        string memory svgFormat = generateSVG3(svg, tokenId);
        // string memory tokenUriFormat = generateTokenUri(svgFormat);
        string memory image = Base64.encode(bytes(svgFormat));
        return string(
            abi.encodePacked(
                "data:application/json;base64,",
                Base64.encode(
                    bytes(
                        abi.encodePacked(
                            '{"image": "',
                            "data:image/svg+xml;base64,",
                            image,
                            '"}'
                        )
                    )
                )
            )
        );
    }

    function generateSVG(SVGParam memory svnParam, uint256 tokenId)
        internal
        pure
        returns (string memory svg)
    {
        string memory author = svnParam.author;
        string memory title = svnParam.title;
        string memory date = svnParam.date;
        string memory fileHash = svnParam.fileHash;

        return
            string(
                abi.encodePacked(
                    '<svg id="l1" data-name="l_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 595.28 841.89">',
                    "<defs>",
                    "<style>",
                    ".c1 {fill: #fff;}",
                    ".c2 {font-size: 14px;}",
                    ".c2,.c3,.c4,.c5,.c6 {fill: #040000;}",
                    ".c2,.c3,.c5 {font-family: PingFangSC-Regular-GBpc-EUC-H, PingFang SC;}",
                    ".c3 {font-size: 7px;}",
                    ".c4 {font-size: 28px;font-family: PingFangSC-Medium-GBpc-EUC-H, PingFang SC;}",
                    ".c5 {font-size: 14.7px;}",
                    ".c6 {font-size: 15.47px;font-family: PingFangSC-Semibold-GBpc-EUC-H, PingFang SC;}",
                    "</style>",
                    "</defs>",
                    "<title>",
                    unicode"&#30331;&#38142;&#31038;&#21306;&#32;&#8212;&#32;&#20013;&#12098;&#21306;&#22359;&#38142;&#25216;&#26415;&#31038;&#21306;",
                    "</title>",
                    '<path class="c1" d="M595.28,841.89H0V0H595.28Z" />',
                    '<text class="c2" transform="translate(194.98 695.62)">',
                    unicode"&#30331;&#38142;&#31038;&#21306;&#32;&#8212;&#32;&#20013;&#12098;&#21306;&#22359;&#38142;&#25216;&#26415;&#31038;&#21306;",
                    "</text>",
                    '<text class="c3" transform="translate(194.15 712.44)">Upchain Commutity-Chinese blockchain technology community</text>',
                    '<text class="c4" transform="translate(185.64 298.41)">',
                    unicode"&#21407;&#21019;&#20316;&#21697;&#23384;&#35777;&#35777;&#20070;",
                    "</text>",
                    '<text class="c5" transform="translate(117.43 450.13)">',
                    unicode"&#25991;&#31456;&#39064;&#30446;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 449.55)">',
                    title,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 482.85)">Token ID',
                    unicode"&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 482.42)">',
                    Strings.toString(tokenId),
                    "</text>",
                    '<text class="c5" transform="translate(117.43 515.57)">',
                    unicode"&#23384;&#35777;&#21704;&#24076;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 515.28)">',
                    fileHash,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 548.29)">',
                    unicode"&#25991;&#31456;&#20316;&#32773;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 548.15)">',
                    author,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 581.02)">',
                    unicode"&#23384;&#35777;&#26102;&#38388;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 581.02)">',
                    date,
                    "</text>",
                    '<text class="c6" transform="translate(168.52 326.54)">CERTIFICATE OF ORIGINAL WORK</text>',
                    '<image href="https://img.learnblockchain.cn/img/ucbackground.svg" height="841.89" width="595.28" x="0" y="0" />',
                    "</svg>"
                )
            );
    }

    function generateSVG2(SVGParam memory svnParam, uint256 tokenId)
        internal
        pure
        returns (string memory svg)
    {
        string memory author = svnParam.author;
        string memory title = svnParam.title;
        string memory date = svnParam.date;
        string memory fileHash = svnParam.fileHash;

        return
            string(
                abi.encodePacked(
                    '<svg id="l1" data-name="l_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 595.28 841.89">',
                    "<defs>",
                    "<style>",
                    ".c1 {fill: #fff;}",
                    ".c2 {font-size: 14px;}",
                    ".c2,.c3,.c4,.c5,.c6 {fill: #040000;}",
                    ".c2,.c3,.c5 {font-family: PingFangSC-Regular-GBpc-EUC-H, PingFang SC;}",
                    ".c3 {font-size: 7px;}",
                    ".c4 {font-size: 28px;font-family: PingFangSC-Medium-GBpc-EUC-H, PingFang SC;}",
                    ".c5 {font-size: 14.7px;}",
                    ".c6 {font-size: 15.47px;font-family: PingFangSC-Semibold-GBpc-EUC-H, PingFang SC;}",
                    "</style>",
                    "</defs>",
                    "<title>",
                    unicode"&#30331;&#38142;&#31038;&#21306;&#32;&#8212;&#32;&#20013;&#12098;&#21306;&#22359;&#38142;&#25216;&#26415;&#31038;&#21306;",
                    "</title>",
                    '<path class="c1" d="M595.28,841.89H0V0H595.28Z" />',
                    '<text class="c2" transform="translate(194.98 695.62)">',
                    unicode"&#30331;&#38142;&#31038;&#21306;&#32;&#8212;&#32;&#20013;&#12098;&#21306;&#22359;&#38142;&#25216;&#26415;&#31038;&#21306;",
                    "</text>",
                    '<text class="c3" transform="translate(194.15 712.44)">Upchain Commutity-Chinese blockchain technology community</text>',
                    '<text class="c4" transform="translate(185.64 298.41)">',
                    unicode"&#21407;&#21019;&#20316;&#21697;&#23384;&#35777;&#35777;&#20070;",
                    "</text>",
                    '<text class="c5" transform="translate(117.43 450.13)">',
                    unicode"&#25991;&#31456;&#39064;&#30446;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 449.55)">',
                    title,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 482.85)">Token ID',
                    unicode"&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 482.42)">',
                    Strings.toString(tokenId),
                    "</text>",
                    '<text class="c5" transform="translate(117.43 515.57)">',
                    unicode"&#23384;&#35777;&#21704;&#24076;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 515.28)">',
                    fileHash,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 548.29)">',
                    unicode"&#25991;&#31456;&#20316;&#32773;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 548.15)">',
                    author,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 581.02)">',
                    unicode"&#23384;&#35777;&#26102;&#38388;&#65306;",
                    "</text>",
                    '<text class="c5" transform="translate(203.07 581.02)">',
                    date,
                    "</text>",
                    '<text class="c6" transform="translate(168.52 326.54)">CERTIFICATE OF ORIGINAL WORK</text>',
                        '<svg id="bg1" data-name="bg1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"',
                            'viewBox="0 0 595.28 841.89">',
                            '<defs>',
                            '<style>',
                            '.cls-1 {fill: #fff;}',
                            '.cls-2 {fill: #c9a063;}',
                            '.cls-3 {fill: #d29f55;}',
                            '.cls-4,',
                            '.cls-6 {fill: #ca8a25;}',
                            '.cls-4 {stroke: #f7f8f8;stroke-miterlimit: 10;}',
                            '.cls-5 {font-size: 6.84px;font-family: HYk2gj, HYLingXinJ;}',
                            '.cls-5,',
                            '.cls-7 {fill: #231815;}',
                            '.cls-8 {fill: url(#Gold);}',
                            '.cls-9 {fill: #c19940;}',
                            '</style>',
                            '<linearGradient id="Gold" x1="292.38" y1="78.32" x2="317.09" y2="78.32"',
                            'gradientTransform="matrix(1, -0.01, 0.01, 1, -8.13, 49.96)" gradientUnits="userSpaceOnUse">',
                            '<stop offset="0.01" stop-color="#e6bb38" />',
                            '<stop offset="0.25" stop-color="#f7f2c7" />',
                            '<stop offset="0.31" stop-color="#efe6b6" />',
                            '<stop offset="0.42" stop-color="#dcc689" />',
                            '<stop offset="0.57" stop-color="#bc9341" />',
                            '<stop offset="0.6" stop-color="#b68a34" />',
                            '<stop offset="0.87" stop-color="#e0cd85" />',
                            '<stop offset="1" stop-color="#f7f2c7" />',
                            '</linearGradient>',
                            '</defs>',
                            '<title>', unicode"登链证书", '</title>',
                            '<path class="cls-2" d="M283.85,206.3c0,1.52,1.34,3,5,3,7.17,0,13.18-4.46,18-4.87,2.63-.22,3.64.56,3.64,1.74s-1,1.51-2.35,1.68a25.53,25.53,0,0,1-4.12-.14,12.78,12.78,0,0,0,4.06.86c2.86,0,3.41-1.62,3.41-2.54s-1.25-2.69-4.36-2.69c-6.89,0-11.68,4.95-17.89,4.95-2.27,0-4.2-.5-4.2-1.76s1.34-1.93,3-1.93a10.73,10.73,0,0,1,3.78,1s-2-1.91-3.58-1.91C285.7,203.67,283.85,204.79,283.85,206.3Z" />',
                            '<path class="cls-2" d="M292.53,207.09a15.27,15.27,0,0,0,4.87-1.79,38.94,38.94,0,0,1,5.21-1.85c-1.46-.17-3.64.11-7.45,1.9s-5.49.79-5.49.79A3.69,3.69,0,0,0,292.53,207.09Z" />',
                            '<path class="cls-2" d="M299.08,207.65a13.35,13.35,0,0,1-2.63.89s1.29.51,4.37-.95c2.26-1.07,4-1.73,4-1.73C303.34,205.75,300.2,207.09,299.08,207.65Z" />',
                            '<path class="cls-2" d="M279.29,207.42a1.91,1.91,0,0,0,1.93,1.31,2.15,2.15,0,1,0,0-4.29,1.91,1.91,0,0,0-1.93,1.31,8.9,8.9,0,0,1-4.63-1.52c-5.87,2.19-49.38,2.35-49.38,2.35s43.51.17,49.38,2.36A8.9,8.9,0,0,1,279.29,207.42Zm2-1.7c1.22,0,1.17.86,1.17.86s.11.87-1.17.87a.88.88,0,0,1-1-.87S280.23,205.72,281.26,205.72Zm-13.1.86s5.33-.88,6.44-1.23c0,0,1.24,1.21,1.6,1.23-.36,0-1.6,1.24-1.6,1.24C273.49,207.47,268.16,206.58,268.16,206.58Z" />',
                            '<path class="cls-2" d="M316,207.42a8.84,8.84,0,0,1,4.62,1.52c5.88-2.19,49.39-2.36,49.39-2.36s-43.51-.16-49.39-2.35a8.84,8.84,0,0,1-4.62,1.52,1.93,1.93,0,0,0-1.93-1.31,2.15,2.15,0,1,0,0,4.29A1.93,1.93,0,0,0,316,207.42Zm4.68-2.07c1.12.35,6.45,1.23,6.45,1.23s-5.33.89-6.45,1.24c0,0-1.24-1.21-1.59-1.24C319.43,206.56,320.67,205.35,320.67,205.35Zm-7.83,1.23s0-.86,1.18-.86c1,0,1,.86,1,.86a.87.87,0,0,1-1,.87C312.74,207.45,312.84,206.58,312.84,206.58Z" />',
                            '<path class="cls-2" d="M43.78,513.44a8.79,8.79,0,0,0,3.71,3,6.9,6.9,0,0,0,7.86-1.33,4.31,4.31,0,0,0-.58-6.55c-1.91-1.49-3.94-1-5,1.22-.6,1.31-.39,1.89.88,2.38a2.05,2.05,0,0,1-2.57.41c-2.26-.86-3.29-2.81-4.36-4.84,2.75-.4,4.39-1.91,4.82-4.28a3.81,3.81,0,0,0-1.88-3.92,2.67,2.67,0,0,0-3,.45,1.89,1.89,0,0,0-.58,2.3c0,.13,0,.26.09.45-1.9-1-2.1-7.68-1.51-10.84a27.88,27.88,0,0,0,3.23,1.4c3.8,1.11,7.2-.66,8.2-4.15.8-2.81-.63-5.37-3.25-5.79a2.87,2.87,0,0,0-3.2,2.19c-.33,1.08-.15,1.31,1.58,2.17a.89.89,0,0,1,.41.55,2.66,2.66,0,0,1-1.28,2.46,4.55,4.55,0,0,1-5.1-1.16,1.92,1.92,0,0,1-.33-1.09,11,11,0,0,1,.19-1.5c.54-5.24,2.51-10.28,2.12-15.71a5.48,5.48,0,0,0,1.17.5,8.49,8.49,0,0,0,2.4.18,1.61,1.61,0,0,0,1.44-1.54,1.59,1.59,0,0,0-.93-1.61.83.83,0,0,0-.69,0,.78.78,0,0,0-.19.65c.11.86-.34,1.56-1.17,1.49a11.23,11.23,0,0,1-2.11-.65c.41-.81.69-1.37,1-1.93a54.41,54.41,0,0,0,4.73-11,14.09,14.09,0,0,0-.87-10.05,6.13,6.13,0,0,0-4.3-3.53,1.27,1.27,0,0,1-.32-.14,14.65,14.65,0,0,0,1-2.07,2.35,2.35,0,0,0-1-2.48,1.84,1.84,0,0,0-2.36.08,5,5,0,0,0-.88,1.54,9.46,9.46,0,0,1-2.48-5.13l.51.27a2.18,2.18,0,0,0,2.61-.36,2.12,2.12,0,0,0,.35-2.61,2.2,2.2,0,0,0-2.24-1.09,2.06,2.06,0,0,0-1.8,2,40.67,40.67,0,0,0,.4,5.73,6.43,6.43,0,0,0,2.83,4.3c-3.75,2.33-4.67,9.28-1.58,11.85-2.69,4.46-1.51,8.55,1.06,12.57-.3.1-.57.18-.82.29a2.78,2.78,0,0,0-1.44,3.85c.19.32.75.76,1,.68.39-.16.65-.65,1-1l-.22-.23h-.78c.3-1.33,1.41-1.64,2.86-.79-.14.27-.28.55-.41.83-.89,2-1.9,4-2.63,6.06a13.84,13.84,0,0,0,.08,10.52,2,2,0,0,1,0,1c-.43,2.83-1,5.65-1.3,8.5a11.79,11.79,0,0,0,1.29,7.43c.87,1.41,1.44,2.92,2.18,4.36A31.75,31.75,0,0,0,43.78,513.44Zm-3.17-46.93a10,10,0,0,1-1.54-7.59,4.91,4.91,0,0,1,2.87-3.52c-.09.51-.16.81-.19,1.11a2.11,2.11,0,0,0,1.54,2.31,2.2,2.2,0,0,0,2.51-1,2.31,2.31,0,0,0-.42-2.78,3.67,3.67,0,0,0-3.84-.88c-.49-1.22-.61-1.26-1.58-.51-.8-.44-.72-1.08-.38-1.77a4,4,0,0,1,5.85-1.29,7,7,0,0,1,2.65,6.36,22.1,22.1,0,0,1-2.52,8c-.67,1.45-1.44,2.87-2.31,4.59A23.35,23.35,0,0,1,40.61,466.51Zm-.46,18.88c-.73-4.62,1-8.69,2.83-12.72l.33.05a16.76,16.76,0,0,1-.24,2.76c-.85,3.33-1.79,6.63-2.69,9.94Z" />',
                            '<path class="cls-2" d="M38.85,337.57a15.36,15.36,0,0,0-.77,6.44c.33,2.78.86,5.54,1.26,8.31a3,3,0,0,1-.15,1.53,13.14,13.14,0,0,0-.72,6.88,29,29,0,0,0,3.36,9.19l.5,1c-1.54.82-2.65.48-2.84-.83h.79l.19-.24c-.33-.34-.62-.86-1-1s-.83.44-1,.8a3.54,3.54,0,0,0-.17,1.74c.22,1.34,1.25,1.94,2.48,2.29-2.61,4-3.75,8.14-1.09,12.55-3,2.7-2.22,9.2,1.51,11.84,0,0,0,.08,0,.09-3.47,2.73-3.32,6.55-3,10.37a2,2,0,0,0,2.22,1.63,2.25,2.25,0,0,0,2-2.14,2,2,0,0,0-1.75-2.13,9.38,9.38,0,0,0-2.11.29,10,10,0,0,1,2.73-5,1.57,1.57,0,0,0,.89,1.76,2,2,0,0,0,2.3-.16,2.26,2.26,0,0,0,.88-2.43,15,15,0,0,0-.95-2.05c3.87-.9,5.2-3.91,5.82-7.46a14.89,14.89,0,0,0-.5-6.92,65.26,65.26,0,0,0-4.91-11c-.18-.35-.35-.71-.56-1.12a13.21,13.21,0,0,1,1.16-.64c1.28-.5,2.09.13,2,1.51,0,.64.36.75.87.54a1.56,1.56,0,0,0,.52-2.58,3.44,3.44,0,0,0-2-.69,11.33,11.33,0,0,0-2.56.65,25.52,25.52,0,0,0,0-3.81c-.68-4.39-1.49-8.76-2.2-13.15a1.89,1.89,0,0,1,.4-1.33c1.08-1.29,2.52-1.43,4.12-1.27a2.36,2.36,0,0,1,2.13,2,1,1,0,0,1-.66,1.31c-.58.26-1.31.89-1.39,1.43a2.87,2.87,0,0,0,2.21,2.73,3.88,3.88,0,0,0,4.4-3,6,6,0,0,0-4.48-7,8.15,8.15,0,0,0-6.31,1.24l-.86.5c-.09-3.16-.43-6.14.45-9.07a15.84,15.84,0,0,1,.95-2l.28.12-.12.43a2,2,0,0,0,1.27,2.67,3,3,0,0,0,4.1-2.22,4.92,4.92,0,0,0-3.31-5.65c-.43-.13-.88-.2-1.51-.33.68-1,1.25-2,1.89-2.84a5,5,0,0,1,3.24-2.13,1.76,1.76,0,0,1,1.77.37c-.4.52-.95.91-1,1.37a3.17,3.17,0,0,0,3.74,3.19,4.37,4.37,0,0,0,2.68-6.4,5.27,5.27,0,0,0-3.09-2.49A7.7,7.7,0,0,0,45.1,327a14.73,14.73,0,0,0-3.5,5c-.71,1.53-1.11,3.21-2.28,4.52A2.73,2.73,0,0,0,38.85,337.57Zm9,45.86a7.69,7.69,0,0,1-1.71,7.25,4,4,0,0,1-6.53-.51c-.37-.69-.55-1.37.33-1.92.94.8,1.16.72,1.52-.5a3.55,3.55,0,0,0,3.48-.54,2.28,2.28,0,0,0,.85-3.06,2.19,2.19,0,0,0-4,1.75c0,.12.07.23.17.58a9.31,9.31,0,0,1-1-.52,5.29,5.29,0,0,1-2.13-4,10.51,10.51,0,0,1,4.31-9.2c.08,0,.19.06.23.13A39.19,39.19,0,0,1,47.88,383.43ZM40.4,356.25c.82,4.46,2.79,8.47,2.93,13C41.19,367.48,39.24,358.91,40.4,356.25Z" />',
                            '<path class="cls-2" d="M39.06,413.67a1.39,1.39,0,0,0-1.5,1.44,1.43,1.43,0,1,0,2.86.05A1.39,1.39,0,0,0,39.06,413.67Z" />',
                            '<path class="cls-2" d="M37.56,426.78a1.43,1.43,0,1,0,2.86,0,1.43,1.43,0,1,0-2.86,0Z" />',
                            '<path class="cls-2" d="M557.18,344a11.66,11.66,0,0,0-1.29-7.43c-.86-1.41-1.43-2.92-2.17-4.36a31.83,31.83,0,0,0-2.23-3.72,8.73,8.73,0,0,0-3.71-3,6.88,6.88,0,0,0-7.85,1.33,4.31,4.31,0,0,0,.57,6.55,3,3,0,0,0,5-1.22c.61-1.31.39-1.89-.88-2.39a2.07,2.07,0,0,1,2.57-.4c2.27.86,3.29,2.81,4.36,4.84-2.74.4-4.39,1.91-4.81,4.28a3.8,3.8,0,0,0,1.87,3.92,2.67,2.67,0,0,0,3-.45,1.89,1.89,0,0,0,.59-2.3c0-.13-.06-.26-.1-.45,1.91,1,2.11,7.68,1.51,10.84a27.15,27.15,0,0,0-3.23-1.4c-3.79-1.11-7.19.66-8.2,4.15-.8,2.81.64,5.37,3.25,5.79a2.86,2.86,0,0,0,3.2-2.19c.34-1.08.16-1.31-1.58-2.17a.92.92,0,0,1-.41-.55,2.7,2.7,0,0,1,1.28-2.46,4.54,4.54,0,0,1,5.1,1.16,1.86,1.86,0,0,1,.34,1.09,12.81,12.81,0,0,1-.19,1.5c-.54,5.24-2.51,10.28-2.12,15.71a6,6,0,0,0-1.17-.5,8.59,8.59,0,0,0-2.41-.18,1.61,1.61,0,0,0-1.43,1.54,1.56,1.56,0,0,0,.93,1.61.83.83,0,0,0,.69,0,.81.81,0,0,0,.18-.65c-.1-.86.35-1.56,1.18-1.49a11.23,11.23,0,0,1,2.11.65l-1,1.93a53.85,53.85,0,0,0-4.73,11,14,14,0,0,0,.87,10.05,6.11,6.11,0,0,0,4.3,3.53,1.46,1.46,0,0,1,.32.14,16,16,0,0,0-1,2.07,2.35,2.35,0,0,0,1,2.48,1.85,1.85,0,0,0,2.37-.08,5,5,0,0,0,.88-1.54,9.45,9.45,0,0,1,2.47,5.13l-.5-.27a2.2,2.2,0,0,0-2.62.36,2.15,2.15,0,0,0-.35,2.61,2.2,2.2,0,0,0,2.24,1.09,2.06,2.06,0,0,0,1.81-2,40.68,40.68,0,0,0-.41-5.73,6.41,6.41,0,0,0-2.82-4.3c3.75-2.33,4.66-9.28,1.58-11.85,2.69-4.46,1.51-8.55-1.07-12.57.3-.1.57-.18.83-.29a2.78,2.78,0,0,0,1.43-3.85c-.19-.32-.74-.76-1-.68-.39.16-.65.65-1,1l.21.23h.79c-.3,1.33-1.42,1.64-2.86.79.13-.27.28-.55.4-.83.89-2,1.9-4,2.64-6.06a13.91,13.91,0,0,0-.08-10.53,1.84,1.84,0,0,1,0-1C556.32,349.63,556.9,346.81,557.18,344Zm-2.51,31.42a10.06,10.06,0,0,1,1.54,7.59,4.93,4.93,0,0,1-2.88,3.52c.09-.51.17-.81.19-1.11a2.11,2.11,0,0,0-1.54-2.31,2.21,2.21,0,0,0-2.51,1,2.31,2.31,0,0,0,.43,2.78,3.67,3.67,0,0,0,3.84.88c.48,1.22.61,1.26,1.58.51.8.44.72,1.08.38,1.77a4,4,0,0,1-5.86,1.29,7,7,0,0,1-2.65-6.36,22.49,22.49,0,0,1,2.52-8c.68-1.45,1.44-2.87,2.32-4.59A24.15,24.15,0,0,1,554.67,375.38Zm-2.38-6.16-.33-.05a16.76,16.76,0,0,1,.25-2.76c.84-3.33,1.78-6.63,2.68-9.94l.24,0C555.85,361.12,554.17,365.19,552.29,369.22Z" />',
                            '<path class="cls-2" d="M556.42,504.32a15.21,15.21,0,0,0,.77-6.44c-.33-2.78-.86-5.54-1.26-8.31a3.16,3.16,0,0,1,.15-1.53,13,13,0,0,0,.72-6.88,28.79,28.79,0,0,0-3.36-9.19c-.17-.32-.33-.65-.49-1,1.54-.82,2.65-.49,2.84.83H555l-.2.24c.34.34.63.86,1,1s.82-.44,1-.8a3.55,3.55,0,0,0,.16-1.74,3,3,0,0,0-2.47-2.29c2.6-4,3.75-8.14,1.08-12.55,3.06-2.7,2.22-9.2-1.5-11.84,0,0,0-.08,0-.09,3.46-2.73,3.32-6.55,3-10.37a2,2,0,0,0-2.23-1.63,2.25,2.25,0,0,0-2,2.14A2.06,2.06,0,0,0,554.6,436a9.54,9.54,0,0,0,2.11-.29,10.06,10.06,0,0,1-2.74,5,1.56,1.56,0,0,0-.88-1.76,2,2,0,0,0-2.3.16,2.24,2.24,0,0,0-.88,2.43,13.87,13.87,0,0,0,1,2.05c-3.88.9-5.2,3.91-5.83,7.46a15,15,0,0,0,.51,6.92,64.47,64.47,0,0,0,4.91,11c.18.35.35.71.55,1.12a11.92,11.92,0,0,1-1.16.64c-1.27.5-2.09-.13-2-1.51,0-.64-.37-.75-.88-.54a1.57,1.57,0,0,0-.52,2.58,3.44,3.44,0,0,0,2.05.69,11.46,11.46,0,0,0,2.56-.65,24.24,24.24,0,0,0,0,3.81c.67,4.39,1.49,8.76,2.19,13.15a1.89,1.89,0,0,1-.39,1.33c-1.09,1.29-2.53,1.43-4.13,1.27a2.38,2.38,0,0,1-2.13-2.05,1,1,0,0,1,.67-1.31c.58-.26,1.31-.89,1.38-1.43a2.85,2.85,0,0,0-2.21-2.73,3.88,3.88,0,0,0-4.4,3,6,6,0,0,0,4.49,7,8.16,8.16,0,0,0,6.31-1.24c.22-.14.45-.27.85-.5.09,3.16.43,6.14-.45,9.07a14.61,14.61,0,0,1-1,2.05l-.27-.12c0-.14.08-.29.11-.43a2,2,0,0,0-1.27-2.67,3,3,0,0,0-4.09,2.22,4.91,4.91,0,0,0,3.3,5.65c.44.13.89.2,1.52.33-.68,1-1.25,2-1.89,2.84a5.08,5.08,0,0,1-3.24,2.13,1.78,1.78,0,0,1-1.78-.37c.4-.52,1-.91,1-1.37a3.16,3.16,0,0,0-3.73-3.19,4.37,4.37,0,0,0-2.69,6.4,5.26,5.26,0,0,0,3.1,2.49,7.68,7.68,0,0,0,7.79-1.84,14.73,14.73,0,0,0,3.5-5c.71-1.53,1.1-3.21,2.27-4.52A2.8,2.8,0,0,0,556.42,504.32Zm-9-45.86a7.71,7.71,0,0,1,1.7-7.25,4,4,0,0,1,6.53.51c.38.69.55,1.37-.33,1.92-.94-.8-1.15-.72-1.52.5a3.56,3.56,0,0,0-3.48.54,2.29,2.29,0,0,0-.85,3.06,2.19,2.19,0,0,0,4-1.75c0-.12-.06-.23-.16-.58a10.06,10.06,0,0,1,1,.52,5.26,5.26,0,0,1,2.13,4.05,10.46,10.46,0,0,1-4.31,9.2c-.07,0-.19-.06-.22-.13A38.56,38.56,0,0,1,547.4,458.46Zm7.48,27.18c-.83-4.46-2.8-8.47-2.94-13C554.09,474.41,556,483,554.88,485.64Z" />',
                            '<path class="cls-2" d="M554.85,426.73a1.44,1.44,0,1,0,2.87,0,1.44,1.44,0,0,0-2.87,0Z" />',
                            '<path class="cls-2" d="M556.32,413.67a1.38,1.38,0,0,0-1.47,1.47,1.44,1.44,0,0,0,2.87,0A1.38,1.38,0,0,0,556.32,413.67Z" />',
                            '<path class="cls-2" d="M46.24,47.75a.5.5,0,0,0-.64-.19,4.22,4.22,0,0,1-2.17.22,2.48,2.48,0,0,0,2.32.57C46.14,48.17,46.33,48,46.24,47.75Z" />',
                            '<path class="cls-2" d="M44.11,43.58c.13-.14.06-.48-.33-.89a6.07,6.07,0,0,0-1.51-1,5.58,5.58,0,0,0,.95,1.52C43.62,43.64,44,43.72,44.11,43.58Z" />',
                            '<path class="cls-2" d="M48.27,45.74c.2.09.43-.09.61-.48a2.5,2.5,0,0,0-.53-2.33,4.38,4.38,0,0,1-.25,2.17A.49.49,0,0,0,48.27,45.74Z" />',
                            '<path class="cls-2" d="M50.38,57.6h0a7.31,7.31,0,0,1-2.7.17c-.26,0-.5,0-.79,0h-.35a1.64,1.64,0,0,0-1.19.53.62.62,0,0,0,.16.88C46.28,59.77,48.35,59.67,50.38,57.6Z" />',
                            '<path class="cls-2" d="M50,51.9a8.84,8.84,0,0,1-3.54.28c.61.41,2.53,1.57,3.77,1,.65-.29.74-.71.63-1A.64.64,0,0,0,50,51.9Z" />',
                            '<path class="cls-2" d="M50.72,60.9c.1.16.28.31.45.26a.13.13,0,0,0,.08,0,1.05,1.05,0,0,0,.34-.78,2,2,0,0,0,0-.35c-.29.28-.59.56-.9.81v0Z" />',
                            '<path class="cls-2" d="M61.16,51.19a.21.21,0,0,0,0-.07.44.44,0,0,0-.26-.45,1.08,1.08,0,0,0-.29-.13q-.42.51-.9,1c.23,0,.43,0,.64,0A1.06,1.06,0,0,0,61.16,51.19Z" />',
                            '<path class="cls-2" d="M59.42,45.34a.79.79,0,0,0-.66-.49l-.16,0c-.79.21-.69,1.56-.61,2.54,0,.2,0,.39,0,.56a8.11,8.11,0,0,1-.29,2.29C59.82,48.29,59.88,46.21,59.42,45.34Z" />',
                            '<path class="cls-2" d="M52.71,52.24A47.86,47.86,0,0,0,49,48.07c-1.71-1.74-3.33-3.14-4-3.68a50.81,50.81,0,0,0,3.6,4.07A53,53,0,0,0,52.71,52.24Z" />',
                            '<path class="cls-2" d="M52.64,50.4c.27.13.69,0,1-.61.59-1.24-.54-3.17-.94-3.79a8.82,8.82,0,0,1-.33,3.54A.63.63,0,0,0,52.64,50.4Z" />',
                            '<path class="cls-2" d="M56.69,63.87c.2-.78.82-1.39.7-2.4.34,2.21,1.59,2.52,2,3.69.23-.91,1-1.14.78-2.58.16.19.56,1.1,1.2,1.45,1.37.75,2.16.49,3.42,1.13l0,0,0,0a0,0,0,0,1,0,0h0a0,0,0,0,1,0,0l0-.05c-.66-1.26-.42-2-1.19-3.41a4,4,0,0,0-1.46-1.18c1.43.23,1.66-.58,2.56-.83-1.17-.43-1.51-1.67-3.71-2,1,.11,1.62-.53,2.38-.72-1.24-.68-1.56-1.63-2.75-2.29.82,1.45-.88,3.74-2.05,3.74-.07,0,2.31,2.65,2.41,2.8-.18-.12-2.85-2.42-2.85-2.36,0,1.23-2,2.82-4.08,1.77C54.81,62.28,55.93,62.48,56.69,63.87Z" />',
                            '<path class="cls-2" d="M39.71,62.52a11.27,11.27,0,0,0,8.57-.32l.09,0v.1a7.67,7.67,0,0,0,.34,3.22A7,7,0,0,1,49,68.85c.58-.31,3.54-2,4.16-4.43a6.31,6.31,0,0,0-.17-2.16,22.3,22.3,0,0,1-.3-2.36l-.18-.12a14.71,14.71,0,0,0-1.53-1l-.08-.05.08,0c.54-.31,1-.61,1.34-.87a12,12,0,0,1,1.19-.76A6.44,6.44,0,0,1,53,55a9.87,9.87,0,0,0-.3-1.92l0-.09.09,0a8.59,8.59,0,0,0,2,.32,6.07,6.07,0,0,1,1.91.37,20.8,20.8,0,0,0,1.74-2.52l0-.09.05.09a13.54,13.54,0,0,0,.92,1.46,18.9,18.9,0,0,1,3.48.49c2.45.59,4.8-2.13,5.83-4.16a6.59,6.59,0,0,1-3.36-.26l-.38-.1a7.82,7.82,0,0,0-3-.22H62l0-.1a11.48,11.48,0,0,0,.77-8.89c0-.12-.07-.25-.11-.38a10.46,10.46,0,0,1-.41-5.33c-.75.39-5.39,3-6.36,6.73A5,5,0,0,0,56,43.11c.1.48.22,1,.33,1.72l.06.33-.16-.3a9.38,9.38,0,0,0-2-2.43,9.86,9.86,0,0,1-2-2.38,8.77,8.77,0,0,1-.53,1.23A4.89,4.89,0,0,0,51,44.1l-.11,0a8,8,0,0,0-2.18-4.56,6.8,6.8,0,0,1-1.25-1.84A5,5,0,0,1,46.8,39a3.58,3.58,0,0,0-.73,3.09l0,.23L46,42.11c-.06-.08-.14-.22-.25-.4a5.59,5.59,0,0,0-1.8-2.17,23.34,23.34,0,0,0-3.64-1.3A16.1,16.1,0,0,1,38,37.45c.25.87,1.56,5.26,2,6a5.63,5.63,0,0,0,2.13,1.84,2.63,2.63,0,0,1,.4.25l.18.14-.23,0a3.6,3.6,0,0,0-3.09.68,4.9,4.9,0,0,1-1.27.66,6.65,6.65,0,0,1,1.82,1.28,7.89,7.89,0,0,0,4.51,2.25v.11a4.9,4.9,0,0,0-2.83.68,7.36,7.36,0,0,1-1.24.51,9.78,9.78,0,0,1,2.35,2A8.9,8.9,0,0,0,45.19,56l.31.16-.34,0c-.74-.12-1.3-.24-1.79-.35a5.08,5.08,0,0,0-2.64-.12C37,56.59,34.41,61.25,34,62A12.27,12.27,0,0,1,39.71,62.52ZM60.6,50.41h0a2,2,0,0,1,.35.15.57.57,0,0,1,.31.57.31.31,0,0,1,0,.12,1.15,1.15,0,0,1-.86.39h-.2l-.58,0h-.13l.09-.09a14.65,14.65,0,0,0,1-1.09Zm-3,0A7.84,7.84,0,0,0,57.91,48c0-.17,0-.36,0-.56-.08-1-.19-2.42.69-2.66a.84.84,0,0,1,1,.52c.49.92.42,3.15-1.86,5.19l-.15.13Zm-6,9.43.09-.09v.15a3.53,3.53,0,0,1,0,.46,1.17,1.17,0,0,1-.4.86.27.27,0,0,1-.11.05l-.09,0a.63.63,0,0,1-.49-.33.36.36,0,0,0,0-.09.43.43,0,0,0,0,0l0,0,0,0C50.94,60.46,51.28,60.15,51.6,59.84Zm-1.35-6.56a2,2,0,0,1-.83.17,6.87,6.87,0,0,1-3.26-1.31L46,52l.23,0a8.69,8.69,0,0,0,3.72-.24.74.74,0,0,1,1,.35C51.07,52.47,51,53,50.25,53.28Zm2-3.78a8.87,8.87,0,0,0,.29-3.73l0-.23.13.19c.08.1,1.81,2.57,1.09,4.11-.26.54-.59.72-.88.72a.7.7,0,0,1-.6-1.06ZM48,45.05a4.27,4.27,0,0,0,.22-2.31l0-.19.13.14c0,.06,1.23,1.44.67,2.62-.22.47-.45.56-.61.56a.24.24,0,0,1-.14,0A.61.61,0,0,1,48,45.05Zm-3.3-1,0,0s.07-.06,1.39,1.1c.72.63,1.82,1.63,3,2.84A36.23,36.23,0,0,1,53,52.44v0l0,0h0a38.22,38.22,0,0,1-4.36-4,41.56,41.56,0,0,1-3.86-4.45ZM42.12,41.6l0,0h0a5.68,5.68,0,0,1,1.68,1c.47.48.5.87.33,1a.36.36,0,0,1-.26.09,1.2,1.2,0,0,1-.79-.44A5,5,0,0,1,42.12,41.6Zm3,7a3.42,3.42,0,0,1-1.94-.85l-.14-.13.19,0a4.3,4.3,0,0,0,2.31-.18.6.6,0,0,1,.78.24c0,.1.13.45-.54.75A1.57,1.57,0,0,1,45.14,48.59Zm.09,9.63a1.75,1.75,0,0,1,1.28-.58,7.12,7.12,0,0,1,1.16,0,7.62,7.62,0,0,0,2.67-.17l.11,0,.1,0,.19,0-.13.14a5.7,5.7,0,0,1-4,2.06,2,2,0,0,1-1.22-.34A.73.73,0,0,1,45.23,58.22Z" />',
                            '<path class="cls-2" d="M53,58.05c-.31.22-.67.47-1.11.74a9.45,9.45,0,0,1,1.19.78,4.78,4.78,0,0,0,1.89,1c1.65.35,2.61-1.16,3-2.09,0-.06,0-.08,0-.09l.11-.06c1.7-.86,2.42-1.92,2.09-3a6,6,0,0,0-1-1.87,12.5,12.5,0,0,1-.76-1.22c-.27.44-.52.79-.75,1.11A13.14,13.14,0,0,0,57,54.38l0,0,0,0A7.24,7.24,0,0,0,55,54a15.17,15.17,0,0,1-1.62-.29c.12.58.2,1.07.26,1.5a8.72,8.72,0,0,0,.48,2.09l0,.05,0,0A9.78,9.78,0,0,0,53,58.05Z" />',
                            '<path class="cls-2" d="M71.05,62.85a1.35,1.35,0,0,0-1.93,0,1.36,1.36,0,1,0,1.9,2A1.37,1.37,0,0,0,71.05,62.85Z" />',
                            '<path class="cls-2" d="M68.32,68.5a2.08,2.08,0,1,0-2.94,0A2.09,2.09,0,0,0,68.32,68.5Z" />',
                            '<path class="cls-2" d="M64.65,69.32a1.31,1.31,0,0,0-2,0,1.36,1.36,0,0,0,0,1.92,1.34,1.34,0,0,0,1.92,0A1.31,1.31,0,0,0,64.65,69.32Z" />',
                            '<path class="cls-2" d="M39.14,78.44c-1.58-.1-2.28.61-3.61.63,1,.82,1.21,1.85,2.57,2.62s3.12-.56,3.18-.77S40.66,78.53,39.14,78.44Z" />',
                            '<path class="cls-2" d="M39.21,85.82a.38.38,0,0,0-.44-.5c-.21.06-.37.3-.58.23-1.31-.44,1.83-3.26,1.81-1a.26.26,0,0,0,.28.29c.76,0,.93-1.91,1-2.67a3.86,3.86,0,0,0,1.44-2.1c-.39,1-1.75,1.5-2.69,2C34.48,85.08,38.48,87.68,39.21,85.82Z" />',
                            '<path class="cls-2" d="M52.28,74.57A6.46,6.46,0,0,0,46,78.69c3.88-2.06,6,.15,8.17.55,2,.37,4.52-.21,7.44-4.19C58.06,76.48,55.46,74.53,52.28,74.57Zm.9,2c.8-.45,2.4,0,3.3.18a4.67,4.67,0,0,0,3.15-.36C56.42,78.49,54.94,76.06,53.18,76.57Z" />',
                            '<path class="cls-2" d="M41.51,81c.65.07,1.4-1.49,1.49-1.74,1.51-4.38,6.1-6.48,10.86-5.49A46.42,46.42,0,0,0,62.25,75L63.16,74a6.08,6.08,0,0,1-5.41-5.54,3.4,3.4,0,0,1,.57-2.77c-1.44,1.43-2.86,3.1-2.36,5.09a.92.92,0,0,1-.49.06c-1.49-.17.59,1.22,3.1,2.21a34.67,34.67,0,0,0-4.38-1.19C47.93,70.79,42,73.67,41.51,81Z" />',
                            '<path class="cls-2" d="M45.6,72.37a1.15,1.15,0,1,0-1.63,0A1.15,1.15,0,0,0,45.6,72.37Z" />',
                            '<path class="cls-2" d="M40.54,91.3a2.05,2.05,0,0,0,.61,1.5,2.08,2.08,0,0,0,1.12.57V315.06a1.25,1.25,0,0,0-.93,1.21,1.28,1.28,0,1,0,2.55,0,1.25,1.25,0,0,0-.93-1.21V93.37a2.14,2.14,0,0,0,1.13-.57,2.1,2.1,0,1,0-2.94-3A2,2,0,0,0,40.54,91.3Z" />',
                            '<path class="cls-2" d="M37.32,94.7a1.36,1.36,0,0,0,0,1.93,1.34,1.34,0,0,0,1.92,0,1.36,1.36,0,1,0-1.89-2Z" />',
                            '<path class="cls-2" d="M80.35,41.76c.2-.07,1.52-1.86.77-3.19S79.32,37,78.51,36c0,1.33-.74,2-.64,3.62S80.15,41.82,80.35,41.76Z" />',
                            '<path class="cls-2" d="M79.53,43.18a3.89,3.89,0,0,0,2.1-1.44c.75-.05,2.7-.23,2.66-1a.26.26,0,0,0-.29-.28c-2.29,0,.53-3.13,1-1.81.07.21-.17.37-.23.58a.38.38,0,0,0,.5.43c1.86-.73-.74-4.74-3.71.82C81,41.43,80.53,42.8,79.53,43.18Z" />',
                            '<path class="cls-2" d="M78.68,54.69c-.4-2.22-2.61-4.3-.56-8.2A6.48,6.48,0,0,0,74,52.78c0,3.18,1.9,5.79.48,9.36C78.46,59.22,79,56.71,78.68,54.69Zm-2.85,5.45A4.66,4.66,0,0,0,76.19,57c-.16-.9-.62-2.51-.18-3.31C75.5,55.45,77.93,56.94,75.83,60.14Z" />',
                            '<path class="cls-2" d="M67.92,58.27a6.08,6.08,0,0,1,5.52,5.42l1-.92a46.76,46.76,0,0,0-1.29-8.41c-1-4.76,1.1-9.37,5.47-10.88.25-.09,1.81-.84,1.74-1.5h0c-7.29.54-10.15,6.44-9.09,12.71a33.88,33.88,0,0,0,1.18,4.39c-1-2.51-2.37-4.6-2.2-3.1a.93.93,0,0,1-.07.49c-2-.51-3.65.92-5.07,2.36A3.39,3.39,0,0,1,67.92,58.27Z" />',
                            '<path class="cls-2" d="M71.82,46.08a1.15,1.15,0,1,0-1.63,0A1.15,1.15,0,0,0,71.82,46.08Z" />',
                            '<path class="cls-2" d="M92.2,44.56a2.08,2.08,0,0,0,.57-1.12H291.7a1.28,1.28,0,1,0,0-.7H92.77a2.11,2.11,0,0,0-.57-1.12,2.08,2.08,0,1,0,0,2.94Z" />',
                            '<path class="cls-2" d="M96.05,39.68a1.36,1.36,0,1,0-2-1.89,1.36,1.36,0,1,0,2,1.89Z" />',
                            '<path class="cls-2" d="M295.45,49.67a1.36,1.36,0,0,0,0-2.72,1.3,1.3,0,0,0-1.4,1.29A1.32,1.32,0,0,0,295.45,49.67Z" />',
                            '<path class="cls-2" d="M46.37,316.12a1.32,1.32,0,0,0,1.36,1.43,1.36,1.36,0,1,0,0-2.72A1.3,1.3,0,0,0,46.37,316.12Z" />',
                            '<path class="cls-2" d="M80.14,43.1c2.82-.46,5.52.61,6.54,3.23a3.46,3.46,0,0,1,.21,1.27H83.08a2.56,2.56,0,0,0-1.83.55,2.7,2.7,0,0,0-.69,3.21c1.46,3,7,1.42,7.75-2.49H288.93a2.06,2.06,0,0,0,2,1.52A2.08,2.08,0,1,0,289,47.6H88.39A5.81,5.81,0,0,0,88,45.7c-1-2.59-3.69-3.7-6.22-3.78A4.31,4.31,0,0,1,80.14,43.1Zm3.81,8a1.4,1.4,0,0,1-1.58-1.38c0-.42.29-.9.7-.9h3.61A3.34,3.34,0,0,1,84,51.15Z" />',
                            '<path class="cls-2" d="M295.7,43.93a.84.84,0,1,0,0-1.68.84.84,0,1,0,0,1.68Z" />',
                            '<path class="cls-2" d="M41.45,82.27c.08,2.54,1.19,5.19,3.76,6.23a5.81,5.81,0,0,0,1.9.43V310a2.08,2.08,0,1,0,1.27,0v-221c3.9-.81,5.49-6.32,2.48-7.78a2.69,2.69,0,0,0-3.2.7,2.55,2.55,0,0,0-.55,1.83v3.82a3.44,3.44,0,0,1-1.26-.21c-2.62-1-3.69-3.73-3.22-6.56A4.34,4.34,0,0,1,41.45,82.27Zm6.93,1.32c0-.4.48-.71.9-.7a1.42,1.42,0,0,1,1.38,1.59,3.34,3.34,0,0,1-2.28,2.73Z" />',
                            '<path class="cls-2" d="M41.78,319.09a.84.84,0,1,0,1.67,0,.84.84,0,1,0-1.67,0Z" />',
                            '<path class="cls-2" d="M549,47.75c-.09.2.09.42.48.6a2.48,2.48,0,0,0,2.32-.57,4.18,4.18,0,0,1-2.16-.22A.49.49,0,0,0,549,47.75Z" />',
                            '<path class="cls-2" d="M552.05,43.23a5.66,5.66,0,0,0,1-1.52,5.89,5.89,0,0,0-1.51,1c-.4.41-.47.75-.33.89S551.65,43.64,552.05,43.23Z" />',
                            '<path class="cls-2" d="M547,45.74a.5.5,0,0,0,.18-.64,4.38,4.38,0,0,1-.25-2.17,2.53,2.53,0,0,0-.54,2.33C546.58,45.65,546.81,45.83,547,45.74Z" />',
                            '<path class="cls-2" d="M548.41,57.74c-.29,0-.54,0-.79,0a7.3,7.3,0,0,1-2.7-.17h0c2,2.07,4.1,2.17,4.88,1.56a.62.62,0,0,0,.17-.88,1.66,1.66,0,0,0-1.19-.53Z" />',
                            '<path class="cls-2" d="M545.07,53.18c1.25.57,3.16-.59,3.78-1a8.92,8.92,0,0,1-3.55-.28.63.63,0,0,0-.85.3C544.33,52.47,544.43,52.89,545.07,53.18Z" />',
                            '<path class="cls-2" d="M543.68,60.35a1.1,1.1,0,0,0,.35.78.11.11,0,0,0,.08,0c.17.05.35-.1.44-.26a.11.11,0,0,0,0-.07v0a10,10,0,0,1-.9-.81C543.68,60.12,543.68,60.24,543.68,60.35Z" />',
                            '<path class="cls-2" d="M534.12,51.19a1,1,0,0,0,.77.35c.21,0,.42,0,.65,0-.32-.32-.63-.65-.91-1a1.17,1.17,0,0,0-.28.13.46.46,0,0,0-.27.45A.25.25,0,0,0,534.12,51.19Z" />',
                            '<path class="cls-2" d="M537.29,47.41c.07-1,.17-2.33-.62-2.54l-.15,0a.78.78,0,0,0-.66.49c-.47.87-.41,2.95,1.69,4.92a8.54,8.54,0,0,1-.3-2.29C537.26,47.8,537.27,47.61,537.29,47.41Z" />',
                            '<path class="cls-2" d="M546.64,48.46a50.81,50.81,0,0,0,3.6-4.07,52.88,52.88,0,0,0-4,3.68,48.59,48.59,0,0,0-3.69,4.17A52.48,52.48,0,0,0,546.64,48.46Z" />',
                            '<path class="cls-2" d="M542.63,50.4a.63.63,0,0,0,.28-.86,9,9,0,0,1-.33-3.54c-.39.62-1.52,2.55-.94,3.79C541.94,50.44,542.36,50.53,542.63,50.4Z" />',
                            '<path class="cls-2" d="M531.6,61.72c-.78,1.36-.53,2.15-1.19,3.41l0,.05a0,0,0,0,1,0,0h0a0,0,0,0,1,0,0l0,0,.05,0c1.27-.64,2-.38,3.42-1.13.64-.35,1-1.26,1.21-1.45-.26,1.44.55,1.67.78,2.58.44-1.17,1.69-1.48,2-3.69-.13,1,.5,1.62.7,2.4.76-1.39,1.87-1.59,2.56-3.21-2.1,1.05-4.09-.54-4.09-1.77,0-.06-2.67,2.24-2.84,2.36.1-.15,2.47-2.8,2.41-2.8-1.17,0-2.88-2.29-2-3.74-1.19.66-1.51,1.61-2.75,2.29.76.19,1.37.83,2.38.72-2.21.32-2.54,1.56-3.72,2,.91.25,1.13,1.06,2.57.83A3.93,3.93,0,0,0,531.6,61.72Z" />',
                            '<path class="cls-2" d="M532.36,53.16a18.76,18.76,0,0,1,3.48-.49,15.29,15.29,0,0,0,.92-1.46l0-.09.05.09a19.73,19.73,0,0,0,1.74,2.52,6,6,0,0,1,1.9-.37,8.59,8.59,0,0,0,2-.32l.1,0,0,.09a11.69,11.69,0,0,0-.3,1.92,6.68,6.68,0,0,1-.42,2,12,12,0,0,1,1.19.76c.37.26.79.56,1.33.87l.09,0-.09.05a15.86,15.86,0,0,0-1.53,1l-.17.12a22.2,22.2,0,0,1-.31,2.36,6.87,6.87,0,0,0-.17,2.16c.63,2.44,3.59,4.12,4.17,4.43a6.87,6.87,0,0,1,.25-3.37,7.83,7.83,0,0,0,.34-3.22v-.1l.09,0a11.27,11.27,0,0,0,8.57.32,12.26,12.26,0,0,1,5.69-.53c-.39-.74-3-5.4-6.71-6.37a5.08,5.08,0,0,0-2.64.12c-.5.11-1.06.23-1.79.35l-.34,0,.3-.16a9,9,0,0,0,2.54-2.11,9.72,9.72,0,0,1,2.34-2,8.11,8.11,0,0,1-1.24-.51,4.89,4.89,0,0,0-2.82-.68l0-.11a7.89,7.89,0,0,0,4.52-2.25A6.6,6.6,0,0,1,557.21,47a4.83,4.83,0,0,1-1.26-.66,3.63,3.63,0,0,0-3.1-.68l-.23,0,.19-.14a2.63,2.63,0,0,1,.4-.25,5.7,5.7,0,0,0,2.13-1.84c.42-.77,1.72-5.16,2-6a16.57,16.57,0,0,1-2.32.79,23.13,23.13,0,0,0-3.65,1.3,5.68,5.68,0,0,0-1.8,2.17,4.11,4.11,0,0,1-.24.4l-.14.19,0-.23a3.65,3.65,0,0,0-.73-3.09,5,5,0,0,1-.67-1.26,7,7,0,0,1-1.25,1.84,7.89,7.89,0,0,0-2.18,4.56l-.11,0a5,5,0,0,0-.72-2.82,7.74,7.74,0,0,1-.53-1.23,9.66,9.66,0,0,1-2,2.38,9.16,9.16,0,0,0-2,2.43l-.16.3,0-.33c.11-.7.23-1.24.33-1.72a5,5,0,0,0,.12-2.65c-1-3.76-5.61-6.34-6.35-6.73a10.58,10.58,0,0,1-.41,5.33c0,.13-.08.26-.11.38a11.48,11.48,0,0,0,.77,8.89l.05.1h-.11a7.83,7.83,0,0,0-3,.22l-.37.1a6.62,6.62,0,0,1-3.37.26C527.55,51,529.91,53.75,532.36,53.16Zm12-1a.74.74,0,0,1,1-.35,8.69,8.69,0,0,0,3.72.24l.23,0-.19.14a6.77,6.77,0,0,1-3.26,1.31,1.88,1.88,0,0,1-.82-.17C544.31,53,544.21,52.47,544.35,52.15Zm.36,8.67s0,0,0,0a.36.36,0,0,1,0,.09.61.61,0,0,1-.48.33l-.09,0a.22.22,0,0,1-.11-.05,1.14,1.14,0,0,1-.4-.86,3.53,3.53,0,0,1,0-.46v-.15l.09.09c.31.31.66.62,1,.91l0,0Zm5.34-2.6a.74.74,0,0,1-.2,1,2,2,0,0,1-1.23.34,5.67,5.67,0,0,1-4-2.06l-.13-.14.18,0,.1,0,.12,0a7.61,7.61,0,0,0,2.67.17,7,7,0,0,1,1.15,0A1.76,1.76,0,0,1,550.05,58.22Zm1.37-15.61a5.56,5.56,0,0,1,1.68-1h0v0a4.81,4.81,0,0,1-1,1.71,1.18,1.18,0,0,1-.79.44.33.33,0,0,1-.25-.09C550.91,43.48,551,43.09,551.42,42.61Zm.61,5,.19,0-.14.13a3.46,3.46,0,0,1-2,.85,1.49,1.49,0,0,1-.65-.14c-.68-.3-.59-.65-.55-.75a.62.62,0,0,1,.79-.24A4.28,4.28,0,0,0,552,47.64Zm-5.06-5,.12-.14,0,.19a4.37,4.37,0,0,0,.22,2.31.62.62,0,0,1-.23.79.28.28,0,0,1-.15,0c-.15,0-.39-.09-.61-.56C545.74,44.13,546.91,42.75,547,42.69Zm-.8,5.3c1.18-1.21,2.28-2.21,3-2.84,1.33-1.16,1.37-1.13,1.4-1.1v0a40.25,40.25,0,0,1-3.86,4.45,37.66,37.66,0,0,1-4.35,4h0l0,0v0A34.29,34.29,0,0,1,546.17,48Zm-3.55-2.26.14-.19,0,.23A8.7,8.7,0,0,0,543,49.5a.7.7,0,0,1-.61,1.06c-.28,0-.62-.18-.87-.72C540.81,48.3,542.55,45.83,542.62,45.73Zm-6.86-.45a.82.82,0,0,1,.94-.52c.88.24.78,1.63.7,2.66,0,.2,0,.39,0,.56a8.48,8.48,0,0,0,.35,2.43l.06.19-.15-.13C535.33,48.43,535.27,46.2,535.76,45.28Zm-1.47,5.29a1.76,1.76,0,0,1,.35-.15h0l0,0a12.64,12.64,0,0,0,1,1.09l.09.09h-.12l-.58,0h-.2a1.17,1.17,0,0,1-.87-.39.61.61,0,0,1,0-.12A.57.57,0,0,1,534.29,50.57Z" />',
                            '<path class="cls-2" d="M541.66,55.17c.06-.43.13-.92.26-1.5a15.32,15.32,0,0,1-1.63.29,7.33,7.33,0,0,0-2,.45l0,0,0,0a11.05,11.05,0,0,0-.72-1.11c-.22-.32-.47-.67-.74-1.11a12.45,12.45,0,0,1-.77,1.22,6,6,0,0,0-1,1.87c-.33,1.13.39,2.19,2.09,3l.1.06,0,.09c.43.93,1.39,2.44,3,2.09a4.67,4.67,0,0,0,1.88-1,11.18,11.18,0,0,1,1.19-.78c-.44-.27-.79-.52-1.1-.74a12.05,12.05,0,0,0-1.09-.72l-.05,0,0-.05A9.27,9.27,0,0,0,541.66,55.17Z" />',
                            '<path class="cls-2" d="M524.23,62.85a1.35,1.35,0,0,0,0,1.93,1.36,1.36,0,1,0,1.89-2A1.34,1.34,0,0,0,524.23,62.85Z" />',
                            '<path class="cls-2" d="M527,65.55a2.08,2.08,0,1,0,2.94,0A2.08,2.08,0,0,0,527,65.55Z" />',
                            '<path class="cls-2" d="M532.59,69.28a1.36,1.36,0,1,0-1.89,2,1.36,1.36,0,1,0,1.89-2Z" />',
                            '<path class="cls-2" d="M556.14,78.44c-1.53.09-2.21,2.28-2.15,2.48s1.85,1.52,3.18.77,1.52-1.8,2.57-2.62C558.41,79.05,557.72,78.34,556.14,78.44Z" />',
                            '<path class="cls-2" d="M555.26,82.11c-.94-.51-2.31-1-2.69-2A3.86,3.86,0,0,0,554,82.2c0,.76.23,2.71,1,2.67.15,0,.29-.07.29-.29,0-2.29,3.12.53,1.8,1-.21.07-.37-.17-.58-.23s-.52.27-.43.5C556.8,87.68,560.8,85.08,555.26,82.11Z" />',
                            '<path class="cls-2" d="M543,74.57c-3.18,0-5.78,1.91-9.34.48,2.91,4,5.41,4.56,7.43,4.19,2.21-.4,4.29-2.61,8.18-.55A6.47,6.47,0,0,0,543,74.57Zm-7.35,1.82a4.64,4.64,0,0,0,3.14.36c.91-.16,2.51-.63,3.31-.18C540.34,76.06,538.85,78.49,535.65,76.39Z" />',
                            '<path class="cls-2" d="M541.09,71.85A34.22,34.22,0,0,0,536.71,73c2.51-1,4.59-2.38,3.09-2.21a1,1,0,0,1-.49-.06c.51-2-.91-3.66-2.35-5.09a3.39,3.39,0,0,1,.56,2.77A6.07,6.07,0,0,1,532.11,74L533,75a46.55,46.55,0,0,0,8.39-1.3c4.75-1,9.34,1.11,10.86,5.49.08.25.83,1.81,1.49,1.74h0C553.23,73.67,547.34,70.79,541.09,71.85Z" />',
                            '<path class="cls-2" d="M551.31,72.37a1.15,1.15,0,1,0-1.63,0A1.15,1.15,0,0,0,551.31,72.37Z" />',
                            '<path class="cls-2" d="M558,94.7a1.3,1.3,0,0,0-2,0,1.31,1.31,0,0,0,.07,1.91,1.36,1.36,0,0,0,1.89-2Z" />',
                            '<path class="cls-2" d="M514.93,41.76c.2.06,2.38-.62,2.47-2.15s-.61-2.29-.63-3.62c-.82,1-1.85,1.21-2.61,2.58S514.72,41.69,514.93,41.76Z" />',
                            '<path class="cls-2" d="M510,39.67a.38.38,0,0,0,.5-.43c-.06-.21-.31-.37-.24-.58.44-1.32,3.26,1.83,1,1.81a.27.27,0,0,0-.3.28c0,.76,1.91.94,2.67,1a3.82,3.82,0,0,0,2.1,1.44c-1-.38-1.5-1.75-2-2.69C510.77,34.93,508.18,38.94,510,39.67Z" />',
                            '<path class="cls-2" d="M517.15,46.49c2.06,3.9-.15,6-.55,8.2-.37,2,.21,4.53,4.18,7.45-1.43-3.57.52-6.18.48-9.36A6.49,6.49,0,0,0,517.15,46.49Zm2.29,13.65c-2.09-3.2.34-4.69-.18-6.46.45.8,0,2.41-.18,3.31A4.78,4.78,0,0,0,519.44,60.14Z" />',
                            '<path class="cls-2" d="M514.87,42c-.06.66,1.5,1.41,1.75,1.5,4.36,1.51,6.45,6.12,5.47,10.88a46.87,46.87,0,0,0-1.3,8.41l1.05.92a6.07,6.07,0,0,1,5.52-5.42,3.39,3.39,0,0,1,2.77.56c-1.43-1.44-3.1-2.87-5.07-2.36A.93.93,0,0,1,525,56c.17-1.5-1.22.59-2.2,3.1A35.57,35.57,0,0,0,524,54.69c1.06-6.27-1.81-12.17-9.09-12.71Z" />',
                            '<path class="cls-2" d="M525.08,46.08a1.15,1.15,0,1,0-1.63,0A1.15,1.15,0,0,0,525.08,46.08Z" />',
                            '<path class="cls-2" d="M501.13,39.76a1.31,1.31,0,0,0,.05-2,1.36,1.36,0,1,0-1.95,1.89A1.29,1.29,0,0,0,501.13,39.76Z" />',
                            '<path class="cls-2" d="M299.83,49.67a1.36,1.36,0,1,0-.05-2.72,1.36,1.36,0,0,0,.05,2.72Z" />',
                            '<path class="cls-2" d="M548.9,316.12a1.3,1.3,0,0,0-1.4-1.29,1.36,1.36,0,0,0,0,2.72A1.31,1.31,0,0,0,548.9,316.12Z" />',
                            '<path class="cls-2" d="M304.36,46.23a2.08,2.08,0,1,0,2,2.64H507c.8,3.91,6.3,5.51,7.76,2.49a2.71,2.71,0,0,0-.7-3.21,2.54,2.54,0,0,0-1.82-.55h-3.82a3.47,3.47,0,0,1,.22-1.27c1-2.62,3.71-3.69,6.54-3.23a4.34,4.34,0,0,1-1.61-1.18c-2.53.08-5.18,1.19-6.22,3.78a6.08,6.08,0,0,0-.43,1.9H306.3A2.06,2.06,0,0,0,304.36,46.23Zm207.85,2.64c.4,0,.71.48.7.9a1.41,1.41,0,0,1-1.59,1.38,3.32,3.32,0,0,1-2.72-2.28Z" />',
                            '<path class="cls-2" d="M299.58,43.93a.84.84,0,1,0,0-1.68.84.84,0,0,0,0,1.68Z" />',
                            '<path class="cls-2" d="M302.37,44.37a1.27,1.27,0,0,0,1.21-.93H502.5a2,2,0,0,0,.58,1.12,2.08,2.08,0,1,0-.58-1.82H303.58a1.27,1.27,0,1,0-1.21,1.63Z" />',
                            '<path class="cls-2" d="M551.19,89.8a2.1,2.1,0,0,0,1.12,3.57V315.06a1.26,1.26,0,0,0-.93,1.21,1.28,1.28,0,0,0,2.56,0,1.26,1.26,0,0,0-.93-1.21V93.37a2.11,2.11,0,0,0,1.12-.57,2.15,2.15,0,0,0,0-3A2.08,2.08,0,0,0,551.19,89.8Z" />',
                            '<path class="cls-2" d="M549.43,87.22a3.44,3.44,0,0,1-1.26.21V83.61a2.57,2.57,0,0,0-.56-1.83,2.67,2.67,0,0,0-3.19-.7c-3,1.46-1.43,7,2.47,7.78V309.91a2.08,2.08,0,1,0,1.28,0v-221a5.82,5.82,0,0,0,1.89-.43c2.58-1,3.69-3.69,3.76-6.23a4.43,4.43,0,0,1-1.17-1.61C553.11,83.49,552,86.19,549.43,87.22Zm-2.54,0a3.31,3.31,0,0,1-2.27-2.73A1.42,1.42,0,0,1,546,82.89c.42,0,.9.3.9.7Z" />',
                            '<path class="cls-2" d="M553.49,319.09a.79.79,0,0,0-.79-.86.81.81,0,0,0-.88.84.85.85,0,0,0,.83.85A.82.82,0,0,0,553.49,319.09Z" />',
                            '<path class="cls-2" d="M549,794.14a.49.49,0,0,0,.64.19,4.18,4.18,0,0,1,2.16-.22,2.48,2.48,0,0,0-2.32-.57C549.13,793.72,549,793.94,549,794.14Z" />',
                            '<path class="cls-2" d="M551.17,798.31c-.14.14-.07.48.33.89a5.89,5.89,0,0,0,1.51,1,5.66,5.66,0,0,0-1-1.52C551.65,798.25,551.3,798.17,551.17,798.31Z" />',
                            '<path class="cls-2" d="M547,796.15c-.19-.09-.42.09-.61.48a2.53,2.53,0,0,0,.54,2.33,4.38,4.38,0,0,1,.25-2.17A.5.5,0,0,0,547,796.15Z" />',
                            '<path class="cls-2" d="M544.9,784.29h0a7.3,7.3,0,0,1,2.7-.17c.25,0,.5,0,.79,0h.35a1.66,1.66,0,0,0,1.19-.53.62.62,0,0,0-.17-.88C549,782.12,546.93,782.21,544.9,784.29Z" />',
                            '<path class="cls-2" d="M545.3,790a9,9,0,0,1,3.55-.27c-.62-.41-2.53-1.57-3.78-1-.64.29-.74.71-.62,1A.62.62,0,0,0,545.3,790Z" />',
                            '<path class="cls-2" d="M544.55,781c-.09-.16-.27-.31-.44-.26a.11.11,0,0,0-.08,0,1.1,1.1,0,0,0-.35.78c0,.11,0,.23,0,.35a10,10,0,0,1,.9-.81v0A.11.11,0,0,0,544.55,781Z" />',
                            '<path class="cls-2" d="M534.12,790.7a.25.25,0,0,0,0,.07.46.46,0,0,0,.27.45,1.17,1.17,0,0,0,.28.13c.28-.34.59-.67.91-1-.23,0-.44,0-.65,0A1,1,0,0,0,534.12,790.7Z" />',
                            '<path class="cls-2" d="M535.86,796.55a.78.78,0,0,0,.66.49l.15,0c.79-.21.69-1.56.62-2.54,0-.2,0-.39,0-.56a8.49,8.49,0,0,1,.3-2.29C535.45,793.6,535.39,795.68,535.86,796.55Z" />',
                            '<path class="cls-2" d="M542.56,789.65a48.59,48.59,0,0,0,3.69,4.17,52.88,52.88,0,0,0,4,3.68,50.81,50.81,0,0,0-3.6-4.07A52.48,52.48,0,0,0,542.56,789.65Z" />',
                            '<path class="cls-2" d="M542.63,791.49c-.27-.13-.69,0-1,.61-.58,1.24.55,3.17.94,3.79a9,9,0,0,1,.33-3.54A.63.63,0,0,0,542.63,791.49Z" />',
                            '<path class="cls-2" d="M538.59,778c-.2.78-.83,1.39-.7,2.4-.35-2.21-1.6-2.52-2-3.69-.23.91-1,1.14-.78,2.58a4.29,4.29,0,0,0-1.21-1.45c-1.37-.75-2.15-.49-3.42-1.13l-.05-.05,0,0a0,0,0,0,1,0,0s0,0,0,0a0,0,0,0,1,0,0l0,0c.66,1.27.41,2.06,1.19,3.42a4,4,0,0,0,1.46,1.18c-1.44-.23-1.66.58-2.57.83,1.18.43,1.51,1.67,3.72,2-1-.11-1.62.53-2.38.72,1.24.68,1.56,1.62,2.75,2.29-.83-1.45.88-3.74,2-3.74.06,0-2.31-2.65-2.41-2.8.17.12,2.84,2.42,2.84,2.36,0-1.23,2-2.82,4.09-1.77C540.46,779.61,539.35,779.41,538.59,778Z" />',
                            '<path class="cls-2" d="M555.57,779.37a11.27,11.27,0,0,0-8.57.32l-.09,0v-.1a7.83,7.83,0,0,0-.34-3.22,6.87,6.87,0,0,1-.25-3.37c-.58.31-3.54,2-4.17,4.43a6.87,6.87,0,0,0,.17,2.16,22.2,22.2,0,0,1,.31,2.36l.17.12a15.86,15.86,0,0,0,1.53,1l.09,0-.09,0c-.54.31-1,.61-1.33.87a12,12,0,0,1-1.19.76,6.68,6.68,0,0,1,.42,2.05,11.69,11.69,0,0,0,.3,1.92l0,.09-.1,0a8.59,8.59,0,0,0-2-.32,6,6,0,0,1-1.9-.37,19.73,19.73,0,0,0-1.74,2.52l-.05.09,0-.09a15.29,15.29,0,0,0-.92-1.46,19.68,19.68,0,0,1-3.48-.49c-2.45-.59-4.81,2.13-5.84,4.16a6.62,6.62,0,0,1,3.37.26l.37.1a7.83,7.83,0,0,0,3,.22h.11l-.05.1a11.48,11.48,0,0,0-.77,8.89c0,.12.07.25.11.38a10.58,10.58,0,0,1,.41,5.33c.74-.39,5.39-3,6.35-6.73a5,5,0,0,0-.12-2.65c-.1-.48-.22-1-.33-1.72l0-.33.16.3a9.16,9.16,0,0,0,2,2.43,9.66,9.66,0,0,1,2,2.38,7.74,7.74,0,0,1,.53-1.23,5,5,0,0,0,.72-2.82l.11,0a7.89,7.89,0,0,0,2.18,4.56,7,7,0,0,1,1.25,1.84,5,5,0,0,1,.67-1.26,3.65,3.65,0,0,0,.73-3.09l0-.23.14.19a4.11,4.11,0,0,1,.24.4,5.68,5.68,0,0,0,1.8,2.17,23.13,23.13,0,0,0,3.65,1.3,16.57,16.57,0,0,1,2.32.79c-.26-.87-1.56-5.26-2-6a5.7,5.7,0,0,0-2.13-1.84,3.78,3.78,0,0,1-.4-.25l-.19-.14.23,0a3.63,3.63,0,0,0,3.1-.68,4.83,4.83,0,0,1,1.26-.66,6.6,6.6,0,0,1-1.81-1.28,7.89,7.89,0,0,0-4.52-2.25l0-.11a4.89,4.89,0,0,0,2.82-.68,8.11,8.11,0,0,1,1.24-.51,9.72,9.72,0,0,1-2.34-2,9,9,0,0,0-2.54-2.11l-.3-.16.34,0c.73.12,1.29.24,1.79.35a5.08,5.08,0,0,0,2.64.12c3.75-1,6.32-5.63,6.71-6.37A12.26,12.26,0,0,1,555.57,779.37Zm-20.9,12.11,0,0a1.28,1.28,0,0,1-.35-.14.57.57,0,0,1-.32-.57.61.61,0,0,1,0-.12,1.17,1.17,0,0,1,.87-.39h.2l.58,0h.12l-.09.09a12.64,12.64,0,0,0-1,1.09Zm3,0a8.6,8.6,0,0,0-.35,2.44c0,.17,0,.36,0,.56.08,1,.18,2.42-.7,2.66a.82.82,0,0,1-.94-.52c-.49-.92-.43-3.15,1.86-5.19l.15-.14Zm6-9.42-.09.09V782a3.53,3.53,0,0,1,0-.46,1.14,1.14,0,0,1,.4-.86.22.22,0,0,1,.11,0l.09,0a.61.61,0,0,1,.48.33.36.36,0,0,1,0,.09s0,0,0,.05l0,0,0,0C544.34,781.43,544,781.74,543.68,782.05Zm1.35,6.56a1.88,1.88,0,0,1,.82-.17,6.77,6.77,0,0,1,3.26,1.31l.19.14-.23,0a8.69,8.69,0,0,0-3.72.24.74.74,0,0,1-1-.35C544.21,789.42,544.31,788.93,545,788.61Zm-2,3.78a8.7,8.7,0,0,0-.29,3.73l0,.23-.14-.19c-.07-.11-1.81-2.57-1.08-4.11.25-.54.59-.72.87-.72a.7.7,0,0,1,.61,1.06Zm4.26,4.45a4.37,4.37,0,0,0-.22,2.31l0,.19-.12-.14c-.06-.06-1.23-1.44-.68-2.62.22-.47.46-.56.61-.56a.28.28,0,0,1,.15,0A.62.62,0,0,1,547.28,796.84Zm3.3,1v0s-.07.06-1.4-1.1c-.72-.63-1.82-1.63-3-2.84a34.29,34.29,0,0,1-3.86-4.45v0l0,0h0a37.66,37.66,0,0,1,4.35,4,41.79,41.79,0,0,1,3.86,4.44Zm2.57,2.47v0h0a5.56,5.56,0,0,1-1.68-1.05c-.47-.48-.51-.87-.33-1a.33.33,0,0,1,.25-.09,1.18,1.18,0,0,1,.79.44A4.81,4.81,0,0,1,553.15,800.29Zm-3-7a3.46,3.46,0,0,1,2,.85l.14.13-.19,0a4.28,4.28,0,0,0-2.31.18.62.62,0,0,1-.79-.24c0-.1-.13-.45.55-.75A1.49,1.49,0,0,1,550.13,793.3Zm-.08-9.63a1.76,1.76,0,0,1-1.29.58,7,7,0,0,1-1.15,0,7.61,7.61,0,0,0-2.67.17l-.12,0-.1,0-.18,0,.13-.14a5.67,5.67,0,0,1,4-2.06,2,2,0,0,1,1.23.34A.74.74,0,0,1,550.05,783.67Z" />',
                            '<path class="cls-2" d="M542.29,783.84c.31-.22.66-.47,1.1-.74a11.18,11.18,0,0,1-1.19-.78,4.55,4.55,0,0,0-1.88-1c-1.65-.35-2.61,1.16-3,2.09l0,.09-.1.06c-1.7.86-2.42,1.92-2.09,3a6,6,0,0,0,1,1.87,12.45,12.45,0,0,1,.77,1.22c.27-.44.52-.8.74-1.11a11.05,11.05,0,0,0,.72-1.11l0,0,0,0a7.33,7.33,0,0,0,2,.45,15.32,15.32,0,0,1,1.63.29c-.13-.58-.2-1.07-.26-1.5a9.15,9.15,0,0,0-.49-2.09l0,0,.05,0A12.05,12.05,0,0,0,542.29,783.84Z" />',
                            '<path class="cls-2" d="M524.23,779a1.34,1.34,0,0,0,1.92,0,1.36,1.36,0,1,0-1.89-2A1.35,1.35,0,0,0,524.23,779Z" />',
                            '<ellipse class="cls-2" cx="528.43" cy="774.86" rx="2.08" ry="2.08" />',
                            '<path class="cls-2" d="M530.62,772.57a1.31,1.31,0,0,0,2,0,1.36,1.36,0,1,0-1.89-2A1.31,1.31,0,0,0,530.62,772.57Z" />',
                            '<path class="cls-2" d="M556.14,763.45c1.58.1,2.27-.61,3.6-.63-1-.82-1.21-1.85-2.57-2.62s-3.11.56-3.18.77S554.61,763.36,556.14,763.45Z" />',
                            '<path class="cls-2" d="M556.07,756.07a.38.38,0,0,0,.43.5c.21-.06.37-.3.58-.23,1.32.44-1.82,3.26-1.8,1,0-.22-.14-.28-.29-.29-.75,0-.93,1.91-1,2.67a3.86,3.86,0,0,0-1.44,2.1c.38-1,1.75-1.5,2.69-2C560.8,756.81,556.8,754.21,556.07,756.07Z" />',
                            '<path class="cls-2" d="M543,767.32a6.47,6.47,0,0,0,6.27-4.12c-3.89,2.06-6-.15-8.18-.55-2-.37-4.52.21-7.43,4.19C537.22,765.41,539.82,767.36,543,767.32Zm-.9-2c-.8.45-2.4,0-3.31-.18a4.64,4.64,0,0,0-3.14.36C538.85,763.4,540.34,765.83,542.1,765.32Z" />',
                            '<path class="cls-2" d="M553.77,760.92c-.66-.07-1.41,1.49-1.49,1.74-1.52,4.38-6.11,6.48-10.86,5.49a46.55,46.55,0,0,0-8.39-1.3l-.92,1a6.07,6.07,0,0,1,5.41,5.54,3.39,3.39,0,0,1-.56,2.77c1.44-1.43,2.86-3.1,2.35-5.09a1,1,0,0,1,.49-.06c1.5.17-.58-1.22-3.09-2.21a34.22,34.22,0,0,0,4.38,1.19c6.25,1.06,12.14-1.82,12.68-9.12Z" />',
                            '<path class="cls-2" d="M549.68,769.52a1.15,1.15,0,1,0,1.63,0A1.15,1.15,0,0,0,549.68,769.52Z" />',
                            '<path class="cls-2" d="M554.74,750.59a2.14,2.14,0,0,0-.61-1.5,2.11,2.11,0,0,0-1.12-.57V526.83a1.26,1.26,0,0,0,.93-1.21,1.28,1.28,0,0,0-2.56,0,1.26,1.26,0,0,0,.93,1.21V748.52a2.11,2.11,0,0,0-1.12.57,2.15,2.15,0,0,0,0,3,2.08,2.08,0,0,0,2.94,0A2.12,2.12,0,0,0,554.74,750.59Z" />',
                            '<path class="cls-2" d="M558,747.19a1.36,1.36,0,0,0-1.89-2,1.31,1.31,0,0,0-.07,1.91A1.3,1.3,0,0,0,558,747.19Z" />',
                            '<path class="cls-2" d="M514.93,800.13c-.21.07-1.52,1.86-.77,3.19s1.79,1.53,2.61,2.58c0-1.33.73-2,.63-3.62S515.13,800.07,514.93,800.13Z" />',
                            '<path class="cls-2" d="M515.75,798.71a3.82,3.82,0,0,0-2.1,1.44c-.76.05-2.71.23-2.67,1a.27.27,0,0,0,.3.28c2.28,0-.54,3.13-1,1.81-.07-.21.18-.37.24-.58a.38.38,0,0,0-.5-.43c-1.86.73.73,4.73,3.7-.82C514.25,800.46,514.75,799.09,515.75,798.71Z" />',
                            '<path class="cls-2" d="M521.26,789.11c0-3.18-1.91-5.79-.48-9.36-4,2.92-4.55,5.43-4.18,7.45.4,2.22,2.61,4.3.55,8.2A6.49,6.49,0,0,0,521.26,789.11Zm-1.82-7.36a4.78,4.78,0,0,0-.36,3.15c.16.9.63,2.51.18,3.31C519.78,786.44,517.35,785,519.44,781.75Z" />',
                            '<path class="cls-2" d="M527.36,783.62a6.07,6.07,0,0,1-5.52-5.42l-1.05.92a46.87,46.87,0,0,0,1.3,8.41c1,4.76-1.11,9.37-5.47,10.88-.25.09-1.81.84-1.75,1.5h0c7.28-.54,10.15-6.44,9.09-12.71a35.57,35.57,0,0,0-1.18-4.39c1,2.51,2.37,4.6,2.2,3.1a.93.93,0,0,1,.07-.49c2,.51,3.64-.92,5.07-2.36A3.39,3.39,0,0,1,527.36,783.62Z" />',
                            '<path class="cls-2" d="M523.45,795.81a1.15,1.15,0,1,0,1.63,0A1.15,1.15,0,0,0,523.45,795.81Z" />',
                            '<path class="cls-2" d="M503.08,797.33a2,2,0,0,0-.58,1.12H303.58a1.28,1.28,0,1,0,0,.7H502.5a2.08,2.08,0,1,0,.58-1.82Z" />',
                            '<path class="cls-2" d="M499.23,802.21a1.36,1.36,0,1,0,1.95,1.89,1.31,1.31,0,0,0-.05-2A1.29,1.29,0,0,0,499.23,802.21Z" />',
                            '<path class="cls-2" d="M299.83,792.22a1.36,1.36,0,0,0-.05,2.72,1.36,1.36,0,1,0,.05-2.72Z" />',
                            '<path class="cls-2" d="M548.9,525.76a1.3,1.3,0,0,0-1.36-1.42,1.36,1.36,0,1,0,0,2.72A1.3,1.3,0,0,0,548.9,525.76Z" />',
                            '<path class="cls-2" d="M515.14,798.79c-2.83.46-5.52-.61-6.54-3.23a3.47,3.47,0,0,1-.22-1.27h3.82a2.54,2.54,0,0,0,1.82-.55,2.72,2.72,0,0,0,.7-3.21c-1.46-3-7-1.42-7.76,2.48H306.35a2.09,2.09,0,1,0-.05,1.28H506.88a6.08,6.08,0,0,0,.43,1.9c1,2.59,3.69,3.7,6.22,3.78A4.34,4.34,0,0,1,515.14,798.79Zm-3.82-8a1.41,1.41,0,0,1,1.59,1.38c0,.41-.3.89-.7.89H508.6A3.33,3.33,0,0,1,511.32,790.74Z" />',
                            '<path class="cls-2" d="M299.58,798a.84.84,0,0,0,0,1.68.84.84,0,1,0,0-1.68Z" />',
                            '<path class="cls-2" d="M553.82,759.62c-.07-2.54-1.18-5.19-3.76-6.23a5.82,5.82,0,0,0-1.89-.43v-221a2.07,2.07,0,1,0-1.28.05V753c-3.9.81-5.49,6.32-2.47,7.78a2.67,2.67,0,0,0,3.19-.7,2.57,2.57,0,0,0,.56-1.83v-3.82a3.44,3.44,0,0,1,1.26.21c2.61,1,3.68,3.73,3.22,6.56A4.43,4.43,0,0,1,553.82,759.62Zm-6.93-1.33c0,.41-.48.72-.9.71a1.42,1.42,0,0,1-1.37-1.59,3.31,3.31,0,0,1,2.27-2.73Z" />',
                            '<path class="cls-2" d="M553.49,522.8a.82.82,0,0,0-.84-.83.85.85,0,0,0-.83.85.81.81,0,0,0,.88.84A.79.79,0,0,0,553.49,522.8Z" />',
                            '<path class="cls-2" d="M46.24,794.14c.09-.2-.1-.42-.49-.6a2.48,2.48,0,0,0-2.32.57,4.22,4.22,0,0,1,2.17.22A.5.5,0,0,0,46.24,794.14Z" />',
                            '<path class="cls-2" d="M43.22,798.66a5.58,5.58,0,0,0-.95,1.52,6.07,6.07,0,0,0,1.51-1c.39-.41.46-.75.33-.89S43.62,798.25,43.22,798.66Z" />',
                            '<path class="cls-2" d="M48.27,796.15a.49.49,0,0,0-.17.64,4.38,4.38,0,0,1,.25,2.17,2.5,2.5,0,0,0,.53-2.33C48.7,796.24,48.47,796.06,48.27,796.15Z" />',
                            '<path class="cls-2" d="M46.87,784.15c.29,0,.53,0,.79,0a7.31,7.31,0,0,1,2.7.17h0c-2-2.08-4.1-2.17-4.89-1.56a.62.62,0,0,0-.16.88,1.64,1.64,0,0,0,1.19.53Z" />',
                            '<path class="cls-2" d="M50.2,788.71c-1.24-.57-3.16.59-3.77,1A8.88,8.88,0,0,1,50,790a.63.63,0,0,0,.86-.29C50.94,789.42,50.85,789,50.2,788.71Z" />',
                            '<path class="cls-2" d="M51.59,781.54a1.05,1.05,0,0,0-.34-.78.13.13,0,0,0-.08,0c-.17-.05-.35.1-.45.26l0,.07v0c.31.25.61.53.9.81A2,2,0,0,0,51.59,781.54Z" />',
                            '<path class="cls-2" d="M61.16,790.7a1.06,1.06,0,0,0-.78-.35c-.21,0-.41,0-.64,0q.48.48.9,1a1.08,1.08,0,0,0,.29-.13.44.44,0,0,0,.26-.45A.21.21,0,0,0,61.16,790.7Z" />',
                            '<path class="cls-2" d="M58,794.48c-.08,1-.18,2.33.61,2.54l.16,0a.79.79,0,0,0,.66-.49c.46-.87.4-2.95-1.69-4.92a8.07,8.07,0,0,1,.29,2.29C58,794.09,58,794.28,58,794.48Z" />',
                            '<path class="cls-2" d="M48.64,793.43A50.81,50.81,0,0,0,45,797.5c.66-.54,2.28-1.94,4-3.68a47.86,47.86,0,0,0,3.68-4.17A53,53,0,0,0,48.64,793.43Z" />',
                            '<path class="cls-2" d="M52.64,791.49a.63.63,0,0,0-.28.86,8.82,8.82,0,0,1,.33,3.54c.4-.62,1.53-2.55.94-3.79C53.33,791.45,52.91,791.36,52.64,791.49Z" />',
                            '<path class="cls-2" d="M63.68,780.17c.77-1.36.53-2.15,1.19-3.42l0,0a0,0,0,0,1,0,0s0,0,0,0a0,0,0,0,1,0,0l0,0,0,.05c-1.26.64-2,.38-3.42,1.13a4.24,4.24,0,0,0-1.2,1.45c.26-1.44-.55-1.67-.78-2.58-.45,1.17-1.7,1.48-2,3.69.12-1-.5-1.62-.7-2.4-.76,1.39-1.88,1.59-2.56,3.21,2.1-1.05,4.08.54,4.08,1.77,0,.06,2.67-2.24,2.85-2.36-.1.15-2.48,2.8-2.41,2.8,1.17,0,2.87,2.29,2.05,3.74,1.19-.67,1.51-1.61,2.75-2.29-.76-.19-1.38-.83-2.38-.72,2.2-.32,2.54-1.56,3.71-2-.9-.25-1.13-1.06-2.56-.83A4.12,4.12,0,0,0,63.68,780.17Z" />',
                            '<path class="cls-2" d="M62.92,788.73a19.84,19.84,0,0,1-3.48.49,13.54,13.54,0,0,0-.92,1.46l-.05.09,0-.09a20.8,20.8,0,0,0-1.74-2.52,6.07,6.07,0,0,1-1.91.37,8.59,8.59,0,0,0-2,.32l-.09,0,0-.09a9.87,9.87,0,0,0,.3-1.92,6.44,6.44,0,0,1,.43-2.05,12,12,0,0,1-1.19-.76c-.37-.26-.8-.56-1.34-.87l-.08,0,.08,0a14.71,14.71,0,0,0,1.53-1l.18-.12a22.3,22.3,0,0,1,.3-2.36,6.31,6.31,0,0,0,.17-2.16C52.49,775,49.53,773.35,49,773a7,7,0,0,1-.25,3.37,7.67,7.67,0,0,0-.34,3.22v.1l-.09,0a11.27,11.27,0,0,0-8.57-.32,12.27,12.27,0,0,1-5.69.53c.39.74,2.95,5.4,6.71,6.37a5.08,5.08,0,0,0,2.64-.12c.49-.11,1.05-.23,1.79-.35l.34,0-.31.16A8.9,8.9,0,0,0,42.66,788a9.78,9.78,0,0,1-2.35,2,7.36,7.36,0,0,1,1.24.51,4.9,4.9,0,0,0,2.83.68v.11a7.89,7.89,0,0,0-4.51,2.25,6.65,6.65,0,0,1-1.82,1.28,4.9,4.9,0,0,1,1.27.66,3.6,3.6,0,0,0,3.09.68l.23,0-.18.14a3.78,3.78,0,0,1-.4.25,5.63,5.63,0,0,0-2.13,1.84c-.42.77-1.73,5.16-2,6a16.1,16.1,0,0,1,2.32-.79,23.34,23.34,0,0,0,3.64-1.3,5.59,5.59,0,0,0,1.8-2.17c.11-.18.19-.32.25-.4l.13-.19,0,.23a3.58,3.58,0,0,0,.73,3.09,5,5,0,0,1,.67,1.26,6.8,6.8,0,0,1,1.25-1.84,8,8,0,0,0,2.18-4.56l.11,0a4.89,4.89,0,0,0,.72,2.82,8.77,8.77,0,0,1,.53,1.23,9.86,9.86,0,0,1,2-2.38,9.38,9.38,0,0,0,2-2.43l.16-.3-.06.33c-.11.7-.23,1.24-.33,1.72a5,5,0,0,0-.12,2.65c1,3.76,5.61,6.34,6.36,6.73a10.46,10.46,0,0,1,.41-5.33c0-.13.08-.26.11-.38a11.48,11.48,0,0,0-.77-8.89l0-.1h.1a7.82,7.82,0,0,0,3-.22l.38-.1a6.59,6.59,0,0,1,3.36-.26C67.72,790.86,65.37,788.14,62.92,788.73Zm-12,1a.74.74,0,0,1-1,.35,8.69,8.69,0,0,0-3.72-.24l-.23,0,.18-.14a6.87,6.87,0,0,1,3.26-1.31,2,2,0,0,1,.83.17C51,788.93,51.07,789.42,50.93,789.74Zm-.36-8.67a.43.43,0,0,0,0-.05.36.36,0,0,0,0-.09.63.63,0,0,1,.49-.33l.09,0a.27.27,0,0,1,.11,0,1.17,1.17,0,0,1,.4.86,3.53,3.53,0,0,1,0,.46v.15l-.09-.09c-.32-.31-.66-.62-1-.91l0,0Zm-5.34,2.6a.73.73,0,0,1,.2-1,2,2,0,0,1,1.22-.34,5.7,5.7,0,0,1,4,2.06l.13.14-.19,0-.1,0-.11,0a7.62,7.62,0,0,0-2.67-.17,7.12,7.12,0,0,1-1.16,0A1.75,1.75,0,0,1,45.23,783.67Zm-1.37,15.61a5.68,5.68,0,0,1-1.68,1.05h0l0,0a5,5,0,0,1,1-1.71,1.2,1.2,0,0,1,.79-.44.36.36,0,0,1,.26.09C44.36,798.41,44.33,798.8,43.86,799.28Zm-.61-5-.19,0,.14-.13a3.42,3.42,0,0,1,1.94-.85,1.57,1.57,0,0,1,.66.14c.67.3.59.65.54.75a.6.6,0,0,1-.78.24A4.3,4.3,0,0,0,43.25,794.25Zm5.06,5-.13.14,0-.19a4.27,4.27,0,0,0-.22-2.31.61.61,0,0,1,.24-.79.24.24,0,0,1,.14,0c.16,0,.39.09.61.56C49.54,797.76,48.36,799.14,48.31,799.2Zm.8-5.3c-1.19,1.21-2.29,2.21-3,2.84-1.32,1.16-1.36,1.13-1.39,1.1l0,0v0a43.21,43.21,0,0,1,3.86-4.44,38.22,38.22,0,0,1,4.36-4h0l0,0v0A36.23,36.23,0,0,1,49.11,793.9Zm3.54,2.26-.13.19,0-.23a8.87,8.87,0,0,0-.29-3.73.7.7,0,0,1,.6-1.06c.29,0,.62.18.88.72C54.46,793.59,52.73,796.05,52.65,796.16Zm6.87.45a.84.84,0,0,1-1,.52c-.88-.24-.77-1.63-.69-2.66,0-.2,0-.39,0-.56a7.94,7.94,0,0,0-.35-2.44l-.05-.19.15.14C59.94,793.46,60,795.69,59.52,796.61ZM61,791.32a1.42,1.42,0,0,1-.35.14l0,0,0,0a14.65,14.65,0,0,0-1-1.09l-.09-.09h.13l.58,0h.2a1.15,1.15,0,0,1,.86.39.31.31,0,0,1,0,.12A.57.57,0,0,1,61,791.32Z" />',
                            '<path class="cls-2" d="M53.62,786.72c-.06.43-.14.92-.26,1.5a15.17,15.17,0,0,1,1.62-.29,7.24,7.24,0,0,0,2-.45l0,0,0,0a13.14,13.14,0,0,0,.72,1.11c.23.31.48.67.75,1.11a12.5,12.5,0,0,1,.76-1.22,6,6,0,0,0,1-1.87c.33-1.13-.39-2.19-2.09-3l-.11-.06s0,0,0-.09c-.43-.93-1.39-2.44-3-2.09a4.65,4.65,0,0,0-1.89,1,9.45,9.45,0,0,1-1.19.78c.44.27.8.52,1.11.74a9.78,9.78,0,0,0,1.09.72l0,0,0,0A8.62,8.62,0,0,0,53.62,786.72Z" />',
                            '<path class="cls-2" d="M71.05,779a1.37,1.37,0,0,0,0-1.93,1.36,1.36,0,1,0-1.9,2A1.35,1.35,0,0,0,71.05,779Z" />',
                            '<ellipse class="cls-2" cx="66.85" cy="774.86" rx="2.08" ry="2.08" />',
                            '<path class="cls-2" d="M62.65,770.68a1.37,1.37,0,0,0,0,1.93,1.36,1.36,0,1,0,1.89-2A1.35,1.35,0,0,0,62.65,770.68Z" />',
                            '<path class="cls-2" d="M39.14,763.45c1.52-.09,2.21-2.28,2.14-2.48s-1.85-1.52-3.18-.77-1.52,1.8-2.57,2.62C36.86,762.84,37.56,763.55,39.14,763.45Z" />',
                            '<path class="cls-2" d="M42.71,761.79a3.86,3.86,0,0,0-1.44-2.1c-.06-.76-.23-2.71-1-2.67a.26.26,0,0,0-.28.29c0,2.29-3.12-.53-1.81-1,.21-.07.37.17.58.23a.38.38,0,0,0,.44-.5c-.73-1.86-4.73.74.81,3.71C41,760.29,42.32,760.79,42.71,761.79Z" />',
                            '<path class="cls-2" d="M52.28,767.32c3.18,0,5.78-1.91,9.34-.48-2.92-4-5.42-4.56-7.44-4.19-2.21.4-4.29,2.61-8.17.55A6.46,6.46,0,0,0,52.28,767.32Zm7.35-1.82a4.67,4.67,0,0,0-3.15-.36c-.9.16-2.5.63-3.3.18C54.94,765.83,56.42,763.4,59.63,765.5Z" />',
                            '<path class="cls-2" d="M54.19,770a34.67,34.67,0,0,0,4.38-1.19c-2.51,1-4.59,2.38-3.1,2.21a.92.92,0,0,1,.49.06c-.5,2,.92,3.66,2.36,5.09a3.4,3.4,0,0,1-.57-2.77,6.08,6.08,0,0,1,5.41-5.54l-.91-1a46.42,46.42,0,0,0-8.39,1.3c-4.76,1-9.35-1.11-10.86-5.49-.09-.25-.84-1.81-1.49-1.74h0C42,768.22,47.93,771.1,54.19,770Z" />',
                            '<path class="cls-2" d="M44,769.52a1.15,1.15,0,1,0,1.63,0A1.15,1.15,0,0,0,44,769.52Z" />',
                            '<path class="cls-2" d="M37.32,747.19a1.36,1.36,0,1,0,1.89-2,1.34,1.34,0,0,0-1.92,0A1.36,1.36,0,0,0,37.32,747.19Z" />',
                            '<path class="cls-2" d="M80.35,800.13c-.2-.06-2.38.62-2.48,2.15s.62,2.29.64,3.62c.81-1,1.84-1.21,2.61-2.58S80.55,800.2,80.35,800.13Z" />',
                            '<path class="cls-2" d="M85.24,802.22a.38.38,0,0,0-.5.43c.06.21.3.37.23.58-.44,1.32-3.26-1.83-1-1.81a.26.26,0,0,0,.29-.28c0-.76-1.91-.94-2.66-1a3.89,3.89,0,0,0-2.1-1.44c1,.38,1.5,1.75,2,2.69C84.5,807,87.1,803,85.24,802.22Z" />',
                            '<path class="cls-2" d="M74.5,779.75c1.42,3.57-.53,6.18-.48,9.36a6.48,6.48,0,0,0,4.1,6.29c-2.05-3.9.16-6,.56-8.2C79,785.18,78.46,782.67,74.5,779.75ZM76,788.21c-.44-.8,0-2.41.18-3.31a4.66,4.66,0,0,0-.36-3.15C77.93,785,75.5,786.44,76,788.21Z" />',
                            '<path class="cls-2" d="M80.4,799.91c.07-.66-1.49-1.41-1.74-1.5-4.37-1.51-6.46-6.12-5.47-10.88a46.76,46.76,0,0,0,1.29-8.41l-1-.92a6.08,6.08,0,0,1-5.52,5.42,3.39,3.39,0,0,1-2.77-.56c1.42,1.44,3.09,2.87,5.07,2.36a.93.93,0,0,1,.07.49c-.17,1.5,1.22-.59,2.2-3.1a33.88,33.88,0,0,0-1.18,4.39c-1.06,6.27,1.8,12.17,9.09,12.71Z" />',
                            '<path class="cls-2" d="M70.19,795.81a1.15,1.15,0,1,0,1.63,0A1.15,1.15,0,0,0,70.19,795.81Z" />',
                            '<path class="cls-2" d="M94.14,802.13a1.32,1.32,0,0,0,0,2,1.36,1.36,0,1,0,2-1.89A1.31,1.31,0,0,0,94.14,802.13Z" />',
                            '<path class="cls-2" d="M295.45,792.22a1.32,1.32,0,0,0-1.36,1.43,1.3,1.3,0,0,0,1.4,1.29,1.36,1.36,0,1,0,0-2.72Z" />',
                            '<path class="cls-2" d="M46.37,525.76a1.3,1.3,0,0,0,1.4,1.3,1.36,1.36,0,1,0,0-2.72A1.31,1.31,0,0,0,46.37,525.76Z" />',
                            '<path class="cls-2" d="M290.92,795.66a2.08,2.08,0,0,0,0-4.16,2.06,2.06,0,0,0-2,1.51H88.31c-.8-3.9-6.29-5.5-7.75-2.48a2.7,2.7,0,0,0,.69,3.21,2.56,2.56,0,0,0,1.83.55h3.81a3.46,3.46,0,0,1-.21,1.27c-1,2.62-3.72,3.69-6.54,3.23a4.31,4.31,0,0,1,1.6,1.18c2.53-.08,5.19-1.19,6.22-3.78a5.81,5.81,0,0,0,.43-1.9H289A2.07,2.07,0,0,0,290.92,795.66ZM83.07,793a.83.83,0,0,1-.7-.89A1.4,1.4,0,0,1,84,790.74,3.34,3.34,0,0,1,86.68,793Z" />',
                            '<path class="cls-2" d="M295.7,798a.84.84,0,1,0,0,1.68.84.84,0,1,0,0-1.68Z" />',
                            '<path class="cls-2" d="M292.91,797.52a1.27,1.27,0,0,0-1.21.93H92.77a2.07,2.07,0,1,0-.57,1.82,2.11,2.11,0,0,0,.57-1.12H291.7a1.27,1.27,0,1,0,1.21-1.63Z" />',
                            '<path class="cls-2" d="M44.09,752.09a2.17,2.17,0,0,0,0-3,2.14,2.14,0,0,0-1.13-.57V526.83a1.25,1.25,0,0,0,.93-1.21,1.28,1.28,0,1,0-2.55,0,1.25,1.25,0,0,0,.93,1.21V748.52a2.08,2.08,0,0,0-1.12.57,2.15,2.15,0,0,0,0,3A2.08,2.08,0,0,0,44.09,752.09Z" />',
                            '<path class="cls-2" d="M45.85,754.67a3.44,3.44,0,0,1,1.26-.21v3.82a2.55,2.55,0,0,0,.55,1.83,2.69,2.69,0,0,0,3.2.7c3-1.46,1.42-7-2.48-7.78V532a2.08,2.08,0,1,0-1.27-.05V753a5.81,5.81,0,0,0-1.9.43c-2.57,1-3.68,3.69-3.76,6.23a4.34,4.34,0,0,1,1.18,1.61C42.16,758.4,43.23,755.69,45.85,754.67Zm2.53,0a3.34,3.34,0,0,1,2.28,2.73A1.42,1.42,0,0,1,49.28,759c-.42,0-.9-.3-.9-.71Z" />',
                            '<path class="cls-2" d="M41.78,522.8a.84.84,0,1,0,1.67,0,.84.84,0,1,0-1.67,0Z" />',
                            '<path class="cls-2" d="M310.91,252.49a1.94,1.94,0,0,0-.32-2.34,1.9,1.9,0,0,0-2.33-.32,2,2,0,0,0-1,2,1.84,1.84,0,0,0,1.8,1.62,37.83,37.83,0,0,0,5.11-.37,5.74,5.74,0,0,0,3.85-2.53c2.08,3.36,8.29,4.18,10.58,1.42,4,2.4,7.64,1.35,11.23-1,.09.27.16.51.25.74a2.48,2.48,0,0,0,3.44,1.28c.29-.16.68-.66.61-.84-.14-.35-.57-.59-.89-.87l-.2.19v.71c-1.19-.27-1.47-1.27-.71-2.56.24.12.49.25.74.36,1.8.8,3.56,1.7,5.41,2.36a12.39,12.39,0,0,0,9.4-.07,1.58,1.58,0,0,1,.89,0c2.53.39,5.05.91,7.59,1.16a10.47,10.47,0,0,0,6.64-1.16c1.26-.77,2.6-1.28,3.89-1.94a26.58,26.58,0,0,0,3.32-2,7.8,7.8,0,0,0,2.68-3.32,6.16,6.16,0,0,0-1.19-7,3.84,3.84,0,0,0-5.85.52A2.68,2.68,0,0,0,377,243c1.17.54,1.69.35,2.13-.79a1.85,1.85,0,0,1,.37,2.3c-.77,2-2.51,2.95-4.33,3.9-.36-2.45-1.7-3.93-3.82-4.31a3.4,3.4,0,0,0-3.5,1.68,2.42,2.42,0,0,0,.4,2.68,1.69,1.69,0,0,0,2.06.52l.39-.08c-.9,1.7-6.85,1.88-9.67,1.35a24.47,24.47,0,0,0,1.25-2.89c1-3.4-.59-6.45-3.71-7.34-2.51-.72-4.79.57-5.17,2.91a2.56,2.56,0,0,0,1.95,2.86c1,.3,1.17.14,1.95-1.41a.77.77,0,0,1,.49-.37A2.38,2.38,0,0,1,360,245.1a4.1,4.1,0,0,1-1,4.57,1.75,1.75,0,0,1-1,.3,10.45,10.45,0,0,1-1.34-.17c-4.68-.48-9.18-2.25-14-1.9a5.36,5.36,0,0,0,.44-1.05,7.46,7.46,0,0,0,.16-2.15,1.43,1.43,0,0,0-1.37-1.28,1.39,1.39,0,0,0-1.44.83.75.75,0,0,0,0,.62.7.7,0,0,0,.58.16c.77-.09,1.39.31,1.33,1.05a9.72,9.72,0,0,1-.58,1.9L340,247.1a48.16,48.16,0,0,0-9.84-4.24,12.55,12.55,0,0,0-9,.78,5.47,5.47,0,0,0-3.15,3.85,1.17,1.17,0,0,1-.13.29,13.28,13.28,0,0,0-1.85-.86,2.09,2.09,0,0,0-2.21.9,1.67,1.67,0,0,0,.07,2.12,4.58,4.58,0,0,0,1.37.78,8.35,8.35,0,0,1-4.58,2.22C310.75,252.78,310.84,252.64,310.91,252.49Zm33-3.72a14.34,14.34,0,0,1,2.46.23c3,.75,5.92,1.59,8.88,2.4l0,.21c-4.12.65-7.76-.85-11.36-2.54Zm-19.8-1.89a6.26,6.26,0,0,1,5.69-2.37,19.7,19.7,0,0,1,7.12,2.25c1.3.61,2.56,1.29,4.11,2.07a22.41,22.41,0,0,1-2.67,2.37,8.92,8.92,0,0,1-6.78,1.37,4.39,4.39,0,0,1-3.14-2.57c.45.08.72.15,1,.17a1.87,1.87,0,0,0,2.06-1.38,2,2,0,0,0-.92-2.25,2.07,2.07,0,0,0-2.48.39,3.27,3.27,0,0,0-.78,3.44c-1.1.43-1.13.54-.46,1.41-.39.71-1,.64-1.58.34A3.58,3.58,0,0,1,324.08,246.88Z" />',
                            '<path class="cls-2" d="M217.21,243.18a2.83,2.83,0,0,0,2.85-3.34,3.9,3.9,0,0,0-5.72-2.41,4.78,4.78,0,0,0-2.22,2.77,6.92,6.92,0,0,0,1.64,7,13.2,13.2,0,0,0,4.47,3.13c1.37.64,2.87,1,4,2a2.58,2.58,0,0,0,.92.42,13.57,13.57,0,0,0,5.75.69c2.48-.3,4.95-.77,7.42-1.13a2.83,2.83,0,0,1,1.36.13,11.65,11.65,0,0,0,6.15.65,25.69,25.69,0,0,0,8.21-3l.87-.45c.73,1.39.43,2.38-.75,2.55v-.71l-.21-.17c-.31.3-.77.56-.86.91s.4.73.72.86a3.25,3.25,0,0,0,1.55.14c1.2-.19,1.73-1.12,2-2.21,3.61,2.33,7.27,3.36,11.21,1,2.42,2.73,8.22,2,10.58-1.35h.08c2.44,3.1,5.85,3,9.26,2.72a1.8,1.8,0,0,0,1.46-2,2,2,0,0,0-1.91-1.82,1.84,1.84,0,0,0-1.91,1.58,8,8,0,0,0,.26,1.88,9,9,0,0,1-4.49-2.44,1.41,1.41,0,0,0,1.57-.79,1.81,1.81,0,0,0-.14-2.07,2,2,0,0,0-2.17-.78,11.53,11.53,0,0,0-1.83.85c-.81-3.47-3.5-4.66-6.67-5.22a13.35,13.35,0,0,0-6.18.45,57.59,57.59,0,0,0-9.86,4.4l-1,.49a10,10,0,0,1-.56-1c-.45-1.14.11-1.87,1.34-1.81.58,0,.67-.32.48-.78a1.39,1.39,0,0,0-2.3-.46,3.07,3.07,0,0,0-.62,1.82,10.63,10.63,0,0,0,.58,2.3,22.71,22.71,0,0,0-3.4,0c-3.92.61-7.82,1.34-11.74,2a1.7,1.7,0,0,1-1.19-.35,3.91,3.91,0,0,1-1.14-3.7A2.13,2.13,0,0,1,237,244a.86.86,0,0,1,1.16.59c.24.52.8,1.17,1.29,1.24a2.56,2.56,0,0,0,2.43-2,3.48,3.48,0,0,0-2.65-3.94,5.31,5.31,0,0,0-6.29,4,7.3,7.3,0,0,0,1.11,5.65l.45.76c-2.82.08-5.49.39-8.11-.4a13.15,13.15,0,0,1-1.83-.85l.11-.24.38.1a1.77,1.77,0,0,0,2.39-1.14,2.66,2.66,0,0,0-2-3.67,4.39,4.39,0,0,0-5,3c-.12.39-.18.8-.3,1.36-.91-.61-1.74-1.12-2.53-1.7a4.47,4.47,0,0,1-1.9-2.89,1.59,1.59,0,0,1,.33-1.59C216.45,242.62,216.8,243.12,217.21,243.18Zm37.46,5.5a34.85,34.85,0,0,1,9.46-4,6.86,6.86,0,0,1,6.48,1.53,3.62,3.62,0,0,1-.46,5.84c-.61.34-1.22.49-1.71-.29.71-.85.65-1-.45-1.36a3.19,3.19,0,0,0-.48-3.12,2,2,0,0,0-2.73-.76,2,2,0,0,0,1.56,3.57c.11,0,.21-.06.52-.15a7.29,7.29,0,0,1-.47.88,4.66,4.66,0,0,1-3.62,1.91,9.37,9.37,0,0,1-8.21-3.86C254.59,248.82,254.61,248.71,254.67,248.68Zm-3.16.08c-1.62,1.92-9.28,3.66-11.65,2.62C243.84,250.65,247.42,248.88,251.51,248.76Z" />',
                            '<path class="cls-2" d="M291.14,252.58a1.24,1.24,0,0,0,1.29,1.35,1.29,1.29,0,0,0,0-2.57A1.24,1.24,0,0,0,291.14,252.58Z" />',
                            '<path class="cls-2" d="M302.85,253.93a1.29,1.29,0,1,0,0-2.57,1.29,1.29,0,0,0,0,2.57Z" />',
                            '<rect class="cls-2" x="143.35" y="256.28" width="308.57" height="1" />',
                            '<path class="cls-2" d="M377,356.67a2.69,2.69,0,0,0-1.09,4.44,3.84,3.84,0,0,0,5.85.51,6.16,6.16,0,0,0,1.19-7,7.8,7.8,0,0,0-2.68-3.32,27.77,27.77,0,0,0-3.32-2c-1.29-.67-2.63-1.17-3.89-1.95a10.53,10.53,0,0,0-6.64-1.16c-2.54.25-5.06.78-7.59,1.17a1.78,1.78,0,0,1-.89,0,12.34,12.34,0,0,0-9.4-.07c-1.85.65-3.61,1.56-5.41,2.35l-.74.37c-.76-1.3-.48-2.3.71-2.56v.7l.2.19c.32-.28.75-.51.89-.86.07-.18-.32-.68-.61-.85a2.48,2.48,0,0,0-3.44,1.28c-.09.23-.16.47-.25.74-3.59-2.3-7.25-3.36-11.23-1-2.29-2.76-8.5-1.95-10.58,1.41a5.77,5.77,0,0,0-3.85-2.53,36.26,36.26,0,0,0-5.11-.36,1.83,1.83,0,0,0-1.8,1.62,2,2,0,0,0,1,2,1.91,1.91,0,0,0,2.33-.31,2,2,0,0,0,.32-2.34c-.07-.15-.16-.3-.24-.46a8.42,8.42,0,0,1,4.58,2.22,4.6,4.6,0,0,0-1.37.79,1.67,1.67,0,0,0-.07,2.12,2.1,2.1,0,0,0,2.21.89,14.44,14.44,0,0,0,1.85-.85,1.25,1.25,0,0,1,.13.28,5.47,5.47,0,0,0,3.15,3.85,12.49,12.49,0,0,0,9,.78,48.13,48.13,0,0,0,9.84-4.23l1.72-.88a9.43,9.43,0,0,1,.58,1.89c.06.74-.56,1.15-1.33,1a.7.7,0,0,0-.58.17.73.73,0,0,0,0,.61,1.41,1.41,0,0,0,1.44.84,1.44,1.44,0,0,0,1.37-1.29,7.46,7.46,0,0,0-.16-2.15,5.36,5.36,0,0,0-.44-1c4.84.35,9.34-1.41,14-1.9a12.59,12.59,0,0,1,1.34-.17,1.75,1.75,0,0,1,1,.3,4.1,4.1,0,0,1,1,4.57,2.41,2.41,0,0,1-2.19,1.15.84.84,0,0,1-.49-.37c-.78-1.56-1-1.72-1.95-1.42a2.57,2.57,0,0,0-1.95,2.87c.38,2.34,2.66,3.62,5.17,2.91,3.12-.9,4.7-4,3.71-7.34a23.91,23.91,0,0,0-1.25-2.9c2.82-.53,8.77-.35,9.67,1.35a2.65,2.65,0,0,1-.39-.08,1.69,1.69,0,0,0-2.06.52,2.42,2.42,0,0,0-.4,2.68,3.38,3.38,0,0,0,3.5,1.68c2.12-.38,3.46-1.85,3.82-4.31,1.82,1,3.56,1.88,4.33,3.9a1.86,1.86,0,0,1-.37,2.31C378.66,356.33,378.14,356.14,377,356.67Zm-40.08-3.81a19.91,19.91,0,0,1-7.12,2.26,6.31,6.31,0,0,1-5.69-2.37,3.59,3.59,0,0,1,1.16-5.25c.61-.3,1.19-.37,1.58.34-.67.87-.64,1,.46,1.42a3.28,3.28,0,0,0,.78,3.44,2.07,2.07,0,0,0,2.48.38,2,2,0,0,0,.92-2.25,1.88,1.88,0,0,0-2.06-1.38c-.27,0-.54.09-1,.17a4.41,4.41,0,0,1,3.14-2.57,8.88,8.88,0,0,1,6.78,1.38,21.43,21.43,0,0,1,2.67,2.36C339.45,351.57,338.19,352.26,336.89,352.86Zm9.45-2.23a15.41,15.41,0,0,1-2.46.22l-.05-.3c3.6-1.68,7.24-3.18,11.36-2.54l0,.21C352.26,349,349.31,349.87,346.34,350.63Z" />',
                            '<path class="cls-2" d="M286.11,350.06a2,2,0,0,0,1.91-1.82,1.81,1.81,0,0,0-1.46-2c-3.41-.25-6.82-.38-9.26,2.72,0,0-.05,0-.08,0-2.36-3.33-8.16-4.08-10.58-1.35-3.94-2.38-7.6-1.36-11.21,1a2.63,2.63,0,0,0-2-2.21,3.14,3.14,0,0,0-1.55.15c-.32.12-.78.63-.72.86s.55.61.86.91l.21-.18v-.71c1.18.17,1.48,1.17.75,2.55l-.87-.45a26.17,26.17,0,0,0-8.21-3,11.65,11.65,0,0,0-6.15.65,2.61,2.61,0,0,1-1.36.13c-2.47-.35-4.94-.83-7.42-1.12a13.72,13.72,0,0,0-5.75.68,2.77,2.77,0,0,0-.92.42c-1.16,1.06-2.66,1.41-4,2a13.09,13.09,0,0,0-4.47,3.14,6.9,6.9,0,0,0-1.64,7,4.72,4.72,0,0,0,2.22,2.77,3.9,3.9,0,0,0,5.72-2.4,2.83,2.83,0,0,0-2.85-3.35c-.41.06-.76.56-1.22.92a1.59,1.59,0,0,1-.33-1.59,4.51,4.51,0,0,1,1.9-2.9c.79-.57,1.62-1.09,2.53-1.69.12.56.18,1,.3,1.35a4.38,4.38,0,0,0,5,3,2.65,2.65,0,0,0,2-3.67,1.77,1.77,0,0,0-2.39-1.13l-.38.1-.11-.24a14.48,14.48,0,0,1,1.83-.86c2.62-.78,5.29-.48,8.11-.4l-.45.76a7.3,7.3,0,0,0-1.11,5.65,5.31,5.31,0,0,0,6.29,4,3.48,3.48,0,0,0,2.65-3.94,2.56,2.56,0,0,0-2.43-2c-.49.07-1.05.72-1.29,1.24a.87.87,0,0,1-1.16.6,2.14,2.14,0,0,1-1.84-1.91,3.89,3.89,0,0,1,1.14-3.69,1.66,1.66,0,0,1,1.19-.36c3.92.64,7.82,1.37,11.74,2a22.71,22.71,0,0,0,3.4,0A10.41,10.41,0,0,0,252,354a3.1,3.1,0,0,0,.62,1.83,1.39,1.39,0,0,0,2.3-.47c.19-.45.1-.81-.48-.78-1.23.07-1.79-.66-1.34-1.8a9.13,9.13,0,0,1,.56-1l1,.49a57.59,57.59,0,0,0,9.86,4.4,13.35,13.35,0,0,0,6.18.45c3.17-.56,5.86-1.74,6.67-5.21a12.49,12.49,0,0,0,1.83.85,2,2,0,0,0,2.17-.79,1.79,1.79,0,0,0,.14-2.06,1.39,1.39,0,0,0-1.57-.79,9,9,0,0,1,4.49-2.45,8.09,8.09,0,0,0-.26,1.89A1.83,1.83,0,0,0,286.11,350.06Zm-46.25-1.82c2.37-1,10,.71,11.65,2.63C247.42,350.74,243.84,349,239.86,348.24Zm30.75,5.17a6.88,6.88,0,0,1-6.48,1.53,34.88,34.88,0,0,1-9.46-4c-.06,0-.08-.13-.11-.2a9.37,9.37,0,0,1,8.21-3.86,4.72,4.72,0,0,1,3.62,1.91,7.29,7.29,0,0,1,.47.88c-.31-.09-.41-.13-.52-.15a2,2,0,0,0-1.56,3.58,2.05,2.05,0,0,0,2.73-.77,3.18,3.18,0,0,0,.48-3.11c1.1-.33,1.16-.52.45-1.36.49-.79,1.1-.63,1.71-.3A3.63,3.63,0,0,1,270.61,353.41Z" />',
                            '<path class="cls-2" d="M291.14,347a1.23,1.23,0,0,0,1.33,1.22,1.28,1.28,0,1,0,0-2.56A1.24,1.24,0,0,0,291.14,347Z" />',
                            '<path class="cls-2" d="M301.55,347a1.27,1.27,0,0,0,1.27,1.3,1.28,1.28,0,1,0,0-2.56A1.26,1.26,0,0,0,301.55,347Z" />',
                            '<rect class="cls-2" x="143.35" y="342.34" width="308.57" height="1" />',
                            '<polygon class="cls-3" points="311.26 184.63 304.62 170.96 297.99 157.28 306.75 153.03 315.51 148.77 322.15 162.44 328.8 176.12 317.35 174.84 311.26 184.63" />',
                            '<polygon class="cls-3" points="284.01 184.63 290.65 170.96 297.29 157.28 288.53 153.03 279.76 148.77 273.12 162.44 266.48 176.12 277.94 174.84 284.01 184.63" />',
                            '<path class="cls-4" d="M307.13,163.51a7.21,7.21,0,0,1-3.48-1,10.65,10.65,0,0,0-11,.15,7.22,7.22,0,0,1-3.44,1.09c-1.83,0-3.41-1-4.7-3.16a10.74,10.74,0,0,0-9.66-5.4c-3.95,0-5.92-1.92-6-5.87a10.71,10.71,0,0,0-5.65-9.51c-3.43-2-4.17-4.61-2.29-8.08a10.71,10.71,0,0,0-.14-11.07c-2-3.41-1.31-6.08,2.06-8.14a10.7,10.7,0,0,0,5.41-9.66c0-4,1.92-5.92,5.86-6a10.73,10.73,0,0,0,9.51-5.65c1.24-2.17,2.79-3.28,4.62-3.3a7.31,7.31,0,0,1,3.47,1,10.65,10.65,0,0,0,11.05-.15,7.35,7.35,0,0,1,3.45-1.1c1.82,0,3.4,1,4.7,3.17a10.71,10.71,0,0,0,9.66,5.4c3.95,0,5.92,1.92,6,5.87a10.67,10.67,0,0,0,5.65,9.5c3.42,2,4.17,4.63,2.29,8.09a10.71,10.71,0,0,0,.14,11.07c2,3.41,1.3,6.08-2.07,8.14a10.71,10.71,0,0,0-5.4,9.65c0,4-1.92,5.92-5.86,6a10.7,10.7,0,0,0-9.51,5.66C310.5,162.38,309,163.49,307.13,163.51Z" />',
                            '<path class="cls-1" d="M298,155a29.29,29.29,0,1,1,28.89-29.68A29.34,29.34,0,0,1,298,155Z" />',
                            '<path class="cls-6" d="M297.64,145a19.3,19.3,0,1,1,19.3-19.3A19.32,19.32,0,0,1,297.64,145Zm0-36.57a17.27,17.27,0,1,0,17.27,17.27A17.29,17.29,0,0,0,297.64,108.43Z" />',
                            '<path class="cls-7" d="M297.85,141.88a16.17,16.17,0,1,1,16-16.39A16.19,16.19,0,0,1,297.85,141.88Z" />',
                            '<path class="cls-6" d="M301.53,126.29l10.89-.66-10.87-.36,10.34-3.47-10.59,2.46,9.1-6-9.59,5.12L308,115.2l-7.94,7.42,4.87-9.75-5.76,9.22,2.19-10.69-3.18,10.4-.66-10.88-.37,10.87-3.44-10.34L296.2,122l-6-9.1,5.1,9.59-8.15-7.23,7.41,8-9.75-4.87,9.22,5.75L283.34,122l10.4,3.17-10.89.66,10.87.37-10.34,3.45,10.6-2.45-9.11,6,9.6-5.12-7.23,8.17,7.94-7.43-4.87,9.76,5.76-9.22L293.88,140l3.17-10.4.66,10.89.37-10.87L301.53,140l-2.45-10.59,6,9.1-5.11-9.6,8.16,7.24-7.42-8,9.76,4.87-9.23-5.75,10.68,2.18Zm-3.89-.58Z" />',
                            '<polygon class="cls-1" points="300.6 121.27 309.82 121.35 302.54 127 305.32 135.78 297.69 130.62 290.19 135.96 292.75 127.12 285.35 121.64 294.56 121.34 297.48 112.6 300.6 121.27" />',
                            '<path class="cls-8" d="M305.39,135.88l-7.7-5.22-7.56,5.4,2.58-8.93-7.48-5.53,9.29-.3,3-8.81,3.15,8.74,9.3.07L302.59,127Zm-7.7-5.31h0l7.53,5.1L302.5,127h0l7.18-5.58-9.12-.09v0l-3.09-8.56-2.89,8.66h0l-9.1.29,7.34,5.43v0l-2.53,8.75Z" />',
                            '<polygon class="cls-6" points="297.64 125.33 297.72 130.59 305.32 135.75 297.64 125.33" />',
                            '<polygon class="cls-6" points="297.64 125.33 292.75 127.08 290.19 135.93 297.64 125.33" />',
                            '<polygon class="cls-6" points="285.35 121.6 297.64 125.33 294.56 121.3 285.35 121.6" />',
                            '<polygon class="cls-6" points="297.64 125.33 309.82 121.31 302.54 126.96 297.64 125.33" />',
                            '<polygon class="cls-6" points="297.64 125.33 300.6 121.23 297.49 112.61 297.64 125.33" />',
                            '<defs>',
                            '<g id="xz">',
                            '<text class="cls-5" transform="matrix(0.58, -0.81, 0.81, 0.58, 278.96, 115.82)">U</text><text class="cls-5"',
                            'transform="translate(283.45 110.07) rotate(-35.46)">P</text><text class="cls-5"',
                            'transform="translate(289.37 106.18) rotate(-16.39)">C</text><text class="cls-5"',
                            'transform="translate(296.47 104.4) rotate(3.08)">H</text><text class="cls-5"',
                            'transform="translate(303.88 105.04) rotate(23.89)">A</text><text class="cls-5"',
                            'transform="translate(311.19 108.89) rotate(40.04)">I</text><text class="cls-5"',
                            'transform="translate(314.21 111.42) rotate(55.27)">N</text><text class="cls-5"',
                            'transform="translate(318.16 117.89) rotate(72.28)"> </text><text class="cls-5"',
                            'transform="translate(319.51 122.7) rotate(85.56)"> </text><text class="cls-5"',
                            'transform="translate(319.71 127.69) rotate(98.69)"> </text><text class="cls-5"',
                            'transform="translate(318.77 132.6) rotate(112.05)"> </text><text class="cls-5"',
                            'transform="matrix(-0.58, 0.82, -0.82, -0.58, 316.75, 137.13)"> </text><text class="cls-5"',
                            'transform="translate(313.7 141.12) rotate(138.5)"> </text><text class="cls-5"',
                            'transform="matrix(-0.88, 0.47, -0.47, -0.88, 309.86, 144.28)"> </text><text class="cls-5"',
                            'transform="matrix(-0.98, 0.19, -0.19, -0.98, 305.51, 146.66)">', unicode"登", '</text><text class="cls-5"',
                            'transform="translate(297.03 147.91) rotate(-168.17)">', unicode"链", '</text>',
                            '<path class="cls-9" d="M322,125.56a2.78,2.78,0,0,0-.47,1.85,2.73,2.73,0,0,0,1.73-.83,2.78,2.78,0,0,0,.47-1.85A2.73,2.73,0,0,0,322,125.56Z" />',
                            '<path class="cls-9" d="M320.31,125.72a2.79,2.79,0,0,1,.83,1.73,2.26,2.26,0,0,1-2.69-2.19A2.78,2.78,0,0,1,320.31,125.72Z" />',
                            '<path class="cls-9" d="M321.92,129.75a2.75,2.75,0,0,0-.79,1.75A2.81,2.81,0,0,0,323,131a2.71,2.71,0,0,0,.78-1.75A2.8,2.8,0,0,0,321.92,129.75Z" />',
                            '<path class="cls-9" d="M320.26,129.63a2.75,2.75,0,0,1,.51,1.84,2.27,2.27,0,0,1-2.27-2.63A2.79,2.79,0,0,1,320.26,129.63Z" />',
                            '<path class="cls-9" d="M321.14,133.87a2.74,2.74,0,0,0-1.08,1.59,2.84,2.84,0,0,0,1.91-.19,2.73,2.73,0,0,0,1.07-1.59A2.68,2.68,0,0,0,321.14,133.87Z" />',
                            '<path class="cls-9" d="M319.51,133.45a2.74,2.74,0,0,1,.2,1.91,2.26,2.26,0,0,1-1.77-3A2.77,2.77,0,0,1,319.51,133.45Z" />',
                            '<path class="cls-9" d="M319.65,137.79a2.77,2.77,0,0,0-1.33,1.38,2.76,2.76,0,0,0,1.91.14,2.8,2.8,0,0,0,1.34-1.37A2.76,2.76,0,0,0,319.65,137.79Z" />',
                            '<path class="cls-9" d="M318.13,137.1A2.76,2.76,0,0,1,318,139a2.77,2.77,0,0,1-1.38-1.33,2.74,2.74,0,0,1,.15-1.91A2.77,2.77,0,0,1,318.13,137.1Z" />',
                            '<path class="cls-9" d="M317.51,141.4a2.71,2.71,0,0,0-1.55,1.12,2.27,2.27,0,0,0,3.41-.65A2.78,2.78,0,0,0,317.51,141.4Z" />',
                            '<path class="cls-9" d="M316.13,140.45a2.78,2.78,0,0,1-.47,1.86,2.26,2.26,0,0,1-.65-3.41A2.76,2.76,0,0,1,316.13,140.45Z" />',
                            '<path class="cls-9" d="M314.78,144.57a2.73,2.73,0,0,0-1.72.83,2.69,2.69,0,0,0,1.74.79,2.77,2.77,0,0,0,1.73-.83A2.78,2.78,0,0,0,314.78,144.57Z" />',
                            '<path class="cls-9" d="M313.58,143.4a2.8,2.8,0,0,1-.78,1.76,2.26,2.26,0,0,1-.06-3.48A2.75,2.75,0,0,1,313.58,143.4Z" />',
                            '<path class="cls-9" d="M311.54,147.22a2.76,2.76,0,0,0-1.85.53,2.26,2.26,0,0,0,3.43.55A2.81,2.81,0,0,0,311.54,147.22Z" />',
                            '<path class="cls-9" d="M310.55,145.87a2.72,2.72,0,0,1-1.08,1.58,2.77,2.77,0,0,1-.52-1.84A2.72,2.72,0,0,1,310,144,2.73,2.73,0,0,1,310.55,145.87Z" />',
                            '<path class="cls-9" d="M321.53,120.33a4.63,4.63,0,0,1-.57,3.14,3.75,3.75,0,0,1-1.47-5.57A4.59,4.59,0,0,1,321.53,120.33Z" />',
                            '<path class="cls-9" d="M321.34,127a23.17,23.17,0,0,0-.41-4.1l-.12,0a24,24,0,0,1,.41,4.08A23.26,23.26,0,0,1,307,148.76v.13A23.4,23.4,0,0,0,321.34,127Z" />',
                            '<path class="cls-9" d="M273.31,126.2a2.8,2.8,0,0,1,.52,1.84,2.26,2.26,0,0,1-2.27-2.62A2.79,2.79,0,0,1,273.31,126.2Z" />',
                            '<path class="cls-9" d="M275,126.32a2.75,2.75,0,0,0-.78,1.76,2.28,2.28,0,0,0,2.64-2.27A2.81,2.81,0,0,0,275,126.32Z" />',
                            '<path class="cls-9" d="M273.47,130.39a2.73,2.73,0,0,1,.83,1.73,2.26,2.26,0,0,1-2.69-2.2A2.81,2.81,0,0,1,273.47,130.39Z" />',
                            '<path class="cls-9" d="M275.14,130.23a2.72,2.72,0,0,0-.47,1.85,2.26,2.26,0,0,0,2.19-2.69A2.73,2.73,0,0,0,275.14,130.23Z" />',
                            '<path class="cls-9" d="M274.36,134.49a2.8,2.8,0,0,1,1.13,1.56,2.27,2.27,0,0,1-3-1.7A2.75,2.75,0,0,1,274.36,134.49Z" />',
                            '<path class="cls-9" d="M276,134a2.74,2.74,0,0,0-.14,1.91,2.72,2.72,0,0,0,1.56-1.11,2.81,2.81,0,0,0,.13-1.92A2.81,2.81,0,0,0,276,134Z" />',
                            '<path class="cls-9" d="M276,138.37a2.8,2.8,0,0,1,1.37,1.34,2.75,2.75,0,0,1-1.91.19,2.8,2.8,0,0,1-1.37-1.33A2.73,2.73,0,0,1,276,138.37Z" />',
                            '<path class="cls-9" d="M277.46,137.64a2.75,2.75,0,0,0,.19,1.91,2.26,2.26,0,0,0,1.14-3.28A2.72,2.72,0,0,0,277.46,137.64Z" />',
                            '<path class="cls-9" d="M278.19,141.92a2.76,2.76,0,0,1,1.58,1.08,2.27,2.27,0,0,1-3.43-.56A2.74,2.74,0,0,1,278.19,141.92Z" />',
                            '<path class="cls-9" d="M279.54,140.94a2.79,2.79,0,0,0,.52,1.84,2.8,2.8,0,0,0,1.09-1.58,2.75,2.75,0,0,0-.53-1.84A2.76,2.76,0,0,0,279.54,140.94Z" />',
                            '<path class="cls-9" d="M281,145a2.78,2.78,0,0,1,1.74.79,2.76,2.76,0,0,1-1.72.83,2.7,2.7,0,0,1-1.75-.79A2.73,2.73,0,0,1,281,145Z" />',
                            '<path class="cls-9" d="M282.17,143.82a2.82,2.82,0,0,0,.83,1.73,2.25,2.25,0,0,0,0-3.47A2.74,2.74,0,0,0,282.17,143.82Z" />',
                            '<path class="cls-9" d="M284.32,147.59a2.75,2.75,0,0,1,1.86.47,2.28,2.28,0,0,1-3.42.65A2.75,2.75,0,0,1,284.32,147.59Z" />',
                            '<path class="cls-9" d="M285.25,146.2a2.8,2.8,0,0,0,1.14,1.56,2.26,2.26,0,0,0-.65-3.41A2.79,2.79,0,0,0,285.25,146.2Z" />',
                            '<path class="cls-9" d="M273.61,121a4.62,4.62,0,0,0,.65,3.12,3.75,3.75,0,0,0,1.32-5.6A4.58,4.58,0,0,0,273.61,121Z" />',
                            '<path class="cls-9" d="M274,127.66a22.42,22.42,0,0,1,.31-4.11l.11,0a23,23,0,0,0-.3,4.08A23.26,23.26,0,0,0,288.92,149v.13A23.38,23.38,0,0,1,274,127.66Z" />',
                            '</g>',
                            '</defs>',
                            '<use href="#xz">',
                            '<animateTransform attributeName="transform" type="rotate" begin="0" dur="8" from="0 298 126" to="360 298 126"',
                            'repeatCount="indefinite" />',
                            '</use>',
                        '</svg>'
                    "</svg>"
                )
            );
    }

    // no unicode
    function generateSVG3(SVGParam memory svnParam, uint256 tokenId)
        internal
        pure
        returns (string memory svg)
    {
        string memory author = svnParam.author;
        string memory title = svnParam.title;
        string memory date = svnParam.date;
        string memory fileHash = svnParam.fileHash;

        return
            string(
                abi.encodePacked(
                    '<svg id="l1" data-name="l_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 595.28 841.89">',
                    "<defs>",
                    "<style>",
                    ".c1 {fill: #fff;}",
                    ".c2 {font-size: 14px;}",
                    ".c2,.c3,.c4,.c5,.c6 {fill: #040000;}",
                    ".c2,.c3,.c5 {font-family: PingFangSC-Regular-GBpc-EUC-H, PingFang SC;}",
                    ".c3 {font-size: 7px;}",
                    ".c4 {font-size: 28px;font-family: PingFangSC-Medium-GBpc-EUC-H, PingFang SC;}",
                    ".c5 {font-size: 14.7px;}",
                    ".c6 {font-size: 15.47px;font-family: PingFangSC-Semibold-GBpc-EUC-H, PingFang SC;}",
                    "</style>",
                    "</defs>",
                    "<title>",
                    'title: ',
                    "</title>",
                    '<path class="c1" d="M595.28,841.89H0V0H595.28Z" />',
                    '<text class="c2" transform="translate(194.98 695.62)">',
                    'Upchain Commutity-Chinese blockchain technology community',
                    "</text>",
                    '<text class="c3" transform="translate(194.15 712.44)">Upchain Commutity-Chinese blockchain technology community</text>',
                    '<text class="c4" transform="translate(185.64 298.41)">',
                    'yuanchuangzuopin: ',
                    "</text>",
                    '<text class="c5" transform="translate(117.43 450.13)">',
                    'title',
                    "</text>",
                    '<text class="c5" transform="translate(203.07 449.55)">',
                    title,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 482.85)">Token ID',
                    ':',
                    "</text>",
                    '<text class="c5" transform="translate(203.07 482.42)">',
                    Strings.toString(tokenId),
                    "</text>",
                    '<text class="c5" transform="translate(117.43 515.57)">',
                    'hash: ',
                    "</text>",
                    '<text class="c5" transform="translate(203.07 515.28)">',
                    fileHash,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 548.29)">',
                    'author: ',                    
                    "</text>",
                    '<text class="c5" transform="translate(203.07 548.15)">',
                    author,
                    "</text>",
                    '<text class="c5" transform="translate(117.43 581.02)">',
                    'date: ',
                    "</text>",
                    '<text class="c5" transform="translate(203.07 581.02)">',
                    date,
                    "</text>",
                    '<text class="c6" transform="translate(168.52 326.54)">CERTIFICATE OF ORIGINAL WORK</text>',
                    '<image href="https://img.learnblockchain.cn/img/ucbackground.svg" height="841.89" width="595.28" x="0" y="0" />',
                    '</svg>'
                )
            );
    }
    

    function generateTokenUri(string memory svgFormat)
        internal
        pure
        returns (string memory)
    {
        return
            string(
                abi.encodePacked(
                    "data:image/svg+xml;base64,",
                    Base64.encode(bytes(abi.encodePacked(svgFormat)))
                )
            );
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        super._burn(tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)

pragma solidity ^0.8.0;

import "../ERC721.sol";

/**
 * @dev ERC721 token with storage based token URI management.
 */
abstract contract ERC721URIStorage is ERC721 {
    using Strings for uint256;

    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = _baseURI();

        // If there is no base URI, return the token URI.
        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }

        return super.tokenURI(tokenId);
    }

    /**
     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual override {
        super._burn(tokenId);

        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../ERC721.sol";
import "./IERC721Enumerable.sol";

/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0;

/// @title Base64
/// @author Brecht Devos - <b[email protected]>
/// @notice Provides functions for encoding/decoding base64
library Base64 {
    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    bytes  internal constant TABLE_DECODE = hex"0000000000000000000000000000000000000000000000000000000000000000"
                                            hex"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000"
                                            hex"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000"
                                            hex"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000";

    function encode(bytes memory data) internal pure returns (string memory) {
        if (data.length == 0) return '';

        // load the table into memory
        string memory table = TABLE_ENCODE;

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((data.length + 2) / 3);

        // add some extra buffer at the end required for the writing
        string memory result = new string(encodedLen + 32);

        assembly {
            // set the actual output length
            mstore(result, encodedLen)

            // prepare the lookup table
            let tablePtr := add(table, 1)

            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))

            // result ptr, jump over length
            let resultPtr := add(result, 32)

            // run over the input, 3 bytes at a time
            for {} lt(dataPtr, endPtr) {}
            {
                // read 3 bytes
                dataPtr := add(dataPtr, 3)
                let input := mload(dataPtr)

                // write 4 characters
                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))
                resultPtr := add(resultPtr, 1)
                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))
                resultPtr := add(resultPtr, 1)
            }

            // padding with '='
            switch mod(mload(data), 3)
            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
        }

        return result;
    }

    function decode(string memory _data) internal pure returns (bytes memory) {
        bytes memory data = bytes(_data);

        if (data.length == 0) return new bytes(0);
        require(data.length % 4 == 0, "invalid base64 decoder input");

        // load the table into memory
        bytes memory table = TABLE_DECODE;

        // every 4 characters represent 3 bytes
        uint256 decodedLen = (data.length / 4) * 3;

        // add some extra buffer at the end required for the writing
        bytes memory result = new bytes(decodedLen + 32);

        assembly {
            // padding with '='
            let lastBytes := mload(add(data, mload(data)))
            if eq(and(lastBytes, 0xFF), 0x3d) {
                decodedLen := sub(decodedLen, 1)
                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {
                    decodedLen := sub(decodedLen, 1)
                }
            }

            // set the actual output length
            mstore(result, decodedLen)

            // prepare the lookup table
            let tablePtr := add(table, 1)

            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))

            // result ptr, jump over length
            let resultPtr := add(result, 32)

            // run over the input, 4 characters at a time
            for {} lt(dataPtr, endPtr) {}
            {
               // read 4 characters
               dataPtr := add(dataPtr, 4)
               let input := mload(dataPtr)

               // write 3 bytes
               let output := add(
                   add(
                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),
                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),
                   add(
                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),
                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)
                    )
                )
                mstore(resultPtr, shl(232, output))
                resultPtr := add(resultPtr, 3)
            }
        }

        return result;
    }
}

// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.7.6;

import "./HexStrings.sol";

library Addr {
    using HexStrings for uint160;

    function addressToString(address addr)
        internal
        pure
        returns (string memory)
    {
        return (uint160(addr)).toHexString(20);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity >= 0.4.22 <0.9.0;

library console {
	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

	function _sendLogPayload(bytes memory payload) private view {
		uint256 payloadLength = payload.length;
		address consoleAddress = CONSOLE_ADDRESS;
		assembly {
			let payloadStart := add(payload, 32)
			let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
		}
	}

	function log() internal view {
		_sendLogPayload(abi.encodeWithSignature("log()"));
	}

	function logInt(int p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(int)", p0));
	}

	function logUint(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function logString(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function logBool(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function logAddress(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function logBytes(bytes memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
	}

	function logBytes1(bytes1 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
	}

	function logBytes2(bytes2 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
	}

	function logBytes3(bytes3 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
	}

	function logBytes4(bytes4 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
	}

	function logBytes5(bytes5 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
	}

	function logBytes6(bytes6 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
	}

	function logBytes7(bytes7 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
	}

	function logBytes8(bytes8 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
	}

	function logBytes9(bytes9 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
	}

	function logBytes10(bytes10 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
	}

	function logBytes11(bytes11 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
	}

	function logBytes12(bytes12 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
	}

	function logBytes13(bytes13 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
	}

	function logBytes14(bytes14 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
	}

	function logBytes15(bytes15 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
	}

	function logBytes16(bytes16 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
	}

	function logBytes17(bytes17 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
	}

	function logBytes18(bytes18 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
	}

	function logBytes19(bytes19 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
	}

	function logBytes20(bytes20 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
	}

	function logBytes21(bytes21 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
	}

	function logBytes22(bytes22 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
	}

	function logBytes23(bytes23 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
	}

	function logBytes24(bytes24 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
	}

	function logBytes25(bytes25 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
	}

	function logBytes26(bytes26 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
	}

	function logBytes27(bytes27 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
	}

	function logBytes28(bytes28 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
	}

	function logBytes29(bytes29 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
	}

	function logBytes30(bytes30 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
	}

	function logBytes31(bytes31 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
	}

	function logBytes32(bytes32 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
	}

	function log(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function log(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function log(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function log(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function log(uint p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
	}

	function log(uint p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
	}

	function log(uint p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
	}

	function log(uint p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
	}

	function log(string memory p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
	}

	function log(string memory p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
	}

	function log(string memory p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
	}

	function log(string memory p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
	}

	function log(bool p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
	}

	function log(bool p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
	}

	function log(bool p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
	}

	function log(bool p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
	}

	function log(address p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
	}

	function log(address p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
	}

	function log(address p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
	}

	function log(address p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
	}

	function log(uint p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
	}

	function log(uint p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
	}

	function log(uint p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
	}

	function log(uint p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
	}

	function log(uint p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
	}

	function log(uint p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
	}

	function log(uint p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
	}

	function log(uint p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
	}

	function log(uint p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
	}

	function log(uint p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
	}

	function log(uint p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
	}

	function log(uint p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
	}

	function log(string memory p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
	}

	function log(string memory p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
	}

	function log(string memory p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
	}

	function log(string memory p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
	}

	function log(bool p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
	}

	function log(bool p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
	}

	function log(bool p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
	}

	function log(bool p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
	}

	function log(bool p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
	}

	function log(bool p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
	}

	function log(bool p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
	}

	function log(bool p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
	}

	function log(bool p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
	}

	function log(bool p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
	}

	function log(bool p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
	}

	function log(bool p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
	}

	function log(address p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
	}

	function log(address p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
	}

	function log(address p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
	}

	function log(address p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
	}

	function log(address p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
	}

	function log(address p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
	}

	function log(address p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
	}

	function log(address p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
	}

	function log(address p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
	}

	function log(address p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
	}

	function log(address p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
	}

	function log(address p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
	}

	function log(address p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
	}

	function log(address p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
	}

	function log(address p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
	}

	function log(address p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
	}

	function log(uint p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
	}

}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.6;

library HexStrings {
    bytes16 internal constant ALPHABET = '0123456789abcdef';

    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = '0';
        buffer[1] = 'x';
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = ALPHABET[value & 0xf];
            value >>= 4;
        }
        require(value == 0, 'Strings: hex length insufficient');
        return string(buffer);
    }

    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length);
        for (uint256 i = buffer.length; i > 0; i--) {
            buffer[i - 1] = ALPHABET[value & 0xf];
            value >>= 4;
        }
        return string(buffer);
    }
}