// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './IERC165.sol';
import './IERC721.sol';
import './IERC721Metadata.sol';
import './IERC721Receiver.sol';
import './Art.sol';

/**
 * @dev Minimal Purely On-chain ERC721
 */
contract ArtTest is Art
, IERC165 
, IERC721
, IERC721Metadata
{
    constructor () {
        _artist = msg.sender;
    }

    // Permissions ---
    address private _artist;
    modifier onlyArtist(){
        require(_artist == msg.sender, 'a');
        _;
    }

    // Interfaces ---
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public pure override(IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId
            ;
    }

    // Metadata ---
    string private constant _name = 'TestContract';
    string private constant _symbol = 'TEST';

    function name() public pure override(IERC721Metadata) returns (string memory) {
        return _name;
    }

    function symbol() public pure override(IERC721Metadata) returns (string memory) {
        return _symbol;
    }

    // On-chain json must be wrapped in base64 dataUri also: 
    // Reference: https://andyhartnett.medium.com/solidity-tutorial-how-to-store-nft-metadata-and-svgs-on-the-blockchain-6df44314406b

    // Open sea contractURI to get open sea metadata
    // https://docs.opensea.io/docs/contract-level-metadata
    function contractURI() public pure returns (string memory) {
        return generateArt(0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F, 7);
    }

    function tokenURI(uint256 tokenId) public pure override(IERC721Metadata) returns (string memory) {
        return generateArt(tokenId, 3);
    }

    // // Token Metadata:
    // /**
    // {
    //     "name": "{tokenName}",
    //     "image": "<svg width='100%' height='100%' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg' xmlns:svg='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><image width='100%' height='100%' style='image-rendering:pixelated; image-rendering:crisp-edges' xlink:href='{tokenImage}'/></svg>", 
    // }
    //  */
    // string private constant _tokenJson_a = '{"name":"';
    // string private constant _tokenJson_b = "\",\"image\":\"";
    // string private constant _tokenJson_c = "\"}";

    // function getTokenName(uint256 tokenId) public pure returns (string memory) {
    //     return _symbol;
    // }
    // function getTokenImageSvg(uint256 tokenId) public pure returns (string memory) {
    //     return generateString(tokenId, 4);
    // }

    // // https://docs.opensea.io/docs/metadata-standards
    // function tokenURI(uint256 tokenId) public pure override(IERC721Metadata) returns (string memory) {
    //     string memory jsonBase64 = Base64.encode(bytes(tokenJson(tokenId)));
    //     return string(abi.encodePacked('data:application/json;base64,', jsonBase64));
    // }
    // function tokenJson(uint256 tokenId) public pure returns (string memory) {
    //     return string(abi.encodePacked(
    //         _tokenJson_a, 
    //         getTokenName(tokenId), 
    //         _tokenJson_b,
    //         getTokenImageSvg(tokenId),
    //         _tokenJson_c
    //     ));
    // }
    // function tokenImage(uint256 tokenId) public pure returns (string memory) {
    //     return getTokenImageSvg(tokenId);
    // }

    // Token Ownership ---
    uint256 private _totalSupply;
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // uint256 private _projectIdLast;

    /** tokenId => owner */ 
    mapping (uint256 => address) private _owners;
    function ownerOf(uint256 tokenId) public view override(IERC721) returns (address) {
        return _owners[tokenId];
    }

    /** Owner balances */
    mapping(address => uint256) private _balances;
    function balanceOf(address user) public view override(IERC721) returns (uint256) {
        return _balances[user];
    }

    /** Create a new nft
     *
     * tokenId = totalSupply (i.e. new tokenId = length, like a standard array index, first tokenId=0)
     */
    function createToken(uint256 tokenId) public onlyArtist returns (uint256) {

        // nextTokenId = _totalSupply
        require(_totalSupply == tokenId, 'n' );
        _totalSupply++;

        _balances[msg.sender] += 1;
        _owners[tokenId] = msg.sender;
    
        emit Transfer(address(0), msg.sender, tokenId);

        return tokenId;
    }

    // Transfers ---

    function _transfer(address from, address to, uint256 tokenId) internal  {
        // Is from actually the token owner
        require(ownerOf(tokenId) == from, 'o');
        // Does msg.sender have authority over this token
        require(_isApprovedOrOwner(tokenId), 'A');
        // Prevent sending to 0
        require(to != address(0), 't');

        // Clear approvals from the previous owner
        if(_tokenApprovals[tokenId] != address(0)){
            _approve(address(0), tokenId);
        }

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public override(IERC721) {
        _transfer(from, to, tokenId);
        _checkReceiver(from, to, tokenId, '');
    }
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data_) public override(IERC721) {
        _transfer(from, to, tokenId);
        _checkReceiver(from, to, tokenId, data_);
    }
    function transferFrom(address from, address to, uint256 tokenId) public virtual override(IERC721) {
        _transfer(from, to, tokenId);
    }

    function _checkReceiver(address from, address to, uint256 tokenId, bytes memory data_) internal  {
        
        // If contract, confirm is receiver
        uint256 size; 
        assembly { size := extcodesize(to) }
        if (size > 0)
        {
            bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data_);
            require(retval == IERC721Receiver(to).onERC721Received.selector, 'z');
        }
    }

    // Approvals ---

    /** Temporary approval during token transfer */ 
    mapping (uint256 => address) private _tokenApprovals;

    function approve(address to, uint256 tokenId) public override(IERC721) {
        address owner = ownerOf(tokenId);
        require(owner == msg.sender || isApprovedForAll(owner, msg.sender), 'o');

        _approve(to, tokenId);
    }
    function _approve(address to, uint256 tokenId) internal {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    function getApproved(uint256 tokenId) public view override(IERC721) returns (address) {
        return _tokenApprovals[tokenId];
    }

    /** Approval for all (operators approved to transfer tokens on behalf of an owner) */
    mapping (address => mapping (address => bool)) private _operatorApprovals;

    function setApprovalForAll(address operator, bool approved) public virtual override(IERC721) {
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }
    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {
        return _operatorApprovals[owner][operator];
    }
    function _isApprovedOrOwner(uint256 tokenId) internal view  returns (bool) {
        address owner = ownerOf(tokenId);
        return (owner == msg.sender 
            || getApproved(tokenId) == msg.sender 
            || isApprovedForAll(owner, msg.sender));
    }

}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;



abstract contract Art {

    function generateArt(uint rvs, uint kind) public pure returns (string memory) {
        return string(generateArtData(rvs, kind));
    }

    /** 
     * kind: bit 0x01 = base64
     * kind: bit 0x02 = tokenURI/contractURI json
     * kind: bit 0x04 = contractURI (instead of tokenURI)
     * kind: bit 0x08 = kitten (instead of cat)
     * kind: bit 0x10 = breed ticket
     * kind: bit 0x40 = Memory dump
     */
    function generateArtData(uint rvs, uint kind) public pure returns (bytes memory) {
        bytes memory output;
        

        // DataPack 
        bytes memory pDataPackCompressed = hex"08207374796c653d27086c696e656172477208ff02616469656e74073a75726c28237808207472616e73666f08ff0166696c6cff0404272f3e3c087472616e736c6174062069643d277806ff05726d3d27073b7374726f6b65083e3c73746f70ff0108ff0c73746f702d6308ff0d6f6c6f723a0008ff0eff072fff033e0820786c696e6b3a6808ff107265663d27230827ff0f3cff03ff09082f673e3c2f673e3c06ff0aff08652808ff07757365ff1178083d272d333030272008636c6970506174680666696c74657207273e3c7061746808206f706163697479087363616c65282d3108ff0b2d776964746807190e0110190e02063d27363030270820636c69702d706108ff1f74683d27757207190e0810190e09086c6c69707365ff06052720643d2707ff072f673e3c67070e090e0c1a1001051609160c1a06190e0a10180a083e3c72656374207808ff28ff1679ff167708ff2969647468ff1e08ff2a20686569676808272063793d2700270729272063783d270719110113191102030b180a08191d070b191d080b06ff206c28237806ff1d3c190e0305ff1a3d270007ff0aff1b2c312907ff2c2072783d2707ff0b2d6c696e65071109110c1a130206272072793d2708ff0166696c6c3a6e08191903091919040b082004a5300e04a60d0828b1b2b3b4a9a40d082004a53028b5b6b707ff2b74ff1eff06063a726f756e6406190e07100b100474696f6e03273e3c0527ff14302c05090b02050d03002366041c1a1c0504261a260607ff396f6e65ff0b07293bff18ff043207ff3db804a60d21082720ff17556e697408ff4b733d2775736508ff4c72537061636508ff24ff33ff19ff0608ff366a6f696eff3f0819190209ff3a191908286caaabaca7640d081c04a8de28adaeaf086b0d21f1ff3c21f1030d12b20470617468040d17b62807ff4d4f6e55736507190e043d190e050719110613191107073308330918330b071909190c1919010611272326180a03302c2d08657363726970ff410827ff01636f6c6f7208ff5f2d696e74657208ff60706f6c61ff4108ff612dff18733a7308ff62524742ff426608ff6365476175737308ff6469616e426c7508ff6572207374644408ff6665766961ff41082720726573756c7408ff683d27626c757208ff69ff072fff183e08ff42616e696d617408272072657065617408ff6c436f756e743d08ff6d27696e64656608ff6e696e6974652708ff57ff1920643d2708726f74617465280008191604301916050d081914050b1914060b08ff3b21f1ff5121f108ff74ff52b004ff53051309130c1a051a1417142004ff07ff13031916010319160203191603031916060319160703191608067363616c652806ff153336ff4304211a2104041d091d0c0404051a0103311a3107ff153239ff432007302c352c2d3630072920ff1b2c3129071913060b191307071913022119130307ff30191d09ff2f0718320b0b18320907ff50050b191906071914020919140307ff73191407ff2f071c05bb2b02050d07041d04051b020405ff4265ff2205ff210b0b10050202191d060502070d12b40345191303351a35036500230330002303673e3c030dff2f0319160403191605031916090319160a0319160b0319160c0319160d0319160e083d27687474703a2f08ffa32f7777772e7708ffa4332e6f72672f08ff6a3cff18ff093208ff6b654d6fff41200873ff6f20ff553d270827ff0635ff493529083429ff0bff04342908ffaaff4fff36636108ffab70ff3fff1c3a082c36302c352c363008ff04323329ff1c3a08ff48ffae302e382708110618191107ff2f06757365ff11780608310918310b0608320918320b0608330218330b0609140c191401065b205b186003052927ff3133051009100c1a05191907ff2f05090b02070d0465223a2203190e06036600230330303003302c30031723200302050d072720786d6c6e7307ffa76475723d2707ff15333127ff14071f091f0c1a3e0107191f023e191f0307191303281913040708ff9509ff950a0719130c1819130d07190e042f190e0507191001131910020719100111191002071911034519110407181d0b0b181d090718200b0b1820090718310b0b18310907172119011723190702e7ff5402e80d07ff4af3ff75ff4a04696e670004464646460429ff07670429ff426704ff07ff55030a080a03ff541c05ff072fff1705ff17ff093305ff5909180a05ff7919ff7a05ffa226180a052a141714190520461860030529d44377d6030023330300233503ff123103ff234d03191d0103191d0203191d0303191d0403191d0506191f013e0b3e0609100c191001061910034b180a06ff2e4419110306191d0928180a061914040bff8e0611262123180a04ff1c3a3104ff5d313004ff14002904201a20070300236503002336031913010319130503191105032603010365640003002364000000359f7b226e616dffbb544553542d4152542d434f4e5452414354222c2264ff5e223a2254657374204172742044ff5e202d20436f6e747261637422007b226e616dffbb544553542d415254222c2264ff5e223a22436f6f6c2054657374204172742044ff5e22002c2261747472696275746573223a5b7b2274726169745f747970ffbb00222c2276616c75ffbb00227d2c7b2274726169745f747970ffbb00617765736f6d656e657373222c2276616c75ffbb31303025227d5d002c22696d6167ffbb00227d00726f756e64006f76616c006469616d6f6e6400737175617269736800666c75666679007363727566667900706c61696e0063686f6e6b657200736c69636b0072656374616e67756c6172007465656e7900636865656b79006c656d6f6e0073696c6b790063687562627900736b696e6e79007769646500626c6f636b79007570726967687400616c65727400706f696e74790063757276fffd736c616e74fffd666f6c64fffd666c6f707079007369646577617973007065726b7900737068796e780066696572636500737175696e74ffd473756c6c656e006d65656b00737465726e006d65616e0064726f6f70790063726f737300616c6d6f6e6400646f6500676c6172ffd4736c6565707900706c656164ffd47468696e006269670068756765006e6f726d616c00736d616c6c007468696e6e657374006e65757472616c0070757273fffd706c656173fffd706f7574ffd464726f6f70ffd4646973706c656173fffd696d7061727469616c0064756c6c00736d696cffd4646f776e7761726400646f776e7761726453686f7274007570776172640075707761726453686f727400626c61636b00236238646566ffbd3161316231ff97636664326465ff45616661666100233066306631ff983837346636ff98ffbeffbeff45303964396400233264316631360023613036613661fff7646564fffd77686974ff9738623932653900233132313231320023303530353035ff453666366636ff453362346439ffe33833383338ff4566633264340023383232363733ffe363323532650067696e676572ffe46437626231ff4566616537ff98656364646435ff456366636663fff73938363439ff453761343634ff4566656465ff983861343030ffbd6365356635ffbd3332323731ffbd346232393162fff8663366326100677261790023376538343961fffe3264326462ffe43535343633fff86136653763ff4535633764ffbd336433643364ff45356232643400233730336535370062726f776eff4530663066ff98383135643431fffe6564316339ff4532646663ff97343033303163fff86534653335fffe64393739370023343932633138ff4530386538ff973735326634ff98326632333233006272697469736820626c75ff973565363337330023636464306435fffe61646365370023346435313661ffe43035353638fffe636137633100233236323432640023313331323163ffe4373537353700233139316131ffbd3137313631370063616c69636ffff737653264ff97653238343363ff453339363936fff86231653632fff864343034ff9832363236323600637265616d79fff73164306336fff733643663ff973265323532ff98626661383962ffe466343533340023343333353264002337393539343400233239323932390070696e6bffe46534633961ff456662386565ff453164666566ff4566663066ff97643337336265ff456262316561fffe35366462ff973563326535320023613834643934ffe36531383239fff83032393537ffe33431623336006379616e00236238663466ffbd6365646364ffbd6562663866ffbd3664613463ff98613065626638ffe43939626231ffe33835353631fff8383931623100233234323233ffbd313832613335002331353165323300677265656effe436366138ffbd3763613236390023636564656436ffe43037313431ffe337353834350023376139613661ffe3353537343400233166323332ff98333433613331002332343265316600666c65736879ff453364386438ff453265396539ff456665626562fff76362366236ff4533636563ff976433383839370023623437393739ff453061386138ffe465343034ff98613937353735ff4535663566350073616e64fff73463376234fff766653064370023633139643861fffe37623861330023626138383832fff830336533ff97376235363536ffe36132373237fff8663538353800746f79676572ff453039343735fffe65636164630023343932343164ffe338323531ffbd643439316262ffe33731353135002338303830383000626c75ff976436663966660079656c6c6f77ff4539653961ff97636166616133006f72616e6765ff456639633636fff766303930320074616262790073686f727468616972007369616d6573650073616e6463617400616c69656e007a6f6d6269ff973530353035ff9844423730393300234533384641420023ffd5464630ff98ffd5464600233031ffbe3038ff9833333333333300627265fffd70616c65747465006865616400656172006579657300657965436f6c6f72526967687400657965436f6c6f724c65667400707570696c73006d6f75746800776869736b657273003c3f786d6c2076657273696f6e3d27312e302720656e636f64696e673d275554462d3827207374616e64616c6f6e653d276e6f273f3e3c7376672077696474683d273130302527206865696768743d2731303025272076696577426f783d273020302033303020333030272076657273696f6e3d27312e31ffc23a786c696e6bffa5313939392f786c696e6bffc2ffa532ffbe2f737667ffc23a737667ffa532ffbe2f737667ff42646566733e3cff03ff0931ff1232ff1233ff1234ff1235ff1236ff1237ff1238ff1239ffe530ffe531ffe532ffe533ffe534ffe535ffe536ffe537ffe538ffe53927ff0f3cff03ff0f3cff03ff093230ff123231ff123232ff12323327ff0f3cff18ff093234ff673d27302030ffa635ff673d27302e3520302e35ffa636ff673d27352035ffa637ff673d27332033ff6a3c2f64656673ff3e31ffd6ff143135302e302c3135302e302920ff7f31ffd7ff01ff18ff04323429ffc33137ffa84d322c3563ff5d352c332c352c332c3063ff5d352d332c352d332c305aff07ff17ff093238ff704d002c004c005affdb3e3c67ff3132382927ff3e32ffd6ff33ff19ff09323927ff48ff043529fff334ff2300ff85323729ff85353429ff85383129ff8531303829ff4e3729ffe6005affd8ff063829ffe6005aff24ff33ff4267ff093330ff19ff093331ffa9ffe6006336302c31352c36302c32302c36302c323063302c352d36fff42d36fff47affc4202d342c20313829ffc4202d382c333629ffc42d31322c353429ff072fff99ffb1333027ff34ff4e3429ffe6004800ff9134ff2d30272063793d27313635272072783d2700ff383530ff78ff99ff55ff063131ff49362927ff31323829ffe62d39ff5d3563ffbf2c34ff5d34302c39ff5d34306335ffbf2c39302c34302c39302c343063ffbf2c31302c35302c31302c3730632d32302cff5d37302c33fff4302c3330632d33302cff5d38ff5d33fff4ff5d333063ff5d32302c31ff5d37302c31ff5d37307aff78ff9967ff0aff7f002c3129ff42ff99ff99ffdc32ff7000005335ffbf2cffbf5affdbff3e3133ffb732ffd6ff093333ffc33331ffa84d302c3363ff5d332c322c332c322c3063ff5d332d322c332d322c305aff07ffdc34ff70005affdbff3e3134ffb73429ff78ff9967ff3427ff3e3132ffb73229ff153333ff782fff9967ff01ff18ff04323429ff42ffdc35ff70007affdb3e3c67ff3133352927ff3e33ffd6ff33ff9134ff2d30ff353630ff383630ff4effac36ffe6302c004c2d3132342c004c3132342c00ff9134ff2d3130ff353131ff383131ff0765ff2234ff2d2d3130ff353131ff383131ff4e3429ff23004c3135ff5d3135305aff24ff33ff9136ff2d2d3638ff353735ff38313030ff4effac3132ffe62d31362c004c31362c00ff19ff06ffac3132ffe6302c354c2d31362c00ff9139ff2d30ff353136ff383335ff0765ff223130ff2d2d3736ff353730ff38313030ff0765ff2239ff2d3736ff353730ff38313030ff243e3cff55ff3327ff093336ffa9ffe6006336ffbfffad2c3563ff862c352c2d36302c357aff80313429ff802d313429ff8030ff87ff803134ff87ff802d3134ff87ffd8ff3327ff093337ffa9ffe62d32302c006330ffad2c352c363063352cff862c352c2d36307aff15333727ff1431352c3429ff15333727ff1433ffbf29ff78ff13ff9967fff520ff0865282d002c2d0029ff42ffdc38ff57ff19ff09333927fff520ff7f312c312920ff7129ff23007aff6b65206174747269627574654e616d653d27642720747970653d27786d6cff6f206475723d27347327206b657954696d65733d27303b302e343b302e353b302e363b31272076616c7565733d2720002000207a3b2000207a20ff072fff553e3c2fff17ff3e3136ffb738ffd6ff313338ffd7ff1400ffd7ff093430ff913138ff2d00ff3500ff3800ffc33230ffa84dffbf63ff5d352c332c352c332c3063fff42d362c31302d362c305aff072f656c6c697073653e3cff9967fff5ff42636972636c6520723d27323527ff0aff7f302e31352927ff063139ff493729ff24fff5ff42636972636c6520723d27313527ff0aff7f302e31352927ff063139ff493729ff78ff132fff99757365ff09343127ff1178333927ff017374726f6b652d77696474683a32ff0bff043137293b66696c6c3a7472616e73706172656e74ff24ff142d002920ff086528002927ff2b74ff1eff3427ff063135ffb738ffd6ff3133382927ff34ff4267ff1400ff87ff42ffb13430ff78ffb1343127ff34ff7867ff14302c00ffd7ff14ffbfffd7ff14ffbf29ff19ff48ff04323029fff32e35ff23006c302effbe312c302effbe315affd8ff09343227ff48ff04323029fff32e35ff2300ff15343227ff34ff0767ff33ff4330ffd7ff09343327fff5ff19ffafff0aff71ffd8ffafff0aff71ffd8ffafff3327ff0aff71ff072fff99ffb1343327ff34ff78ff1367ff14ffbf29ff19ff06323129ff0bff04323129ff4ffff3ff23005affd8ff09343427ff06323229ff0bff04323129ff4ffff3ff2300ff15343427ff34ff782fff99ff997465787420783d2735252720793d27353025272066696c6c3d27234646ffbe302720746578746c656e6774683d27393025273e464f522054455354494e47204f4e4c59202d20636f6e74616374207269636b6c6f76652e6574683c2f746578743e3c2fff992f7376673e000a01000a024c0a03890a04a80a05b40a06c70a07e50a08f00a0901120a02090a0202120a01020a0112080a010a0b000a0c0f090d0c0a0ef3190d010e0a0f370b100f190d02100a1049190d03100a111d0b1211190d04120a1256190d05120a1317190d06130a145b190d0714190d0809190d090b0a15640b1615190d0a160a162c190d0b16190d0c0f190dff9a0b0d090d0c0a17f9190d01170a17320b1817190d02180a184e190d03180b1811190d04180a1850190d05180a191c190d06190a1a58190d071a0a1b03190d081b190d090b0b1c15190d0a1c0a1c23190d0b1c0a1d33190d0c1d190dff9a090d090d0c0a1efe190d011e0a1e360b1f1e190d021f0a1f4f190d031f0a20180b2120190d04210a2160190d05210a2119190d0621190d07120a220b190d08220a233f190d09230a244a0b2524190d0a250a2506190d0b250a262f190d0c26190dff9a020d090d0c1a270106190d01270a27340b2827190d02280a284d190d03280b2921190d04290a295f190d0529190d0626190d07120b2a09190d082a190d090b0b2a15190d0a2a0a2a20190d0b2a190d0c27190dff9a1b0d0a0d04092b0c1a2c010f192b012c0b2c17192b022c0a2c46192b032c0a2d1a0b2e2d192b042e192b0515192b06210a2e5a192b072e0a2e3c0b2f2e192b082f192b09290b2f15192b0a2f0a2f14192b0b2f192b0c17192bff9a0d2b0a2b0509300c1a310116193001310b311719300231193003280b312119300431193005140a3126193006311930071f0a3227193008320a3359193009330a340e19300a340a353019300b3519300c1e1930ff9a2b3009300c1a36011e193001360b370f193002371930031f0a371b0b383719300438193005330a3825193006381930071a0b3925193008391930090b0a39240b3a3919300a3a0a3a2b19300b3a19300c271930ff9a25300a3007093b0c1a3c0124193b013c0b3c26193b023c193b032c0b3c20193b043c0a3c63193b053c0a3d15193b063d0a3e5c193b073e0b3f2d193b083f193b09230b3f15193b0a3f0a3f31193b0b3f0a4038193b0c40193bff9a303b0a3b0809410c1a42012c194101420b421d19410242194103100b422b194104420a4266194105421941062f0a4354194107430b442e194108441941092d0b441519410a4419410b380a443b19410c440a440d19410d44180a3b410a410909450c1a460132194501460b462719450246194503120b124419450412194505141945060f194507180a120c194508120a144c194509140a465519450a460a472119450b4719450c171945ff9a41450a450a09480c1a49013e194801490b4a351948024a0a4a4b1948034a0a4b1e0b4c4b1948044c19480533194806471948071f1948080d1948090b0b1f3919480a1f19480b3519480c401948ff9a4548091f0c1a330144191f01330b3317191f0233191f032c0b3319191f0433191f053e0a3329191f0633191f07430b3511191f0835191f094b0b351e191f0a35191f0b380a3535191f0c35191fff9a22ffc54bffec3fffc6180b3e09191f043e0a3e61191f053e191f0620191f07430b3e1b191f083e191f090b0b3e15191f0a3e191f0b38191f0c40191f0d0c180a12ffc551ffec17ffc62c0b3e45191f043e191f053c191f0633191f07460b3c2e191f083c191f0915191f0a34191f0b39191f0c0f191f0d44180a441f091f0c1a3c0157191f013c0b3c35191f023c191f03240b3c25191f043c191f051a191f06320a1a53191f071a191f082e191f090b0b3c15191f0a3c0a3c28191f0b3c191f0c0f191f0d0c180a34ffc55effec16ffc6280a3e130b403e191f04400a4044191f05400a401f191f0640191f071a191f082e191f093a191f0a14191f0b17191f0c17191fff9a0c1f0a1a10091f0c1a400165191f01400b461e191f02460a1e62191f031e0b463e191f04460a4657191f0546191f063c0a4851191f07480b4c09191f084c191f090b191f0a0b191f0b4b0a4c2d191f0c4c191fff9a1a1f0a1f11094c0c1a4d016a194c014d0b4d27194c024d194c03180b4d2d194c044d194c051e194c0635194c0746194c080d194c090b0b1e15194c0a1e194c0b2a194c0c17194cff9a1f4c041effd93409460c19460136194602370b36091946033619460427194605301946060b1946073e1946083f1946094419460a3519460b2119460c1819460d4519460eff2f0b4609360c1a46017119360146193602110b463d193603461936042c1936052f1936060b0b460d193607461936081a0a46161936094619360a1a19360b4b19360c1819360d4519360eff2f093609360c1a4c01791936014c193602130b4c331936034c0a3345193604331936051f1936060b0b331b193607331936081f1936092f19360a1319360b4b19360c2819360d4419360eff2f023609130c1a28017ffff928191302110b2841ffc735fffa0bff88ff95ffc8ff950b4b19130c1419130dff950e29180a1b1309130cfff9491913024b0b283effc717fffaff95060219130741191308221913092d19130a3d19130b4b19130c1019130d450a107719130e10180a0dff76280186fff928191302190b280dffc717fffa1fff8821191308111913090d19130a3819130b4bffc9ff950eff2f2bff7628018dfff928ff89ff950432fffa0bff88ff95ffc8ff950b2719130c4819130d2519130eff2f25ff76270195fff927ff89ff95042c0a283efffa2819130624191307011913081b1913094b0a24220b282419130a2819130b2f19130c2319130d250b242719130e24180a30ff7624019cfff924ff891a1913041dfffa17191306121913073e191308200b24201913092419130a2019130b1619130c2319130d120b234019130e23180a3bff762301a3fff923191302210b2309191303231913041dfffa0b0b231719130623191307411913ffc8450a234019130b2319130c1419130d250b142019130e14180a41ff761401acfff914191302370b1409191303140a143a19130414fffa2bff88091913082d1913094419130a3519130b1cffc9ff950eff2f45ff761401b2fff914ff890919130443fffa341913062919130734191308391913094b19130a4719130b01ffc9440b1c1019130e1c180a2213ffed40191002210b131a191003131910041819100545191006021910070d191008261910093b19100a3f19100b4b19100c1819100d4519100eff2f1210ffed0e191002210b130d191003131910040f191005380b0f2b1910060f191007450a0f2e1910080f1910094b19100a3a19100b2d19100c4319100d250a0f8f19100e0f180a4410040fffd934ffed0e1910023c1910030d1910042f19100501191006010b0e0d1910070e0b0e0d1910080e1910090b0b0e1b19100a0e180a0b10090e0c1a1001b9ff322bff5812ffbc010b1016ff400dff9209ff2709ff25c0ff322bffca0cffbc300b1020ff401bff9230ff2702ff25caff1d31190e0309ff5802ffbc1f190e07390b101bff212b0b102bff271bff25d1ff322bff5844ffbc01190e072d0b100dff920dff270dff25d6ff1d38190e033bffca30ffbc010b1023ff4002ff210b190e0a0d180a2bff25dcff1d38190e030d190e042f0b1009190e0510ffbc1f0b1034ff4002ff21020b1002ff2725ff25e1ff3202190e042f0b101b190e0510ffbc46190e072d0b100dff212b0b1009ff2730ff25e8ff321b190e043e190e0534ffbc1a0b1020ff403bff920dff273bff25eeff322b190e043e190e0544ffbc340b100dff400dff920dff2741ff25f5ff320dff5812ffbc010b1034ff400dff9209ff2745ff25f9ff3202ff583effbc020b1034ff400dff21090b1044ff27220e090e0c1a100201ff323bffca12ffbc1b190e07250b100d190e08100b101b190e09100b1030ff27120e090e0c1a100208ff3222190e0446190e0534ffbc0c190e07390b1030190e08100b103b190e09100b1009ff27440e040effd92509100c1a130211ffcb12ffee0bffb8130216ffcb3d19100319180a09ffb813021affcb11ffee02ffb811021fffcc0c19100346180a1bffb8110226ffcc4419100344180a0dffb811022cffcc30ffee2b100410ffd94109110c1a130235ff2e22ffcd25fffb171911061719110709180a0bff373dff2e3b1911032b1911043bfffb1719ffb009ff3744ff2e121911030c1911040dfffb171a130154ffdd02ff374cff2e221911032b19110412fffb2b19ffb01bff3754ff2e12ffcd120b131ffffb131a1301aeff59ff2f0dff375dffef22191104250b1334fffb130a1378ffdd2bff3768ff2e45ffcd44fffb3d19ffb025ff3772ffef3b19110409fffb020b1317ffdd30ff3777ffef340b1302191104130a1347fffb130a1396ffdd3b110411ffd90d09160c1a19027fffde0dff7b01ff72ff7c15ff7d4bff7e0c180a0bff26190288ffde1bff7b01ff72ff7c15ff7d4bff7e0c180a09ff26190296ffde0dff7b2fff72ff7c42ff7d0b0b1901ff7e19180a02ff2619029dffde1bff7b2fff72ff7c42ff7d0b0b1901ff7e19180a1b160401ffd93409160c1a1902a9ff79191a1c02afff7a1c1a2002b7ff7b201a2102bfff9b21ff9c201a2102c7ff7c21ff7d211a2402cfff7e241a2402d7ff9d241a2402dfff9e241a2602e7ff9f261a2602efffa0261a2602f7ffa1261a2602ff00ffdf0bff26270307ff79271a28030dff7a28ff7b21ff9b26ff9c211a210315ff7c211a28031dff7d281a290325ff7e291a29032dff9d291a290335ff9e291a31033dff9fff840345ffa0ff84034dffa131ffa228180a09ff26280355ff79281a28035cff7a281a310364ff7b311a32036cff9b32ff9cff840374ff7c311a32037cff7d321a320384ff7e321a32038cff9d321a330394ff9e331a35039cff9fff9603a4ffa0ff9603acffa1ff9603b4ffa235180a02ff263503bcff7935ff7a1c1a3503c1ff7b351a3603c9ff9b36ff9c35ff7c311a3503d1ff7dff9603d9ff7eff9603e1ff9dff9603e9ff9eff9603f1ff9fff9603f9ffa035ffa129ffa229180a1bff26290401ff79291a290407ff7a291a35040fff7b351a360417ff9b36ff9cff96041fff7cff960427ff7dff96042fff7eff960437ff9dff96043fff9eff960447ff9fff96044fffa0ff960457ffa135ffa221180a0dff2621045fff7921ff7a291a21046cff7b211a350474ff9b35ff9cff817cff7cff8184ff7dff818cff7eff8194ff9dff819cff9eff81a4ff9fff81acffa0ff81b4ffa1ff81bcffa221180a2bff262104c4ff7921ff7a1cff7b311a1c04cbff9b1cff9c31ff7c201a1c04d3ff7d1cff7e20ff9d32ff9e331a1c04dbff9f1c1a1c04e3ffa01c1a1c04ebffa11c1a1c04f3ffa21c180a25ff261c04fbff791cff7a291a1c0502ff7b1c1a20050aff9b20ff9cff4612ff7c1c1a20051aff7d20ff7eff4622ff9d1c1a20052aff9e20ff9f1cffa0241a1c0532ffa1ff463affa21c180a30ff261c0542ff79ff4647ff7a1c1a20054fff7b201a310557ff9b31ff9c201a20055fff7c201a310567ff7dff84056fff7eff840577ff9dff84057fff9eff840587ff9fff84058fffa0ff840597ffa1ff84059fffa231180a3bff263105a7ff7931ff7aff46acff7b1c1a3105b4ff9b31ff9cff46bcff7cff46c4ff7dff46ccff7eff46d4ff9dff46dcff9eff46e4ff9fff46ecffa0ff46f4ffa1ff46fcffa21c180a41ff261c0604ff791c1a31060aff7aff840612ff7b311a33061aff9b33ff9cff840622ff7cff84062aff7dff840632ff7eff84063aff9dff840642ff9eff84064aff9f31ffa0241a310652ffa131ffdf45ff2626065aff7926ff7a281a260661ff7b261a310669ff9b31ff9cff4771ff7cff4779ff7dff4781ff7eff4789ff9dff4791ff9eff4799ff9fff47a1ffa0ff47a9ffa1ff47b1ffdf22ff262606b9ff7926ff7a291a2606beff7b261a2906c6ff9b29ff9c26ff7c321a2606ceff7dff47d6ff7eff47deff9dff47e6ff9eff47eeff9f26ffa0241a2606f6ffa1ff47feffdf12ff26260706ff7926ff7a281a28070dff7b281a290715ff9b29ff9c28ff7cfff61dff7dfff625ff7efff62dff9d20ff9e241a200735ff9ffff63dffa020ffa124ffa224180a44160416ffd92509200c1a280745192001281a28074a19200228180a0b2009200c1a280752192001281a28075919200228180a092009200c1920011c1a1c07611920021c180a0220091c0c1a200769191c01fff670191c0220180a1b1c091c0c191c0119191c0224180a0d1c091c0c191c01271a200778191c0220180a2b1c041cffd92209200c192001191920021d081d0dffce0d181d022b181d1b251920031d081d45ffce09181d0202181d1b1b181d0d0d181d2b2b181d2525181d3030181d3b3b181d41411920041d081d09181d0b0b1920051d081d0dffce09181d0202181d1b1b1920061d1920070b1920080b192009ff2f0b20091d0cffe727ffe82d082002ffcf25ffe92008200dffcf451820022218201b12ffea2008200918200b09ffeb2008201bffcf091820ff9320ff8a09ff821a200780ffe720ffe81508283018280b09182809021828021b18281b0d18280d2b18282b2518282530ffe92808284118280b09182809021828021b18281b0d18280d2b18282b25182825301828303b18283b41ffea2808281b18280b021828091b1828020dffeb2808281b18280b0b182809091828ff9328ff300a28ff00fff002ff821a290786ffe729ffe82f08310dffd00d1831022b18311b25ffe931083125ffd0091831020d18311b2518310d3018312b3bffea31ffb22bffeb31ffb21b191d0631ff8a1bff82ffe721ffe81fffb225ffe93108310218310b0918310912ffea31ffb225ffeb3108311bffd0091831ff9331ff8a0dff821a310790ffe731ffe845083202ff8b25ffe932083202ff8b3bffea32ffb330ffeb3208321bff8b091832ff9332ff8a2bff82ffe714ffe82bffb30bffe932ffb30bffea32ffb322ffeb3208321bff8b091832ff9332191d070c191d0822191d09ff2f25ff821a320798ffe732ffe82bffb41b1833093bffe9ff5a25ffeaff5a12ffeb33ffb40b18330909191d0633191d071a191d0812fff030ff82ffe726ffe82bffb41b1833093bffe9ff5a25ffeaff5a44ffeb3308331b18330b0b183309091833ff9333191d071f191d0844fff03bff821a2807a0ffe728ffe81208333018330b09183309021833021b18331b0d18330d2b18332b251833253bffe93308334118330b09183309021833021b18331b0d18330d2b18332b25183325301833303b18333b41ffea33ffb43b18330941ffebff5a0d191d0633ff300a337f191d0933180a41ff821a3507a6ffe735ffe82b08363b18360b09183609021836021b18361b0d18360d2b18362b25183625301836303bffe93608362518360b021836091b1836020d18361b2b18360d2518362b41ffea3608360918360b45ffeb3608360918360b2b191d0636ff30191d0933180a451d041dffd92209330c1933011919330209193303091933040b1933050b1933060b193307ff2f0b3309190c19190127ff8c09ffb909ff5b20ff8c0bffb902ff5b29ff8c0bffb91bff5b21ff5005091919060919190709180a0dff5b31ff8c09ffb92bff5b141919020bff3a1919050b1919060bffb92519ffb532ff8d09fff13014ffb526ff8d09fff13b14ffb528ff8d0bfff14114ffb535ff8d0b19140409ff8e451404140a090a0c190a0109190a0202190a030d190a043b190a051a04190a090a0c190a0109190a0202190a030d190a043b190a051a190a062a190a07230a1a80190a081a0420ffd941180a0b0b17211901180a0921ffd102fff20226ffd103fff21b2617211902180a0d2117211903180a2b2117211904180a252117211905180a3021ffd104fff23b260421ffd944180a0b0bffc001180a0923ffc002180a0223ffc00317262002ff5c1b27ffc00317262004ff5c0d27ffc005180a2b23ffc00517262006ff5c2527ffc006180a3023ffc00617262003ff5c3b27ffc00617262004ff5c4127ffc007180a4523ffc008180a2223ffc00717262008ff5c122704230a060a1e06260f06270e062810062911062a0107310b07320907330207351b07360d07372b073925073a30073d3b073b41073e45073f2207221207124407403407340c22421d310216311d42161d144217143103174231041743310517463106174731071748310817493109174c1d02174d1d04174e1d05174f1d0617501d07141d3e1a143e3f1a1b3f3e4e143e22441422401a051a141e40321a161a14400514421e323314161442320532431e333532163243330533461e351233163346350535461340350224354002091e4012351c124009163546121312350b1b40123e2412400b331340350b1b42403e243e42353320330a1b1e0a3633243347470a200a261b1e26370a240a4848261e2639271e273a281e283d291e293b2a162a211a161a23141314490b152134491b231421171419011021ffe0021034ffe0031035ffe0041036ffe00510192a1417142001102aff77021037ff77031039ff7704103aff7705103bff7706103dff77071040ff770810201a14041423041a2304234c16421128171142051728420217434203174442041646163216161c1216121c3e171c160217321202243e22321c2447221c32171c4602173246061748460717494608174c4603174e4605175146091752460a1753460b1754460c1755460d1756460e04571c241c3f483224583f32481a3207ad1a3f07b51a4807bd0c594f1b5a365924595a1c4c1b5a364f244f5a1c4c1b4c3650245a4c584f0c4c501b5b2a4c244c5b1c4e1b5b2a50245c5b1c4e1b5b2a50245d5b584e244e501c58245b401c492449501c5b245b204e49245e50585b1a5007c51a5b07cf245f4d5b2424244d505b1a4d07d71a5007e1165b1e33161e0f0a160a0e26160e1027160f0129170131011710460117265b0117271e0117290a01173112011733160124462231331731160117161201241222311617160e011722420117310f011233030b1a0307e926330301ff8307effffc10ff8307f7fffc26ff8307fcfffc27ff830800fffc29ff830805fffc46ff830813fffc12ff830820fffc16ff830827fffc22ff83082dfffc3104051201060b0a01090a030b17045b0217055b0317065b0417105b0517125b0617165b0717225b0817265b0917275b0a17295b0b17315b0c17335b0d17421e0217461e03175b1e0417601e0517611e0617621e0717631e0817641e0917651e0a17661e0b17671e0c17681e0d17691e0e171e0a02176a0a03176b0a04176c0a05176d0a06176e0a07176f0a0817700a0917710a0a170a0e0217720e03170e0f0217730f0317740f0417750f0517760f0617770f0717780f080a0f00047904047a05040506040610047b120a7c00047d160f160f7a0f7e79050f7f7a060f80057b0f81067c0f827b7d20837e791f84158320837a0f1d8584830483222022827b1f84272220227c061d278422202205791f8485221d2284151c84162220167a0f1f2285161d16221520227e1620167b051f7e83161d167e151c7e7f162016067a1f8583161d1685152085801620167b051f8683161d16861520867f162016067a1f7f83161d167f151c7f801620167d7b1f8027161d1680151c80811620167c061f8127161d168115202782161f167a0d1d8116450416790f827a840f83052223227e86260f847a222322857f260f2605222322867e150f7e062223227f85150f7f7b220f2206800f807b271f2706291d29271504277d27850622297c3127867b80277d3127870f81827a422788791683054227427a82810f33278905831679331c334246204689ffb68a601f8b5b8a0b5b15218a615b0b0b5b8a1d8a5b151d5b8a151f8a8b5b1c5b608a238a3387ffb68b601f8c5b8b0b5b15218b615b0b0b5b8b1d8b5b151d5b8b151f8b8c5b1c5b608b238b4688ffb68c601f8d5b8c215b610b151d8c5b151d5b8c151f8c8d5b1c5b608c238c3342ffb68d601f8e5b8d215b610b151d8d5b151d5b8d151f8d8e5b1c5b608d238d46895b235b874266238e88896620661568238f8742662066156823688889660f665b8f0f908e6823916633671d3369151c6991332333904667ffe167601f9146670b4615216761460b0b46671d6746151d4667151f6791461c4660672367695b46ffe191601f9246910b4615219161460b0b46911d9146151d4691151f9192461c4660912391338e46ffe192601f9346922146610b151d9246151d4692151f9293461c4660922392698f46ffe169601f9346692146610b151d6146151d4661151f6193461c46606123603368460f33878a0f46888b0f618a8c0f698b8d0f938c420f948d8920958b881f9662951d9596151c96339520338a871f9562331d3395152095463320338d8b1f4663331d3346151c46613320338c8a1f6163331d336115206169332033898d1f6364331d3363151c6393332033428c1f6964331d336915206994330f3387960f9388950f948a960f968b950f958a460f978b610f988c460f468d610f618c630f998d690f9a42630f6389690f695b670f9b8e910f9c67920f9d91600f9e928f0f9f606820a0918e1fa162a01da0a1151ca169a02069675b1fa062691d62a01520699b62206260911f9b65621d629b151c9b9c62206292671f9c65621d629c1520659d62206268601f9c64621d629c151c9c9e6220628f921f9d64621d629d1520649f620f625ba10f9d8e690f9e67a10f9f91690f69679b0fa091650fa1929b0f9b60650f65929c0fa260640fa38f9c0f9c68640a64000aa4000ba56b0aa6000aa7000ba86c1fa964152364a86da904a86b0a6b000aa9000baa6c1f6ca41523a46daa6c046ca51daa64021daba50204ac641dada80204ae6404afa81db0640204b1a81db2a4021db3a80204b4a41db5a50204b6a404b7a51db8a4020ab9140aba001cbb38710b38012071bb0304bc0120bdbb030fbeba380fbfbb710fc038bc0fc171bd0fc2bcba0fc3bdbb20c471bb1fc5b9c41dc4c5151cc5bec420be38ba1fc4b9be1dbec41520c4bfbe20bebd711fbfb9be1dbebf151cbfc0be20bebc381fc0b9be1dbec01520c0c1be20bebbbd1fc1b9be1dbec1151cc1c2be20bebabc1fc2b9be1db9c21520bec3b90fb9bac50fc2bbc40fc338c50fc571c40fc438bf0fc671c00fc7bcbf0fbfbdc00fc0bcc10fc8bdbe0fc9bac10fc1bbbe27bebab9c3382f27cabbc2c5712f27cbbab9c3381827ccbbc2c571181ccdbe091fce010d1dcfce4520cecacf1fcf010d1d01cf451ccfbe011f0103251d0301452001ca030a03001cd0bb282128d0bb7d04d0431c432844214443bb7d0f4303d00fd1284420d244281fd311d21dd2d31520d343d22043d0031fd211431d11d2151c43d1110f1103d30fd128430fd2d0d30fd344431f430c741dd443450a430004d5760476770f77d4d50fd6437620d776431fd878d71dd7d8151cd877d72077d5d41fd778771d77d7152078d6770f77d4d80fd643780fd7d5d80fd8767823783c453123d915173123da2c0b311c2c854b23db3c453123dc852cdb1c2c861323db3c4531233c862cdb232c170b311cdb854b1cdd86301d30311520de09300a302a1fdfde301fde4bdf1ddfde151dde3115203109de1fde31301f3013de1d3130150a30000ade0404e0dc04e13c04e28504e38604e4bb04e57804e60404e71e04e86a04e91e04ea6a04eb6f04ec7004ed1e041e6a04eebb04ef751275070b0d083601570d095c01590d09a1014c0d09e6011c0d0a2b01580d0a70014e0d0ab5015a0d0afa014f0d0b3f015c0d0b84015d0d0bca014d0d0c10015e0d0c5601490d0c9c01510d0ce201470d0d28013e0d0d6e01520d0db4015f0d0dfa01240d0e4001500d0e7d01550d0e40013f0d0e4001480d0ec301530d0f0901540d0f4f01560d0e4001320d0f950b07851c1c0745021cff5420078617ff94201c8545021cff5420078617ff941c07854b0207ffda078613ff940b1c8520241c4b0224ffda07861302070d12b6240719ffba13331f07db0d1d1907451f072c021c1cdd070b07db1f24070d1d0724451f0d2c021c24dd0d0b0ddb29dbdd191c07240ddd0d137a240736ffba14630b07dc0207ff5402e10d12b40b07dc0a0d6e1c19070d0219ffda073c13ff940b19dc201c194b021cffda193c1302190d148602e0ff5402e10d12b4201cdc0d021cffda073c13ff941c07dc4b0207ffda193c1302190d14ab240721ffba14c01c0785df0b0d0720070d2d0207ffda078631200d072f020d0d1509240735ffba16190b07851c0d07da020dff5402e30d163c200785daff9402e2ff541f07da2b1c0d8607020d0d163c0b078502070d14ab240734ffba163e1d07d90202070d16740b0709240d1d0709020d0d176f0e8788ff56339394968a8bff56959798468c8dff5661999a6342890d17b70e5b8eff56629d9e9f6791ff5669a0a19b9260ff5665a2a39c8f680d18d00e0f79ff56811682837a05ff5684267e7f067bff56228029277c7d0d17b60b07290b0d220b13062807270d80137b0d17b60b067e0b07840b0d7a28067f07260d050d17b60b05820b06810b070f280583061607790d1a3f240537ff441abc1c05bb2effc11ae924053bff441b0d02e40d1b7c1c05bb15ffc11b831c05bb15ffc114ab24053dff441b891c05bb25ffc11bb71c05bb25ffc11bf7240540ff441c1b0e87880d17b62005662f1c06900c1c07660c1c0d900c280506070d42890d1c3d240520ff441c5b0a054820066a0502060d1c8a24053aff441cafff8f1d21ff8f12b402e5ffda05bb18ffc112b40b06780206ffda05bb18ffc114ab240539ff441d26ff8f1d21ff8f14ab24052aff441d9c02e60d1dc920056a17ffc11e0a20056a17ffc11e4a24051aff441e751c05104b0b06050206ff542005122bffc11eac240514ff4420082005044bffc12043ffd220fa02e70d210802e80d210bffd221650a04b41f0504151f046e051d0504151a04013a1d06050402060d217aff3b17b6ff5117b6ff52b0046b0d17b6ff3c17b6ff4a81ff75ffd3f3ff3b21f11d046d021d056d091d066d09286c04ab05a7060d21f11d046d091d056d021c06a8de28ad04af0506ff53ffd3f3ff75ff4af802e9ff5402ea0d22a102eb0d22d502ec0d22dc1d040a0202040d22e31d04720202040d22ea1c04a86f1c05a7ff90ffda046b701c0564ff900d236e1c04a96f1c05a5ff90ffda04a4701c05a6ff900d23deffd224bd02e70d210802e80d24ca02edff54021e0d258e02ee0d26102004bbbb200528bb25ba0403050d268d200428bb2005d1bb2006d3bb200744bb2903041105d206d0070d26e6240323090b02030d27260b03741f04032b1d0304450203ff5402ef0d27650b031f02030d217affe2d7d8d5760d27b50b031f0a04391f0502041f0673051d0506151c06030502060d217a1f03d7411d0503451f03d5411d060345ffe205d806760d280513030e02240203090b02020d284c0b021f1f0309041f0573031d0305151c050203ffc1217affe2d7d8d5760d280513020e1b240302090b02030d284c0b021f1f031b041f0473031d0304151c04020302040d217a1f02d74a1d0302151f02d54a1d040215ffe203d804760d28610ebabbff56b9c2c3c53871ff56c4c6c7bfbcbdff56c0c8c9c1babb0d291d29becacdcecf01cbcc0d29811201080b";
        

        assembly {
// START ---    

            
// ---- DEBUG ----

// Log calls
// 
// function log_byte(byteValue) {
//     let pOutput := m_get(/*/*VAR_ID_DEBUG*/0x150*/276)
// 
//     let len := mload(pOutput)
//     // store the increased length
//     mstore(pOutput, add(len, 1))
// 
//     // store the byte
//     mstore8(add(pOutput, add(len, 32)), byteValue)
// }
// function log_digit(v, tensValue) {
//     if not(slt(v, tensValue)) { log_byte(add(48/*0*/, smod(sdiv(v, tensValue), 10))) }
// }
// function log_varString(varId) {
//     log_string(m_get(varId))
// }
// function log_string(pEntry) {
//     let sEntry := mload(pEntry)
//     pEntry := add(pEntry,32)
// 
//     log_bytes(pEntry, sEntry)
// }
// function log_bytes(pEntry, sEntry) {
//     for { let k := 0 } slt(k, sEntry) { k := add(k, 1)}{
//         log_byte(mload8(add(pEntry, k)))
//     }
// }
// function log_literal(text) {
//     let pEntry := 0x00
//     mstore(pEntry, text)
//     for { let k := 0 } slt(k, 32) { k := add(k, 1)}{
//         let v := mload8(add(pEntry, k))
//         if iszero(v) { leave }
//         log_byte(v)
//     }
// }
// function log_int(v) {
//     log_digit(v, 100000000)
//     log_digit(v, 10000000)
//     log_digit(v, 1000000)
//     log_digit(v, 100000)
//     log_digit(v, 10000)
//     log_digit(v, 1000)
//     log_digit(v, 100)
//     log_digit(v, 10)
//     log_digit(v, 1)
// }
// function log_gas() {
//     log_literal('\n GAS=\x00')
//     log_int(gas())
// }
// function log_wasteRemainingGas() {
//     log_literal('\n# wasteRemainingGas\x00')
// 
//     for { let k := 0 } sgt(gas(), 100000) { k := add(k, 1)}{
//         if iszero(smod(k,25000)){
//             log_gas()
//             log_literal(' :: iterations: \x00')
//             log_int(k)
//         }
//     }
//     log_gas()
// }

// ---- DEBUG END ----

// ---- YUL CODE ----
function mload8(addr) -> result {
    // yul: result := shr(0xF8, mload(addr)) leave 
    result := shr(0xF8, mload(addr)) leave 

}
function m_varAddress(varId) -> result {
    // if !Number.isInteger(varId) { throw new Error(`m_varAddress: varId is not an integer: ${varId}`) }
    result := add(mload(/*PP_VARS*/0x80), mul(varId, 32)) leave 

}
function m_get(varId) -> result {
    result := mload(m_varAddress(varId)) leave 

}
function m_set(varId, value) {
    mstore(m_varAddress(varId), value)
}


// ---- Utility Methods ----

function op_getRvsValue(setVarId, varId) {
    // rvs[0] = most signficant byte, which is the left most (smallest index in memory)
    m_set(setVarId, mload8(add(m_get(/*VAR_ID_RVS*/0x120), m_get(varId))))
}

function op_getBreedIndex(setVarId, breedsVarId, rvsBreedVarId, oddsFieldIndex) {
    let pBreedsArray := m_get(breedsVarId)
    let len := mload(pBreedsArray)

    let rv := m_get(rvsBreedVarId)

    for { let i := 0 }  slt(i, len) {  i := add(i, 1) } {
        let pBreedArray := mload(add(pBreedsArray, mul(32, add(i, 1))))
        let pOdds := add(pBreedArray, mul(32, add(oddsFieldIndex, 1)))
        let odds := mload(pOdds)
        rv := sub(rv, odds)
        if slt(rv, 0) {
            m_set(setVarId, i)
            leave
        }
    }
    m_set(setVarId, 0)
}

// Commands
function hasKindFlag(kindFlag) -> result {
    result := iszero(iszero(and(m_get(/*VAR_ID_KIND*/0x160), kindFlag))) leave 

}

function op_command_writeAttributeValue(setVarId, keyVarId, valueVarId, betweenKeyValueTemplateVarId, afterAttributeTemplateVarId) {
    if iszero(hasKindFlag(/*KIND_FLAG_JSON*/0x02)) {
        // Skip json
        leave
    }
    write_dataPackString(m_get(keyVarId))
    write_dataPackString(m_get(betweenKeyValueTemplateVarId))
    write_dataPackString(m_get(valueVarId))
    write_dataPackString(m_get(afterAttributeTemplateVarId))
}

// templateKind: 1=token,2=contract
function op_command_writeTemplate(templateVarId, templateKindVarId) {
    if iszero(hasKindFlag(/*KIND_FLAG_JSON*/0x02)) {
        // Skip json
        leave
    }

    let isWritingContract := hasKindFlag(/*KIND_FLAG_CONTRACT*/0x04)
    let templateKind := m_get(templateKindVarId)

    if and(isWritingContract, eq(templateKind, 1)) {
        // Skip token template if generating contract
        leave
    }
    if and(not(isWritingContract), eq(templateKind, 2)) {
        // Skip token template if generating contract
        leave
    }
    write_dataPackString(m_get(templateVarId))
}

// Arrays
function op_mem_create(setVarId, countVarId) {
    let count := m_get(countVarId)
    let pMem := allocate(mul(add(count, 1), 32))
    // mem: [memLength], [0:count,...]
    let pArray := add(pMem, 32)
    mstore(pArray, count)

    m_set(setVarId, pArray)
}
function op_mem_setItem(arrayVarId, itemIndex, valueVarId) {
    let pArray := m_get(arrayVarId)
    let pItem := add(pArray, mul(32, add(itemIndex, 1)))
    let v := m_get(valueVarId)
    mstore(pItem, v)
}
function op_mem_getItem(setVarId, arrayVarId, itemIndex) {
    let pArray := m_get(arrayVarId)
    let pItem := add(pArray, mul(32, add(itemIndex, 1)))
    m_set(setVarId, mload(pItem))
}
function op_mem_getLength(setVarId, arrayVarId) {
    let pArray := m_get(arrayVarId)
    // array[0]: length
    m_set(setVarId, mload(pArray))
}

// Output
function write_byte_inner(byteValue) {
    let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)

    let len := mload(pOutput)

    // store the byte
    mstore8(add(add(pOutput, 32), len), byteValue)

    // store the increased length
    mstore(pOutput, add(len, 1))
}


function enableBase64() {
    let pOutputQueue := allocate(1)
    mstore(/*PP_OUTPUT_QUEUE*/0x00, pOutputQueue)
    // Reset length to 0
    mstore(pOutputQueue, 0)
    // Clean new memory
    mstore(add(pOutputQueue, 32), 0)
}
function disableBase64() {
    write_flush()

    // NULL if not enabled
    mstore(/*PP_OUTPUT_QUEUE*/0x00, 0)
}

function write_flush() {
    let pOutputQueue := mload(/*PP_OUTPUT_QUEUE*/0x00)
    if pOutputQueue {

        let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)
        let len := mload(pOutputQueue)
        write_base64Queue(pOutputQueue)

        switch len 
            case 0 {
                // Backup 4 bytes (entire base64 write)
                mstore(pOutput, sub(mload(pOutput), 4))
            }
            case 1 {
                // Backup and write padding bytes
                mstore(pOutput, sub(mload(pOutput), 2))
                write_byte_inner(0x3D/*=*/)
                write_byte_inner(0x3D/*=*/)
                leave
            }
            case 2 {
                // Backup and write padding bytes
                mstore(pOutput, sub(mload(pOutput), 1))
                write_byte_inner(0x3D/*=*/)
                leave
            }
    }
}

function getBase64Symbol(value) -> result {
    value := and(value, 0x3F)
    if slt(value, 26) {
        result := add(value, 65/*A=65-0*/) leave 

    }
    if slt(value, 52) {
        result := add(value, 71/*a=97-26*/) leave 

    }
    if slt(value, 62) {
        result := sub(value, 4/*0=48-52*/) leave 

    }
    if eq(value, 62) {
        result := 43/*+*/ leave 

    }
    if eq(value, 63) {
        result := 47/* / */ leave 

    }
}

function write_base64Queue(pOutputQueue) {

    let bits := mload(add(pOutputQueue, 32))

    // Reset queue
    mstore(pOutputQueue, 0)
    mstore(add(pOutputQueue, 32), 0)

    // console.log('write_byte - base64 queue full', { bits })

    // write value at output
    let pOutput := m_get(/*VAR_ID_OUTPUT*/0x140)
    let outputLength := mload(pOutput)

    // // ....  00000000 11111111  11111111 11111111
    // // ....  00000000 xxxxxxxx  xxxxxxxx xx111111 => [35]
    // mstore8(add(pOutput, add(outputLength, 35/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000011  11111111 11111111
    // bits := shr(6, bits)
    // // ....  00000000 000000xx  xxxxxxxx xx111111 => [34]
    // mstore8(add(pOutput, add(outputLength, 34/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000000  00001111 11111111
    // bits := shr(6, bits)
    // // ....  00000000 00000000  0000xxxx xx111111 => [33]
    // mstore8(add(pOutput, add(outputLength, 33/*32+[0,1,2,3]*/)), and(bits, 0x3F))
    // // ....  00000000 00000000  00000000 00111111
    // bits := shr(6, bits)
    // // ....  00000000 00000000  00000000 xx111111 => [32]
    // mstore8(add(pOutput, add(outputLength, 32/*32+[0,1,2,3]*/)), and(bits, 0x3F))

    let pRightmost := add(add(pOutput, 35/*32+[3,2,1,0]*/), outputLength)
    for { let i := 0 }  slt(i, 4) {  i := add(i, 1) } {
        // ....  00000000 xxxxxxxx  xxxxxxxx xx111111 => 32+[3,2,1,0]
        mstore8(sub(pRightmost, i), getBase64Symbol(bits))
        // ....  00000000 00000011  11111111 11111111
        bits := shr(6, bits)
    }

    mstore(pOutput, add(outputLength, 4))
}

function write_byte(byteValue) {
    let pOutputQueue := mload(/*PP_OUTPUT_QUEUE*/0x00)
    if pOutputQueue {
        let queueLength := mload(pOutputQueue)

        // Store in the rightmost location of the 32 slot
        //          [61]     [62]      [63]     |
        // ........ AAAAAAAA BBBBBBBB  CCCCCCCC |
        // ........ aaaaaa aabbbb bbbbcc cccccc |
        mstore8(add(add(pOutputQueue, 61/*32+32-3*/), queueLength), byteValue)
        queueLength := add(queueLength, 1)
        mstore(pOutputQueue, queueLength)

        // 3*bytes is full -> write 4*base64
        if eq(queueLength, 3) {
            queueLength := 0
            write_base64Queue(pOutputQueue)
        }

        leave
    }

    write_byte_inner(byteValue)
}

function write_nullString(pNullTerminatedString) {
    for {  }  true {  pNullTerminatedString := add(pNullTerminatedString, 1) } {
        let x := mload8(pNullTerminatedString)
        if iszero(x) { leave }

        write_byte(x)
    }
}

function write_dataPackString(v) {
    let pEntry := add(m_get(/*VAR_ID_DATA_PACK_STRINGS*/0x131), v)
    write_nullString(pEntry)
}

function write_digit(v, tensValue) {
    if iszero(slt(v, tensValue)) { write_byte(add(48/*0*/, smod(sdiv(v, tensValue), 10))) }
}
function write_int(valueVarId) {
    let v := m_get(valueVarId)

    // if !Number.isFinite(v) {
    //     console.error(`intToString: not a number`, { v })
    //     throw new Error(`intToString: not a number ${v}`)
    // }
    // if !Number.isInteger(v) {
    //     console.error(`intToString: not an integer`, { v })
    //     throw new Error(`intToString: not an integer ${v}`)
    // }

    if eq(v, 0) {
        write_byte(48/*0*/)
        leave
    }

    if slt(v, 0) {
        write_byte(45/*-*/)
        v := sub(0, v)
    }

    write_digit(v, 100000)
    write_digit(v, 10000)
    write_digit(v, 1000)
    write_digit(v, 100)
    write_digit(v, 10)
    write_digit(v, 1)
}

function write_drawInstruction(aByte, bVarId, cByte, dVarId) {
    write_byte(aByte)
    write_int(bVarId)
    write_byte(cByte)
    write_int(dVarId)
}


// ---- Decompress Data Pack ----

function appendUsingTable(pTarget, isControlByte, b) {
    let sTarget := mload(pTarget)
    pTarget := add(pTarget, 32)

    if isControlByte {
        let pSource := m_get(b)
        let sSource := mload(pSource)
        pSource := add(pSource, 32)


        for { let iSource := 0 }  slt(iSource, sSource) {  } {
            let piTarget := add(pTarget, sTarget)
            let piSource := add(pSource, iSource)
            mstore(piTarget,mload(piSource))

            let sCopied := sub(sSource, iSource)
            if sgt(sCopied, 32) {
                sCopied := 32
            }

            sTarget := add(sTarget, sCopied)
            iSource := add(iSource, sCopied)
        }
    }
    if iszero(isControlByte) {
        mstore8(add(pTarget, sTarget), b)
        sTarget := add(sTarget, 1)
    }

    mstore(sub(pTarget, 32), sTarget)
}

function run_decompressDataPack(_pDataPackCompressed) {
    // Skip length
    _pDataPackCompressed := add(_pDataPackCompressed, 32)

    let pDataPack := allocate(/*LENGTH_DATA_PACK_ALL*/23079)
    // Reset length to 0
    mstore(pDataPack, 0)

    // Assign pDataPack vars
    m_set(/*VAR_ID_DATA_PACK_ALL*/0x130, pDataPack)
    m_set(/*VAR_ID_DATA_PACK_STRINGS*/0x131, add(add(32, pDataPack), /*INDEX_DATA_PACK_STRINGS*/0))
    m_set(/*VAR_ID_DATA_PACK_OPS*/0x132, add(add(32, pDataPack), /*INDEX_DATA_PACK_OPS*/10801))


    // Decompress
    /**
     * mode := 0: Loading data
     * mode := 1: Loading table
     * mode >= 2: Loading table entry
     */
    let mode := 1
    let isControlByte := 0

    // Record ff00 entry
    let iCurrentTableEntry := 1
    let pEntry := allocate(1)
    mstore8(add(pEntry, 32), 0xff)
    m_set(0, pEntry)

    for { let i := 0 }  slt(i, /*LENGTH_DATA_PACK_COMPRESSED*/15508) {  i := add(i, 1) } {
        let b := mload8(add(_pDataPackCompressed, i))
        if and(eq(b, 0xFF), iszero(isControlByte)) {
            isControlByte := 1
            mode := sub(mode, 1)
            continue
        }

        if sgt(mode, 1) {
            // Continue loading table entry

            appendUsingTable(pEntry, isControlByte, b)
            isControlByte := 0

            // Use up mode item
            mode := sub(mode, 1)
            if eq(mode, 1) {
                // Done
                moveFreePointerToEnd(pEntry)

                // Store pEntry in var
                m_set(iCurrentTableEntry, pEntry)

                // Next table entry
                iCurrentTableEntry := add(iCurrentTableEntry, 1)
            }
            continue
        }
        if sgt(mode, 0) {

            if iszero(b) {
                // Begin content
                mode := 0
                // Skip content length (4 bytes)
                i := add(i, 4)
                continue
            }

            // Start loading table entry by recording the length to load
            mode := add(mode, b)
            // Prepare next memory
            pEntry := allocate(0)

            continue
        }

        appendUsingTable(pDataPack, isControlByte, b)
        isControlByte := 0
    }

    // Move free memory pointer past data pack + size
    moveFreePointerToEnd(pDataPack)
}

// ---- Run Data Pack Ops ----

function run_DataPackOps(pDataPackOps) {
    for { let iByte := 0 }  slt(iByte, /*LENGTH_DATA_PACK_OPS*/12278) {  } {
        let countBytesUsed := op_byteCall(pDataPackOps, iByte)
        iByte := add(iByte, countBytesUsed)
    }
}


    

function op_byteCall(pDataPackOps, iByteStart) -> result {

    let opId := mload8(add(pDataPackOps, iByteStart))
    
    
    
    let argByte_1 := mload8(add(pDataPackOps, add(iByteStart, 1)))
    
    switch opId 
        case 1 { /*op_write_string*/write_dataPackString(m_get(argByte_1)) result := 2  leave }

        case 2 { /*op_write_var*/write_int(argByte_1) result := 2  leave }

    let argByte_2 := mload8(add(pDataPackOps, add(iByteStart, 2)))
    
    switch opId 
        case 3 { /*op_ceil_100*/m_set(argByte_1, sdiv(add(m_get(argByte_2), 99), 100)) result := 3  leave }

        case 4 { /*op_copy*/m_set(argByte_1, m_get(argByte_2)) result := 3  leave }

        case 5 { /*op_getArrayLength*/op_mem_getLength(argByte_1, argByte_2) result := 3  leave }

        case 6 { /*op_getLength*/op_mem_getLength(argByte_1, argByte_2) result := 3  leave }

        case 7 { op_getRvsValue(argByte_1,argByte_2) result := 3  leave }

        case 8 { /*op_loadArray_create*/op_mem_create(argByte_1, argByte_2) result := 3  leave }

        case 9 { /*op_loadObject_create*/op_mem_create(argByte_1, argByte_2) result := 3  leave }

        case 10 { /*op_loadUint8*/m_set(argByte_1, argByte_2) result := 3  leave }

        case 11 { /*op_unaryNegative*/m_set(argByte_1, sub(0, m_get(argByte_2))) result := 3  leave }

        case 12 { /*op_unaryNot*/m_set(argByte_1, iszero(m_get(argByte_2))) result := 3  leave }

        case 13 { /*op_write_text*/write_dataPackString(add(mul(argByte_1, 256), argByte_2)) result := 3  leave }

        case 14 { /*op_write_vertex*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
             result := 3  leave }

    let argByte_3 := mload8(add(pDataPackOps, add(iByteStart, 3)))
    
    switch opId 
        case 15 { /*op_average*/m_set(argByte_1, sdiv(add(m_get(argByte_2), m_get(argByte_3)), 2)) result := 4  leave }

        case 16 { /*op_bitwiseAnd*/m_set(argByte_1, and(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 17 { /*op_bitwiseOr*/m_set(argByte_1, or(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 18 { /*op_command_writeTemplate*/op_command_writeTemplate(argByte_2,argByte_3) result := 4  leave }

        case 19 { /*op_comparisonGreater*/m_set(argByte_1, sgt(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 20 { /*op_comparisonLess*/m_set(argByte_1, slt(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 21 { /*op_comparisonLessEqual*/m_set(argByte_1, not(sgt(m_get(argByte_2), m_get(argByte_3)))) result := 4  leave }

        case 22 { /*op_getArrayItem*/op_mem_getItem(argByte_1, argByte_2, m_get(argByte_3)) result := 4  leave }

        case 23 { /*op_getObjectField*/op_mem_getItem(argByte_1, argByte_2, argByte_3) result := 4  leave }

        case 24 { /*op_loadArray_setItem*/op_mem_setItem(argByte_1, m_get(argByte_2), argByte_3) result := 4  leave }

        case 25 { /*op_loadObject_setItem*/op_mem_setItem(argByte_1, argByte_2, argByte_3) result := 4  leave }

        case 26 { /*op_loadUint16*/m_set(argByte_1, add(mul(argByte_2, 256), argByte_3)) result := 4  leave }

        case 27 { /*op_logicalAnd*/m_set(argByte_1, and(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 28 { /*op_mathAdd*/m_set(argByte_1, add(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 29 { /*op_mathDiv*/m_set(argByte_1, sdiv(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 30 { /*op_mathMod*/m_set(argByte_1, smod(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 31 { /*op_mathMul*/m_set(argByte_1, mul(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

        case 32 { /*op_mathSub*/m_set(argByte_1, sub(m_get(argByte_2), m_get(argByte_3))) result := 4  leave }

    let argByte_4 := mload8(add(pDataPackOps, add(iByteStart, 4)))
    
    switch opId 
        case 33 { /*op_constrain*/
            let x_ltMin := slt(m_get(argByte_2), m_get(argByte_3))
            let x_gtMax := sgt(m_get(argByte_2), m_get(argByte_4))
            if  x_ltMin  { m_set(argByte_1, m_get(argByte_3)) }
            if  x_gtMax  { m_set(argByte_1, m_get(argByte_4)) }
            if  not(or(x_ltMin, x_gtMax))  { m_set(argByte_1, m_get(argByte_2)) }
             result := 5  leave }

        case 34 { op_getBreedIndex(argByte_1,argByte_2,argByte_3,argByte_4) result := 5  leave }

        case 35 { /*op_lerp_100*/
            let x_a := mul(m_get(argByte_2), sub(100, m_get(argByte_4)))
            let x_b := mul(m_get(argByte_3), m_get(argByte_4))
            let x_result := sdiv(add(x_a, x_b), 100)
            m_set(argByte_1, x_result)
             result := 5  leave }

        case 36 { /*op_ternary*/
            let x_default := iszero(m_get(argByte_2))
            if  not(x_default)  { m_set(argByte_1, m_get(argByte_3)) }
            if  x_default  { m_set(argByte_1, m_get(argByte_4)) }
             result := 5  leave }

        case 37 { /*op_write_line*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            76/*L*/,
            argByte_3,
            44/*,*/,
            argByte_4)
             result := 5  leave }

    let argByte_5 := mload8(add(pDataPackOps, add(iByteStart, 5)))
    
    switch opId 
        case 38 { /*op_command_writeAttributeValue*/op_command_writeAttributeValue(argByte_1, argByte_2, argByte_3, argByte_4, argByte_5) result := 6  leave }

    let argByte_6 := mload8(add(pDataPackOps, add(iByteStart, 6)))
    
    switch opId 
        case 39 { /*op_bezierPoint_100*/
            let x_t100 := m_get(argByte_6)
            let x_tInv := sub(100, x_t100)
            // let x_a :=          mul(mul(mul(m_get(argByte_2),        x_tInv), x_tInv), x_tInv)
            // let x_b :=      mul(mul(mul(mul(m_get(argByte_3), 3),    x_tInv), x_tInv), x_t100)
            // let x_c :=      mul(mul(mul(mul(m_get(argByte_4), 3),    x_tInv), x_t100), x_t100)
            // let x_d :=          mul(mul(mul(m_get(argByte_5),        x_t100), x_t100), x_t100)
            // let x_result := sdiv(add(add(add(x_a), x_b), x_c), x_d), 1000000)
            let x1 :=                          m_get(argByte_2)
            let x2 := add(
            mul(x1, x_tInv),
            mul(mul(m_get(argByte_3), 3),                      x_t100)
            )
            let x3 := add(
            mul(x2, x_tInv),
            mul(mul(mul(m_get(argByte_4), 3),             x_t100), x_t100)
            )
            let x4 := add(
            mul(x3, x_tInv),
            mul(mul(mul(m_get(argByte_5),        x_t100), x_t100), x_t100)
            )
            let x_result := sdiv(x4, 1000000)
            m_set(argByte_1, x_result)
             result := 7  leave }

        case 40 { /*op_write_bezierVertex*/
            write_drawInstruction(
            67/*C*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            32/* */,
            argByte_3,
            44/*,*/,
            argByte_4)
            write_drawInstruction(
            32/* */,
            argByte_5,
            44/*,*/,
            argByte_6)
             result := 7  leave }

    let argByte_7 := mload8(add(pDataPackOps, add(iByteStart, 7)))
    
    let argByte_8 := mload8(add(pDataPackOps, add(iByteStart, 8)))
    
    switch opId 
        case 41 { /*op_write_bezier*/
            write_drawInstruction(
            77/*M*/,
            argByte_1,
            44/*,*/,
            argByte_2)
            write_drawInstruction(
            67/*C*/,
            argByte_3,
            44/*,*/,
            argByte_4)
            write_drawInstruction(
            32/* */,
            argByte_5,
            44/*,*/,
            argByte_6)
            write_drawInstruction(
            32/* */,
            argByte_7,
            44/*,*/,
            argByte_8)
             result := 9  leave }

}
    
            


// ---- Memory Management ----

function allocate(length) -> result {
    let pStart := mload(/*PP_FREE_MEMORY*/0x40)

    // align with uint256
    pStart := mul(sdiv(add(pStart, 31), 32), 32)

    mstore(/*PP_FREE_MEMORY*/0x40, add(add(pStart, 32), length))
    mstore(pStart, length)
    result := pStart leave 

}
function moveFreePointerToEnd(pItem) {
    let length := mload(pItem)
    mstore(/*PP_FREE_MEMORY*/0x40, add(pItem, add(length, 32)))
}

// Align memory start
if slt(mload(/*PP_FREE_MEMORY*/0x40), /*FREE_MEMORY_MIN_START_POS*/0xFFFD0) {
    mstore(/*PP_FREE_MEMORY*/0x40, /*FREE_MEMORY_MIN_START_POS*/0xFFFD0)
}

// Store length at memory start
let pMemoryStart := allocate(0)

// Disable base64 by default
mstore(/*PP_OUTPUT_QUEUE*/0x00, 0)

mstore(/*PP_VARS*/0x80, add(allocate(0x4000), 32))

m_set(/*VAR_ID_RVS*/0x120, add(allocate(32), 32))
mstore(m_get(/*VAR_ID_RVS*/0x120), rvs)


// Store memory start
m_set(/*VAR_ID_MEM_START*/0x110, pMemoryStart)

// Store dataPack vars
m_set(/*VAR_ID_DATA_PACK_COMPRESSED*/0x121, pDataPackCompressed)

// Allocate max size for pOutput
m_set(/*VAR_ID_OUTPUT*/0x140, add(allocate(40000), 32))
// Reset length to 0
mstore(m_get(/*VAR_ID_OUTPUT*/0x140), 0)

// Allocate max size for debug log
m_set(/*VAR_ID_DEBUG*/0x150, add(allocate(40000), 32))
// Reset length to 0
mstore(m_get(/*VAR_ID_DEBUG*/0x150), 0)

// ---- RUN ----


m_set(/*VAR_ID_KIND*/0x160, kind)
if and(hasKindFlag(/*KIND_FLAG_JSON*/0x02), hasKindFlag(/*KIND_FLAG_BASE64*/0x01)) {
    // Write base64 prefix for tokenURI
    let pText := allocate(0)
    mstore(pText, 'data:application/json;base64,\x00')
    write_nullString(pText)
}
if hasKindFlag(/*KIND_FLAG_BASE64*/0x01) {
    enableBase64()
}

run_decompressDataPack(m_get(/*VAR_ID_DATA_PACK_COMPRESSED*/0x121))
run_DataPackOps(m_get(/*VAR_ID_DATA_PACK_OPS*/0x132))
write_flush()
    

// Select output
switch kind
case 64 {
    output := m_get(/*VAR_ID_MEM_START*/0x110)
}
default {
    output := m_get(/*VAR_ID_OUTPUT*/0x140)
}

// Set free memory pointer to after output
mstore(0x40, add(output, add(32, mload(output))))

// --- END ---    
        }
        

        return output;
    }
}