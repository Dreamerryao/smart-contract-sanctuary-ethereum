// SPDX-License-Identifier: MIT LICENSE

pragma solidity 0.8.9;

import "@openzeppelin/contracts/utils/math/Math.sol";

contract CombatPower {
    //Stores combat power(uint256) of every champion, appended and stored as hex
    bytes constant cpData = hex"";
    //Stores set data of every champion. Set data for every champion takes 4 bytes. 
    //First byte = id of "torso" attribute (Between 0-15)
    //Second byte = id of "leg" attribute (Between 0-15)
    //Third byte = id of "weapon" attribute (Between 0-15)
    //Fourth byte = id of "isEnchanted" attribute (0 or 1)
    //They are appended to each other in order and converted to hex to be stored.
    bytes constant setData = hex"3710c4b12de01bc0b110c090001090600120b77037005ed0d4a01180ca50dda08c50423058d08760c54000001cb091e03b20e1c006b0ea10c0c0ece132d1c5000e3013004ee02471d5107a805db08cd03e10eb7070203c9033b00980698098c15c505c605070d07024b0248054a052306750dd91be709d00190009905450c94042606e20ae50b89088d089004dd01110b500e1807e10d09025e0c9401c4058e0a77164505b1010501100c040a9904be06a600b109740241004e051e00e601c312c804e305010a8509500034045602901ce408700b910664097a054b04c2048502250511021d0d41019c0a4b066304a5035d099504c70b030e940289011b0d0b069904271156069008090ce80953191c1940059a0b4c08d41b0a0d5b02cb07551bb30886096805b406c60ab100e20e68045e071e050003300d1410890560180100881c2a0364154505120002015103391ce90c4d04cc0ed90b35140d001003550018080109191c5c09a90bcc058503c001d506c303b908c60491041c02080e3100860ddb0140098102e106330c9314580ae1164817c20da00385096a02040a4504e901ed039e0c5b041408ec096505e308950d1005450de300b903650617169d01121c410914085b095909b4051e19bc1c620ead0d260e68021009e11c46035002730a5a0803089a0a6905430cde09e305e00351054e18c102e511de10701cb10ad005cd019008e80e51008803db0eb703110891090916ee05340db00b1015c30dce132c08950a3500941ee61d490a811dee0a9a12d9043204180e4c0569095a01c60b88037e0c90085e05e51e600ec41d130081068403ea086809140045084b002b0cd4050900a409e60b45010100bc0829017e1d7d1c1b05030826092d0c69068012cd051b197a034001d3030c0ce2088e0b010912044c06e5094101b409110e260bcc07ea0e3c00900893001c0ace055e076a055006540ce116110a490cb4024901790c2805310c06091c013e074a051102a41d630bbc086e01240ee4029009490c2800d811ce09440761006b01410d83132603dc11ad15b80598065002db0a9d00750c79098006890b560b8602060bc415be05ba0de2028509060b78067204870e9103201801068202e50156090c0ccd192704630c710bc000920c5408260a29012a0ac4049d06430a3104770eed11110a0905180b920234079809d906c80b8003d9042707850c0501a5095104c60415033d0ad508080b62066a0c02006c00300e6811e4060104a3001604ce05ab19dc1813004106a703390a0a02970b1b010905870da901b1074b1db4013a086600aa1b1d1b6008e503371de9020007780eae1a4e0dbc0ee60bac1ceb00bc11ea08150bad0e7d0c0a0bad069c02d70a540a420a141b6a1ec40963173c066b0cb50531184d0145056a0845059501630089063006b00dd10bd30031027c1b58019d099100a204b504a90a3303a800ca0262042208230a2604e00ec503db04800ca0015d09110b020067069e005a093a134609480ad508400d56051a0c040ba5050b0029046c0c6c0169195b0e9e000105d501e6024816610dd805b105c50e40099c036c07d803480b1e035c00d108840018025c079109a60c5d080c0b9d0ec205e80ed60e9b0a2d071e0c37080b044c069e0c900ce2052908820c8c024404510c93021a0c550ad0169e088b09ae00c404bc048a0aa60ba514c006ab08ee07e2060e0c050e11033d09c00e9508cc06c501740b140c230d0702b50810140700211a330540049602a30960008c0c11034a04050c2608b403be059d0a06051109690d6a08e91678098a05a80ccb0ec808aa0309076001180c60002e0b050c870e290043055600080d5b0098141e024e0e190cac03cb0059011709e50e6101c3098201b80500058805ae08390c59060c0d3a0e8d059b05bc002616cb011509b005b50b8503b602b3000904c2018a007a0d6b136d023608ca0b460a5d0dd40ae90a9509b10dae06b106e207e4040106a903550d53065a1c1109c70e1a0e9e0ca3048001b61e05045910a200c9026b05ed0e5700b606e90185016e0c160496188c03cc01081c951cc6054d01d004631bce0c0401be09cb0939068006cb1c6b092b0bd908590b1600e005d700c102130e5307cb17a40d630d4c029707b10202077b076e030812d004e10c960553080609ec00660c910c34040009ca09db078d0b6c01ac0b90045e02140251014c0305036c0d3400cc092200b506590e110aeb0e7902011c0d0c620040083c099a091e0912095b046b0338091a09870d86019b0c2e001910c60a9917ee00740b6809a30c40021904610b590eb108b006060755054709661a010a15099304550e3c051309740855135c01d809650d42091d0e3705a70d69024b061c0e8002e40681047b052a06ed09b8090107c1092c02a200e7018109e800ad0d6e0529027c0e760975097b09bc0c7e0893021b0ea50b340d06069e005c03590509174402510265055b058e058c0540053009a30b7801c10e4c1e1901660b59025c1ad0013203bb0e3011900b5b057405c3031d08e90d1909810ab00d050b150b2b07d30c5104e1049c0189041d018e01770d3906a50544098e06c60e6c0d120d560c2e0b3809250d390c1c03c606231b7a1cb50de50bcb016c010602250e9801030e0509440da6057d0b4d051c0c320b850deb05030e8903a0093100c0097c01c609b20a3c04a5009c0aa507c502540103089003280405074909a11b5c070c0e450eb7064c001d0c6d011c02510c9a019a02700939097b154c095304830e430686033a069003410308046b00040dc101e50b8c04c10c850126052405690507036a0a9e03500e99094d0bc306e10741023003200591056004510a9407740aa1069005c90696051601030945074805320cd900910350009904100de6024b0ba80200062b0ba409200b260d7800820a0b0911046c002c08d00e400b8309ec073e0c6d0dcc0a95095905740a450e0b093a06d6079c0d5804590b500579001c00c409e5047308e3009901351a7b1151094e04330e820c69094e0d680c9c0c2d0418090b073e064a005c00040e44059503940d9a0015010c00d2055e0ecb008a099404a6094303c909e400e319a60b4017a20dc4018d0baa1a05056c0a9708610458073c0b910a1b01190c830e0706470039016103b405970d7c08e3039e15ba03b30d440e06068804d5003906e20b090c41055407e900420000047907e01d190c8d0a94041406990c6a0134091910c50a78073c00c3002a19b51d1b09e209681c870b5d0102018116c301010e7a00190bb8073402bd05d90c171cd00190066d04860a7e0a560ba20b011c7004310a6901ec011a0a0c008a001b0e0b04a30ce10c210334063700e90688167e0142062507a9092204e415e91307061c04d90014129703c807300bb40d730a8908a5063e045c05a01d8b0bc70c420c550512019d1d791aab0c5d1e260db0012a060102c00644054901ac0e43003401d905770497076d05a7032c0915022d01b80641193d0c500ad6061c09460151059904660518001406a8001e03410bb703160bb0096808c703c209b00899010107510072090211510907026305c80a390568017504cd079c075a09710a4a05090b63123c0b8c029502ec1156011303e905470ede0ecb005e029a0ab10864050700a90e8e04540801038b073415510c050a87016e0da10c8b0ac80cc80e700a0b01b90c540a3a06e80337089101810b6d08450e3e074c00d10e4e054c01530ab20c1208080a4d0585100104be158007e404ac04a80dd50a2d0308000b19d901d10d041baa145a0246042c0acb01e9031d02e304530599090601880e7c0a93030500b2028002a101b90423061a097c1b3204da0db50099055a0d6e010e183212d200c00b1617e2095915480a930d4402ec1abd1b9509e91c890bc9092a01ea06e1093a0a3200c106760cc7019509801bc40ae700840c1c0d700196091d04ed051505b40b9618b8017306e604821d35189b00550bd4001509871854030a065c01dc071e0331013d05880b5803170c370b1c0c8402dc0c8006320d3c0227095911b1015503580b9b0d9b09ce09cd021e0211160d05c90692005e0c810d42065e15310898052505040e551d620914099408d100870668055101de0789029a07650b57185c0ec0094c0c420164012c0a4c056d09330c77154c0c0101e1053a0c1d099606c909e4075105cb0195099e0136046b040d036b0320198a0b3404510b2404b9087c0b8505c1049c01e80d4b015c00b509590ab70db10162016808ec03ba050909550ea905070073055508c802560e80092c0dea097a0d1c0c370b49070803cb08880acd04b50cbc0c1e0a530056009b0059096a050d09a4048b028001dc0a1c115e16a3089101d505b106b30c76157604d00717054907ee0045019c0e1506ed0d4d1ca0060b10910c0e05b109480c3c0b1b00460e1209b4015d0aeb063508b915cb0a450700069604cc08db100d1b2603a606a3095c14c1040c053901c7072403ac05770a0304a2073e0d5910270c0303c7097b095706940846090a079109100dae09370445189e02290e300eb0003a01d703dc0942049301a10d390345027801ce0d9004ea009c025c05ae0e41042a056009141519081c00820bd70b7603250a90001c1872047903900cb1010d053202550dd601b511b4001003db0d9d095506e10925015a09900a280d5b029b0710142103000db0080505b8066407130eb0089000810e3a06e3008d06751c810342051408db0e9306c50c34064d0c31030d055b0b540e4001c40b5106310902082c1db4007d0dba19c303890e95029a0674088e08ad00530bd40973025406760ec80998023b045001cc05000379019d0862065d00ee09100c42079e0972046b12c00c2d141805010569116c04e309e00c0914751a010cb904260cbc101b0595065d0d5108260964072a04761c02101e020305a106b901010bec057a099906b21d9a1d0b0e4309c105d70ab001c219630076014605170d5e052e06e40cb40cdd00300c940c2e153501c203120c8400de060b0bc4053017e90e2e091905350cdb0c26055e03d5019d0d2c0e0916570a0809510b6b016200470770066d0165051c00c40d4d0c560194015c05c304c404a401a804a1020905d9038a04200b290889151119ad0c9d04ce0c7d072c067c038503490ee8021103590eb50cc000b40455055b06b709d105a0011e018c009a1b5e0dda1917053501111c5e0ad810910e0014c501d401200ae604d0099b11ba0aa30929095403aa08480b0411a50b900765086a133c0039195904c90da503180ca207530cd1011005b60acd09e705801b8000350d09028b046406390da60c1a0a3407750cbe047806cc09ba06dd093112ae05571a6d12820d57009b05e804bc01b908190acc0506081301710dbb01e8081204e50ae3048e09780c0a0d79044901ee096400410136045208e3097809a50c9606c20eb30ad0089a036b03960e960e4109d7099404e20b1a08b1005902190b9b047d150501b60bd00b3701451deb0a74077300d608110c7904b40d2a07730066075500190359019208da09470941099e00e701c902b60e4302160e5b1db40d4b05a21b1b044401210c9e01601019035c0cac0995082508c903eb03e00e7209340158102e043301700cd01914089103be0e31031700ed098d0501074308ee063e0d1a01250699117a04630d000468076d001304cd023800910d13096a099e094a05ab06ae084207a10b9006b90c2500a7031e0538010109810952090e0a5301161384050d167e0937030106de03c9074007d31153006001ab0aca07510c5b0a9c0d550821047004510e2c157507470bcd0613050206b607da04de08dd034b0995049a09110b26054107e903820d260d370a90047402190995068502ed1b21080e005903b110d206c107710c21071707ed05d505e908c602351cb90e6903150433119d0c2200270d530bcb0e260a5805d806b105d3019b03b009a9099409c107c70835030d0e5207990cb60bec031810de04e801640295071b07c50ca00dd209a1049b00221958055101c1131709c40c5d0b61061108ee1ed0090701ee01710b0607600e1d0c0401c10e801224039a051b0d4808e30c9104e800590e111c950745044406560c5406b807c9006c0194125b069102c803110233075403e705100b6b03080e210e7b05840cc90405054905cc05b50543086106590614029908a4090004a916591061070e015a01e6177008c40d60011103c706690e95025c0ebc042608600e9e017809650b120de9011903dc02750b93190e0590083907b209b801dd0e94014400800ba4024c081d0e130c431bb312940382011308e001ac013d09eb040d085d075c0de807ae090d022c0d981cb11d6003c0091005310e8c0259064206331cae097004a509e8049b043c0c0601ba08b1171b0c2c0ee412c4095708050c80008707ec0a711c400c5908620c3003e9192708dd067903010ad9087d08de0196000305bc0500029e0e3508bc084e01c906be09e40136017c089a03c9049d021102070e9b0ad501c80c6c0eb3055904bd0dec009e1ec0035a08930bc50d270820189a07460c110b6c199d021c09ed09b5151800d003090d550c07195003230c43032d0d4b09cd07510b9d09cb049601520e500994050e059406d108a10cc701090cd904580e6a00b90ac60e39045204e8094204540e56090515d00350025e1c27001b0c81080900940e1300860c2c0509094c044904e10c2c0e0c05c304b908ce001b1b190925071606b3021c05c10665036301bc02471c3c090b028507d20a7e091311900966049a010d06d7173103d1005901e111650e4d04061e990e5205da00081a2001ac0e160136064110900e930ca503c1004103750a9d02bd0be1027300990d730dd5009c0d171e51058c081807a20c2606c41d36016502400e3100eb01510a2b0aca0ec00e7c02880e790e1206c2038e0d9101b50bdc09b0001603e105e50b9506a403c802e9012d05d10a7107050255020b09ea01cc094e06e80842074611820e090a3800ae068e0e0b09d10d7109e00487105304a2005e066609e90b5c08850d661540063908c20b58023e0b580cc101ea09520142091901a60e1007ac02d0069510180501004506990994019509b304d20b95030500e1099106c00de405630502019105e0011906950d2902a107c0096c04b50c140b04094e01500a711bd90a100e42051e04ec02a41b3b06c10a8304d50ea419e803d80a1b058705230bbd05b906b1132604961c56093809ec07d205d706a90e0c04940e28000c08290147069900dd09680323004611d1034c11200c900d59038a0ea5011e03b207aa0a910e2b005004750ae40a18064e1ab90eb70e8305970e1c034611440ab501db06a50d310c370ede0b080d5e0a251bb905a31d430080059a056e013d0d540e050c2b03540b620bcc00090b110b1d0a4b0192058b09cb12d60daa0a69062d0a6302980a99001501c51091026a0ea90a180e430db10d09019b073908c819420b111c0309d9043203c80985090a067507270ce3144b095d02b9067601c602c50ced098514921e5c026c103403d9091b1665070c086d005209da03210e53019303380ae909120808016704b906e50b811e4b08d504200e99022503c309250d0e0e950041002b0e35109c049108410941053e04ce0095012107be093e00050b340a3b0ba50d530501113e094c0165039a030406c204250c1e06910b160be60504071a03510b1904890cc0052504c00e12049812070ce609110cec09d8070603de00eb02611429056604520c9009be049e09390115035403d50d9005420b6708890a910c2202d809be09bc0ba60abb0d330e1702a30c1e08530e500804195a06cc02410c970a9402130c2008920b580916004b099e04280c500874029b07380c5604b6017509890e13015902b41e9e194a094d01991c780dcb094b079d0a89097415940a2a050a023e0a7e09ea0b8502910de005230ee9052514e4041d00960985051703d605c3113c0b43100d0b960243006e0d4a08580e1e0516009702660bb0094104e20b86008a04b70b760e15031e0c3c01b00516139d18130c080ddb087a07a401530d030ac11517099c0cd507a608000ee004540b67028b0e480e220462011a13ea03500453010604400535090105221206097815570116029219a608980a1c16e60e6706c706700b0e0414046c1699061e058b05eb05580b160d9d01be084016680c4c03c100e4008a0c5110c31e960ba00169094401cc00b101b90c34026301100a82046805810421022e09c101640ddc07000052057e14980dba08ac1b5c03eb0d8000b4010a01c604390296004900430835065207d507b301a901990c50099a11730b610269091d13d10996066d064700a7030d04ae0b530936069105090a41000905760643175a0d7409e9000506900c2e007a0356040300810bb0079009d00e5208bc06c300990dd408e20e1d0d521b13033404d4005c0919009c0acb0155040d07b10a95095a0da10a1c004503dc03c90b86046504cb02391e601d350c210363083d0b84011609940e9d0334063502a70b2009e1133a063906be08390ce20ec01d8b0511052800820c3c08e50b291e920b530cb9109409ca0ded0d690e3e106e035a00c8076502d30cd705410a5b08c50a4c0abc09010a690918020101cc0661010904270c980124166009d9065507800e60077c00980b9e029804e70b41144405ed04590a21015609d2010102550c3e02c10a130934010e02e004e7001a0b56065b0c7101a9011c0445051617430ab90119174e0099190c08160a650e87090b0b4705c904700e65170d028108e30e9604500e9603e5015b16b7061601500bce0e7d038e01a800550ec0099b0966177e0b250c8c049709410689058504440ec60ab901d00c9d0b0d0eb30e550a8c09ac085005c60e930ed7014607690198061d094d033407430c5a07d5004c0b5e025001d5123505d90e0911970296071b051b0de408500c150980048b00e51941060905cb0b0906980173151905a0012809401b1912a9034a07270a2001d50ad908ac0423026705920ecc0e9d085a001509c017b20313003905440412051103b516870e0507460e500a3201ea0aed01311eae0431084e059211720d1b042403010e9a096d00b107e80b8400b3002304c205910eb20c5d08d70b37049507930c410c3c05800d890d19008904d7004c0d77061c00e9031b0aaa068c086e065402540ec60cd602e9098c004003ce0d5205e5012c07b500e1059e0a57174a0e5d06020b620e6513e308000504062702060232066917db1da700430a19048b08160a2618210918125e04b90b54029106120b0b194e06c603980c000d1b0377020e085908391c300954072e1e1d0b390084057e1ae600a51e4301b905d3047e01e4083606cb06b90be101ea115014cb0ad71536001405990de50410077d035e15141ea5005b036109e00c3d02e30bae08440ab2165801580a7e132c0aac0d8909870c4c081e09980dc70a7404c0011401a40639017408910450055007c10c49026700b3054b0d9a004505d2005309720bab07b00c690c3400950be504ce02b105de0025089809b50dec0432111206580a500884095703d801a608e9052b01ee077503e803c309490d410b6709c80141024004540c900d890407054b0a8702a1076c0cda0e2d01590e130e9d0cc908a40ec0066602110a9106ba030e0a060739084b09e201e8071305200cb1079602b80beb0c31099b0d14049208c30c6b16a9006409790351019614e5001003c000b712190071018e056e05ae04aa18d70e8c0b190147081e00d305b2017a058505ac0b1600761b9c01d505c304e61695057301ee146c06d1101b044a06d90ecd019e04260c3b0e840b4004a9095004630e27072a0bd01ecb0e5c0e7d0c9b091d04c5090601e205b50c450d720c0e1bdc0959055d072408531e141bb20ec108130b250959095c001007cc0996094407040e0c023e04320e34039d011c0267036d02e30dce05ca0966065b01bc07110e3301660691085505ce09ab011301a0093703d1056905640cd0043e0ece006e023203e902c70a260ed01c510e19022109590c2e0946040403060a440a981e130aa80ae50b030ab2004b0521163d09ac0dbc04d40408165e01960883000109ca069202ce0c9d0c800b79046209e5031b09250e0e110c19c1024d0dd20604019902c20be4055104a5091c0549065c08180b4905740b9301d71b210c1d081a151e0d130e9701240a03029d04cc009c03a70b240d811c140ed70cba0da4031a00da016417350940036c092e0d4300c90444091d02200bc8065409590cc30e670855044d0bc70a7609e50ea91cb00c6e0e99066503350d490500048609e10b1b010100180091071e00b1042201c10a2e046c05dd1e6400d70c410aa60e87011408e904530b93002b1078046a1a6d03cd0a220459081e07da09e0011403580bb8025507a510a409d102b4016900240eb406a213e403bd0a4e041903c2047a0a57079a0292000b0db60cb501390dc60bad05d10c55056c059c050b04030271036706ae03e50d9e07200737050d04160070069608de040901de059600a0105504250cc5119e089a0025082b0115013d031508b20d480c6604920d1e084c03c606380c040d3808d10901102500d404c2008907d3081d046b0c11132a0b47016007d00e39014201020e4c05c40e1103500b210e0d07790586058a005309ac019a00050b5b0ad415080dc8018e00a3053b15830ebb096e00240759038c0576073a0455085b0eee0ac5005e06b909bc1b460da406460408001308e01d1a06341ed108780265065204c3013a07d9015c0ce00709065c01cd019b091a072e09ac0660019e01020e51075b0b9309880e5d0e69050700690049039409940ea50402019c0e2c0bba0be00c4b0c79000405030941066600b105a50183070809c90e170498045a0275049a12dc008d05340bc1058218a00b4b091905aa085912e8057e0c2804ce062209e51b01098201a50be3038b0cce0bae09960090080508b3080212dd060d13aa0d20088b031c0812065406190bc90bba00320ce7180407640513074d08a4048e006a03970a8004160c4e043701d20e4e066a014213d3049e035a00260553173105b40cc2190400e00a2300940c13067c150b05a105820acd0e4b06b00e9a004a0d6806150b9012e5050b09050c0c07e50c1c0197066a054d0d0a0e5803c901b0075504a40a8c061706090d1108c505ce00450a89027100d80be407e214c9018b030105c90cb4016101800c4109b403450c86060a07a5108403d8013e0114016507341ed90440089401140092010a029d0ed808bb009c0b43006605500c061ee9085400350ae70eae08c2097100ee035a02190135049d155201c702e7083604d611bd0d4b03e2005500680bb20eee0195091b06141a9605b90a100619036605620861097102dd0d9c01d8071e091304100042053107a31449050309c009ea078e0ea301090a040c32006108c40563001d09ab057400da093418c60c2c1ddb02a70e1e0929030801ae07eb0c1d04950eec0a3909430ee104ee0391129b064c069900cc0542091905660e2a0139089d0a550a750a390109099000c415310c000c2904640d5b0c0c050405b6003107550bb40369040b089d0e420bbe040303ca0e120004065b0432083904240d320e77068509b301e61b3701de04490888035b09b302690332180602990315058106ce02360160050e05d90c9802990d1d0c5e0d84027b064105680c77094c0d6b020e09d0075b1dc50cd9090e01020b341339019d1a370ad91c380659026b07e90d450e171aed05640e66056805ac01d40d2216dc04ee07c3059508c006990024093005c40bb107040a7d0b9b03ec04a400181685137004de01bc0a8e0d00119e06eb0da80b7e01c91d550a110337041605c00a8309db02110d0810400e5404731506071000e30c2604e0040a09600e3b05b7079e05dd023a1bb20c500a2a000a034c05a1050a01b2050a07c20605144e05481b350c4b0e390c2509cb1a25092d043005b90c9b0e98010b00ad0c5d1e9901e1094002b504760b8d073701700830112518bd0555096006e50bd100190c790d750563039605750b4e09e0056a00ec156e1de403560c9b049500410ca5072e0c800acd076708150e54115904a702c303170199181c104609220094090a058400b00b040c5401230a610948018402c501380ebe03860d50000101b6198d0e1b0e9e0d20091d030c015b047008a8006819b80438081106490a1906ec00770ec10d0001bb0b960aec046a060b01cb05850198019104450148091007900e850e1a09c805790949023d0262038002320ea4061903a0069b05850";

    //there are 15 different sets. Checks the bonuses of each set and returns a total bonus combining them all
    function getTeamChemistry(uint24[] calldata tokenIds) external pure returns (uint256) {
        uint256 teamSetData = 0;
        uint256 teamChemistry = 0;
        for (uint256 i; i < tokenIds.length; i++) {
            teamSetData |= getTokenSetData(tokenIds[i]);
        }
        uint64 short = uint64(teamSetData);
        
        uint64 set = (short << 4) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 8) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 12) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 16) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 20) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 24) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 28) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 32) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 36) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 40) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 44) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 48) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 52) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 56) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}
        set = (short << 60) >> 60;
        if (set > 11){teamChemistry += 3; if (set > 13){teamChemistry+=5; if (set == 15){teamChemistry+=2;}}}

        return teamChemistry;
    }
    
    //Converts the hex set data to a format ready to be manipulated with cheap(hopefully) bitwise operations to return set bonuses in getTeamChemistry function
    function getTokenSetData(uint256 tokenId) public pure returns (uint256){
        uint256 index = (tokenId-1) * 2;
        bytes1 part1Byte = setData[index];
        bytes1 part2Byte = setData[index+1];

        uint8 part1Int = uint8(part1Byte);
        uint8 part2Int = uint8(part2Byte);

        uint8 torso = part1Int >> 0x4;
        uint8 leg = (part1Int << 0x4) >> 0x4;
        uint8 weapon = part2Int >> 0x4;
        uint8 enchanted = (part2Int << 0x4) >> 0x4;

        uint256 tokenSetData = 0;
        unchecked{
            tokenSetData = (0x8000000000000000 >> (torso*4)) | (0x8000000000000000 >> (leg*4 +1 ) | (0x8000000000000000 >> (weapon*4)+2));
            if (enchanted>0){
                tokenSetData = tokenSetData | (0x8000000000000000 >> (weapon*4+3));
            }
        }
        return tokenSetData;
    }
    
    function getRawTokenSetData(uint tokenId) public pure returns(uint256 torsoId, uint256 legId, uint256 weaponId, bool isWeaponEnchanted){
        uint256 index = (tokenId-1) * 2;
        bytes1 part1Byte = setData[index];
        bytes1 part2Byte = setData[index+1];

        uint8 part1Int = uint8(part1Byte);
        uint8 part2Int = uint8(part2Byte);

        uint8 torso = part1Int >> 0x4;
        uint8 leg = (part1Int << 0x4) >> 0x4;
        uint8 weapon = part2Int >> 0x4;
        uint8 enchanted = (part2Int << 0x4) >> 0x4;
        
        return (uint256(torso),uint256(leg),uint256(weapon),(enchanted == 1 ? true : false));
    }
    
    function getChampionCP(uint256 tokenId) external pure returns (uint256) {
        require(tokenId <= 4444 && tokenId > 0, "Invalid tokenId");
        bytes1 chunk = cpData[tokenId-1];
        uint8 chunkUint8 = uint8(chunk);
        return 100 + uint256(chunkUint8);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}