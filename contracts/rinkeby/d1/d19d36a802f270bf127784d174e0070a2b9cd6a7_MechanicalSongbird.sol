/**
 *Submitted for verification at Etherscan.io on 2022-04-30
*/

//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;


// Contract author: @sec0ndstate
// Memories of an Aut√≥maton (MOAA) Puzzle by Nyx & secondstate
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ......___...........___...........___...........___.....
//  ...../__/\........./../\........./../\........./../\....
//  ....|..|::\......./../::\......./../::\......./../::\...
//  ....|..|:|:\...../../:/\:\...../../:/\:\...../../:/\:\..
//  ..__|__|:|\:\.../../:/..\:\.../../:/~/::\.../../:/~/::\.
//  ./__/::::|.\:\./__/:/.\__\:\./__/:/./:/\:\./__/:/./:/\:\
//  .\..\:\~~\__\/.\..\:\./../:/.\..\:\/:/__\/.\..\:\/:/__\/
//  ..\..\:\........\..\:\../:/...\..\::/.......\..\::/.....
//  ...\..\:\........\..\:\/:/.....\..\:\........\..\:\.....
//  ....\..\:\........\..\::/.......\..\:\........\..\:\....
//  .....\__\/.........\__\/.........\__\/.........\__\/....
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
//  ........................................................
// inspired by x0r's puzzle

contract MechanicalSongbird {

    uint256 private correctNonce;
    bytes32 private FindersKeepersResult;

    address public R2FtZU92ZXIKSolver;
    address public FindersKeepersSolver;

    constructor(uint256 _correctNonce, bytes32 _FindersKeepersResult) {
        correctNonce = _correctNonce;
        FindersKeepersResult = _FindersKeepersResult;
    }

    modifier isSolved(address solver){
        require(solver == address(0), "ERROR: The puzzle has been solved.");
        _;
    }

    // no insanity
    function R2FtZU92ZXIK(uint256 _nonceGuess) public isSolved(R2FtZU92ZXIKSolver){
        require(_nonceGuess == correctNonce, "Your guess..is in fact incorrect. Did you go through all the steps?");
        R2FtZU92ZXIKSolver = msg.sender;
    }

    // Find Me
    function FindersKeepers(address _yourAddress) public isSolved(FindersKeepersSolver){
        require(keccak256(abi.encodePacked(msg.sender)) == FindersKeepersResult, "Nice try, but wrong account.");
        FindersKeepersSolver = _yourAddress;
    }

    // View all solver accounts
    function solvers() public view returns (address, address){
        return (R2FtZU92ZXIKSolver,FindersKeepersSolver);
    }

}