/**
 *Submitted for verification at Etherscan.io on 2021-07-31
*/

/* @author zefram.eth */ pragma solidity 0.8.6; interface IR { function onERC721Received(address op, address fr, uint256 id, bytes calldata dt) external returns (bytes4); } contract Quine { event Transfer(address indexed fr, address indexed to, uint256 indexed id); event Approval(address indexed ow, address indexed ad, uint256 indexed id); event ApprovalForAll(address indexed ow, address indexed op, bool ad); string public constant name = "Quine NFT"; string public constant symbol = "QUINE"; mapping(uint256 => address) private _os; mapping(address => uint256) private _bs; mapping(uint256 => address) private _ta; mapping(address => mapping(address => bool)) private _oa; constructor() { _sm(msg.sender, 1); } function supportsInterface(bytes4 ii) public pure returns (bool) { return ii == 0x80ac58cd || ii == 0x5b5e139f || ii == 0x01ffc9a7; } function balanceOf(address ow) public view returns (uint256) { require(ow != address(0)); return _bs[ow]; } function ownerOf(uint256 id) public view returns (address) { address ow = _os[id]; require(ow != address(0)); return ow; } function approve(address to, uint256 id) public { address ow = ownerOf(id); require(to != ow); require(msg.sender == ow || isApprovedForAll(ow, msg.sender)); _ap(to, id); } function getApproved(uint256 id) public view returns (address) { require(_ex(id)); return _ta[id]; } function setApprovalForAll(address op, bool ad) public { require(op != msg.sender); _oa[msg.sender][op] = ad; emit ApprovalForAll(msg.sender, op, ad); } function isApprovedForAll(address ow, address op) public view returns (bool) { return _oa[ow][op]; } function transferFrom(address fr,address to,uint256 id) public { require(_ao(msg.sender, id)); _tr(fr, to, id); } function safeTransferFrom(address fr,address to,uint256 id) public { safeTransferFrom(fr, to, id, ""); } function safeTransferFrom(address fr,address to,uint256 id,bytes memory _dt) public { require(_ao(msg.sender, id)); _st(fr, to, id, _dt); } function _st(address fr,address to,uint256 id,bytes memory _dt) internal { _tr(fr, to, id); require(_cr(fr, to, id, _dt)); } function _ex(uint256 id) internal view returns (bool) { return _os[id] != address(0); } function _ao(address sp, uint256 id) internal view returns (bool) { require(_ex(id)); address ow = ownerOf(id); return (sp == ow || getApproved(id) == sp || isApprovedForAll(ow, sp)); } function _sm(address to, uint256 id) internal { require(to != address(0)); require(!_ex(id)); _bs[to] += 1; _os[id] = to; emit Transfer(address(0), to, id); require(_cr(address(0), to, id, "")); } function _tr(address fr,address to,uint256 id) internal { require(ownerOf(id) == fr); require(to != address(0)); _ap(address(0), id); _bs[fr] -= 1; _bs[to] += 1; _os[id] = to; emit Transfer(fr, to, id); } function _ap(address to, uint256 id) internal { _ta[id] = to; emit Approval(ownerOf(id), to, id); } function _cr(address fr,address to,uint256 id,bytes memory _dt) private returns (bool) { uint256 sz; assembly { sz := extcodesize(to) } if (sz > 0) { try IR(to).onERC721Received(msg.sender, fr, id, _dt) returns (bytes4 rv) { return rv == IR.onERC721Received.selector; } catch (bytes memory rs) { if (rs.length == 0) { revert(); } else { assembly { revert(add(32, rs), mload(rs)) } } } } else { return true; } } function tokenURI(uint256 id) public view returns (string memory s) { require(_ex(id)); bytes memory pr = "data:text/plain;charset=utf-8,";
s = '%2F%2A+%40author+zefram.eth+%2A%2F+pragma+solidity+0.8.6%3B+interface+IR+%7B+function+onERC721Received%28address+op%2C+address+fr%2C+uint256+id%2C+bytes+calldata+dt%29+external+returns+%28bytes4%29%3B+%7D+contract+Quine+%7B+event+Transfer%28address+indexed+fr%2C+address+indexed+to%2C+uint256+indexed+id%29%3B+event+Approval%28address+indexed+ow%2C+address+indexed+ad%2C+uint256+indexed+id%29%3B+event+ApprovalForAll%28address+indexed+ow%2C+address+indexed+op%2C+bool+ad%29%3B+string+public+constant+name+%3D+%22Quine+NFT%22%3B+string+public+constant+symbol+%3D+%22QUINE%22%3B+mapping%28uint256+%3D%3E+address%29+private+_os%3B+mapping%28address+%3D%3E+uint256%29+private+_bs%3B+mapping%28uint256+%3D%3E+address%29+private+_ta%3B+mapping%28address+%3D%3E+mapping%28address+%3D%3E+bool%29%29+private+_oa%3B+constructor%28%29+%7B+_sm%28msg.sender%2C+1%29%3B+%7D+function+supportsInterface%28bytes4+ii%29+public+pure+returns+%28bool%29+%7B+return+ii+%3D%3D+0x80ac58cd+%7C%7C+ii+%3D%3D+0x5b5e139f+%7C%7C+ii+%3D%3D+0x01ffc9a7%3B+%7D+function+balanceOf%28address+ow%29+public+view+returns+%28uint256%29+%7B+require%28ow+%21%3D+address%280%29%29%3B+return+_bs%5Bow%5D%3B+%7D+function+ownerOf%28uint256+id%29+public+view+returns+%28address%29+%7B+address+ow+%3D+_os%5Bid%5D%3B+require%28ow+%21%3D+address%280%29%29%3B+return+ow%3B+%7D+function+approve%28address+to%2C+uint256+id%29+public+%7B+address+ow+%3D+ownerOf%28id%29%3B+require%28to+%21%3D+ow%29%3B+require%28msg.sender+%3D%3D+ow+%7C%7C+isApprovedForAll%28ow%2C+msg.sender%29%29%3B+_ap%28to%2C+id%29%3B+%7D+function+getApproved%28uint256+id%29+public+view+returns+%28address%29+%7B+require%28_ex%28id%29%29%3B+return+_ta%5Bid%5D%3B+%7D+function+setApprovalForAll%28address+op%2C+bool+ad%29+public+%7B+require%28op+%21%3D+msg.sender%29%3B+_oa%5Bmsg.sender%5D%5Bop%5D+%3D+ad%3B+emit+ApprovalForAll%28msg.sender%2C+op%2C+ad%29%3B+%7D+function+isApprovedForAll%28address+ow%2C+address+op%29+public+view+returns+%28bool%29+%7B+return+_oa%5Bow%5D%5Bop%5D%3B+%7D+function+transferFrom%28address+fr%2Caddress+to%2Cuint256+id%29+public+%7B+require%28_ao%28msg.sender%2C+id%29%29%3B+_tr%28fr%2C+to%2C+id%29%3B+%7D+function+safeTransferFrom%28address+fr%2Caddress+to%2Cuint256+id%29+public+%7B+safeTransferFrom%28fr%2C+to%2C+id%2C+%22%22%29%3B+%7D+function+safeTransferFrom%28address+fr%2Caddress+to%2Cuint256+id%2Cbytes+memory+_dt%29+public+%7B+require%28_ao%28msg.sender%2C+id%29%29%3B+_st%28fr%2C+to%2C+id%2C+_dt%29%3B+%7D+function+_st%28address+fr%2Caddress+to%2Cuint256+id%2Cbytes+memory+_dt%29+internal+%7B+_tr%28fr%2C+to%2C+id%29%3B+require%28_cr%28fr%2C+to%2C+id%2C+_dt%29%29%3B+%7D+function+_ex%28uint256+id%29+internal+view+returns+%28bool%29+%7B+return+_os%5Bid%5D+%21%3D+address%280%29%3B+%7D+function+_ao%28address+sp%2C+uint256+id%29+internal+view+returns+%28bool%29+%7B+require%28_ex%28id%29%29%3B+address+ow+%3D+ownerOf%28id%29%3B+return+%28sp+%3D%3D+ow+%7C%7C+getApproved%28id%29+%3D%3D+sp+%7C%7C+isApprovedForAll%28ow%2C+sp%29%29%3B+%7D+function+_sm%28address+to%2C+uint256+id%29+internal+%7B+require%28to+%21%3D+address%280%29%29%3B+require%28%21_ex%28id%29%29%3B+_bs%5Bto%5D+%2B%3D+1%3B+_os%5Bid%5D+%3D+to%3B+emit+Transfer%28address%280%29%2C+to%2C+id%29%3B+require%28_cr%28address%280%29%2C+to%2C+id%2C+%22%22%29%29%3B+%7D+function+_tr%28address+fr%2Caddress+to%2Cuint256+id%29+internal+%7B+require%28ownerOf%28id%29+%3D%3D+fr%29%3B+require%28to+%21%3D+address%280%29%29%3B+_ap%28address%280%29%2C+id%29%3B+_bs%5Bfr%5D+-%3D+1%3B+_bs%5Bto%5D+%2B%3D+1%3B+_os%5Bid%5D+%3D+to%3B+emit+Transfer%28fr%2C+to%2C+id%29%3B+%7D+function+_ap%28address+to%2C+uint256+id%29+internal+%7B+_ta%5Bid%5D+%3D+to%3B+emit+Approval%28ownerOf%28id%29%2C+to%2C+id%29%3B+%7D+function+_cr%28address+fr%2Caddress+to%2Cuint256+id%2Cbytes+memory+_dt%29+private+returns+%28bool%29+%7B+uint256+sz%3B+assembly+%7B+sz+%3A%3D+extcodesize%28to%29+%7D+if+%28sz+%3E+0%29+%7B+try+IR%28to%29.onERC721Received%28msg.sender%2C+fr%2C+id%2C+_dt%29+returns+%28bytes4+rv%29+%7B+return+rv+%3D%3D+IR.onERC721Received.selector%3B+%7D+catch+%28bytes+memory+rs%29+%7B+if+%28rs.length+%3D%3D+0%29+%7B+revert%28%29%3B+%7D+else+%7B+assembly+%7B+revert%28add%2832%2C+rs%29%2C+mload%28rs%29%29+%7D+%7D+%7D+%7D+else+%7B+return+true%3B+%7D+%7D+function+tokenURI%28uint256+id%29+public+view+returns+%28string+memory+s%29+%7B+require%28_ex%28id%29%29%3B+bytes+memory+pr+%3D+%22data%3Atext%2Fplain%3Bcharset%3Dutf-8%2C%22%3B';
string memory t0 = "73203d20737472696e67286162692e656e636f64655061636b65642870722c20732c20222535436e732b2533442b253237222c20732c20222532372533422535436e737472696e672b6d656d6f72792b74302b2533442b253543253232222c2074302c20222535432532322533422535436e62797465732b6d656d6f72792b74312b2533442b686578253543253232222c2074302c20222535432532322533422535436e222c20743129293b7d7d";
bytes memory t1 = hex"73203d20737472696e67286162692e656e636f64655061636b65642870722c20732c20222535436e732b2533442b253237222c20732c20222532372533422535436e737472696e672b6d656d6f72792b74302b2533442b253543253232222c2074302c20222535432532322533422535436e62797465732b6d656d6f72792b74312b2533442b686578253543253232222c2074302c20222535432532322533422535436e222c20743129293b7d7d";
s = string(abi.encodePacked(pr, s, "%5Cns+%3D+%27", s, "%27%3B%5Cnstring+memory+t0+%3D+%5C%22", t0, "%5C%22%3B%5Cnbytes+memory+t1+%3D+hex%5C%22", t0, "%5C%22%3B%5Cn", t1));}}