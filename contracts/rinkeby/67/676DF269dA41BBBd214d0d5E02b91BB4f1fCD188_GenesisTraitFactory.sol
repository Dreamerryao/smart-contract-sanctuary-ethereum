// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library GenesisTraitFactory {
  // race, bg, mod, base, eyes, outfit, mouth, head, item
  uint constant public NUM_TRAITS = 9;
  uint constant public MAX_LENGTH = 32;

  function roll(uint seed, uint nonce) external view returns(uint[NUM_TRAITS] memory){
    uint[NUM_TRAITS] memory traits;
    uint[MAX_LENGTH][4][NUM_TRAITS] memory genes;
    
    // race
    uint[2][2] memory race;
    race[0] = [uint(1), 2];
    race[1] = [uint(50), 100];

    // bg
    genes[1][0] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    genes[1][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    genes[1][2] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 300, 450, 600, 750, 900, 920, 925, 930, 938, 948, 950, 960, 970, 980, 1000];
    genes[1][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 300, 450, 600, 750, 900, 920, 925, 930, 938, 948, 950, 960, 970, 980, 1000];
    
    // mod
    genes[2][0] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    genes[2][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    genes[2][2] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 1191, 1211, 1220, 1280, 1380, 1520, 1620, 1740, 1840, 1920, 2000];
    genes[2][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 1191, 1211, 1220, 1280, 1380, 1520, 1620, 1740, 1840, 1920, 2000];
    
    // base
    genes[3][0] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 5, 6];
    genes[3][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3];
    genes[3][2] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 34, 35, 40];
    genes[3][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 60];
    
    // eyes
    genes[4][0] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 10, 11, 12, 13, 14, 15, 16, 18, 20];
    genes[4][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 20];
    genes[4][2] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 32, 48, 58, 64, 66, 74, 82, 92, 102, 104, 105, 113];
    genes[4][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 58, 68, 78, 88, 94, 100, 102, 110, 118, 120, 121, 129];
    
    // outfit
    genes[5][0] = [uint(0), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
    genes[5][1] = [uint(0), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
    genes[5][2] = [uint(30), 60, 64, 84, 144, 148, 208, 258, 261, 321, 324, 328, 388, 448, 466, 521, 571, 631, 691, 751, 811, 871, 875, 925, 929, 934, 939, 943, 949, 959, 963, 1000];
    genes[5][3] = [uint(30), 60, 64, 84, 144, 148, 208, 258, 261, 321, 324, 328, 388, 448, 466, 521, 571, 631, 691, 751, 811, 871, 875, 925, 929, 934, 939, 943, 949, 959, 963, 1000];
    
    // mouth
    genes[6][0] = [uint(0), 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];
    genes[6][1] = [uint(0), 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];
    genes[6][2] = [uint(0), 0, 0, 12, 16, 17, 21, 31, 41, 45, 51, 52, 62, 74, 86, 96, 108, 118, 128, 138, 148, 158, 167, 168, 170, 171, 177, 179, 181, 190, 192, 200];
    genes[6][3] = [uint(0), 0, 0, 0, 12, 16, 17, 21, 31, 41, 45, 51, 52, 62, 74, 84, 96, 106, 116, 126, 136, 146, 155, 156, 158, 159, 165, 167, 169, 178, 180, 188];
    
    // head
    genes[7][0] = [uint(0), 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26];
    genes[7][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 6, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27];
    genes[7][2] = [uint(0), 0, 0, 0, 0, 130, 133, 136, 216, 296, 376, 472, 492, 552, 652, 657, 662, 732, 782, 786, 790, 800, 810, 870, 880, 890, 960, 961, 966, 973, 980, 990];
    genes[7][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 133, 213, 309, 329, 429, 434, 484, 488, 492, 502, 512, 572, 582, 592, 662, 669, 679];
    
    // item
    genes[8][0] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    genes[8][1] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    genes[8][2] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1737, 1749, 1753, 1765, 1771, 1779, 1785, 1786, 1792, 1798, 1806, 1812, 1820, 1880, 1940, 2000];
    genes[8][3] = [uint(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1737, 1749, 1753, 1765, 1771, 1779, 1785, 1786, 1792, 1798, 1806, 1812, 1820, 1880, 1940, 2000];
    
    uint randomSeed = uint(keccak256(abi.encodePacked(block.difficulty, seed, block.timestamp, nonce++)));
    uint r;
    for (uint i = 0; i < race[1].length; i++) {
      if (randomSeed % race[1][1] < race[1][i]) {
        r = i;
        traits[0] = race[0][i];
        break;
      }
    }
    
    for (uint i = 1; i < NUM_TRAITS; i++) {
      randomSeed = uint(keccak256(abi.encodePacked(block.difficulty, randomSeed, block.timestamp, nonce++)));
      uint traitSeed = randomSeed % genes[i][2+r][MAX_LENGTH-1];
      for (uint j = 0; j < MAX_LENGTH; j++) {
        if (traitSeed < genes[i][2+r][j]) {
          traits[i] = genes[i][r][j];
          break;
        }
      }
    }

    if (traits[6] == 21 || traits[6] == 22 || traits[6] == 23 || traits[6] == 28) {
      traits[4] = 0;
    }
    
    return traits;
  }
  
}