//SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
pragma abicoder v2;

import "AggregatorV3Interface.sol";
import "KeeperCompatibleInterface.sol";

error StakeMonitor__UpkeepNotNeeded();
error StakeMonitor__TransferFailed();
error StakingMonitor__UpperBond_SmallerThan_LowerBound();
error StakeMonitor__UserHasntDepositedETH();

struct userInfo {
    uint256 balance;
    uint256 DAIBalance;
    uint256 priceLimit;
    uint256 timeInterval;
}

contract StakingMonitor is KeeperCompatibleInterface {
    mapping(address => userInfo) public s_userInfos;
    address[] s_addresses;
    event Deposited(address indexed user);
    AggregatorV3Interface public priceFeed;

    uint256 public s_lowestPriceLimit;
    uint256 public lastTimeStamp;

    constructor(address _priceFeed) {
        priceFeed = AggregatorV3Interface(_priceFeed);
    }

    function getPrice() public view returns (uint256) {
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        return uint256(answer);
    }

    function deposit() external payable {
        s_userInfos[msg.sender].balance =
            s_userInfos[msg.sender].balance +
            msg.value;
        s_addresses.push(msg.sender);
        emit Deposited(msg.sender);
    }

    function getBalance() external view returns (uint256) {
        return s_userInfos[msg.sender].balance;
    }

    function setPriceLimit(uint256 _priceLimit) external {
        // a user cannot set a price limit if they haven't deposited some eth
        if (s_userInfos[msg.sender].balance == 0) {
            revert StakeMonitor__UserHasntDepositedETH();
        }

        s_userInfos[msg.sender].priceLimit = _priceLimit;

        // set lowest price limit across all users, to trigger upkeep if the lowest price limit is reached
        if ((s_lowestPriceLimit == 0) || (s_lowestPriceLimit > _priceLimit)) {
            s_lowestPriceLimit = _priceLimit;
        }
    }

    function checkLowestLimitUnderCurrentPrice() public view returns (bool) {
        uint price = getPrice();
        bool upkeepNeeded = (s_lowestPriceLimit < price);
        return upkeepNeeded;
    }

    function checkUpkeep(bytes calldata checkData)
        external
        override
        returns (bool upkeepNeeded, bytes memory performData)
    {
        upkeepNeeded = checkLowestLimitUnderCurrentPrice();

        // We don't use the checkData in this example
        // checkData was defined when the Upkeep was registered
        performData = checkData;
    }

    function performUpkeep(bytes calldata performData) external override {
        // iterate over users price limits
        // trigger the sale if current ether price is above price limit for user

        // We don't use the performData in this example
        // performData is generated by the Keeper's call to your `checkUpkeep` function
        performData;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface KeeperCompatibleInterface {

  /**
   * @notice checks if the contract requires work to be done.
   * @param checkData data passed to the contract when checking for upkeep.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with,
   * if upkeep is needed.
   */
  function checkUpkeep(
    bytes calldata checkData
  )
    external
    returns (
      bool upkeepNeeded,
      bytes memory performData
    );

  /**
   * @notice Performs work on the contract. Executed by the keepers, via the registry.
   * @param performData is the data which was passed back from the checkData
   * simulation.
   */
  function performUpkeep(
    bytes calldata performData
  ) external;
}