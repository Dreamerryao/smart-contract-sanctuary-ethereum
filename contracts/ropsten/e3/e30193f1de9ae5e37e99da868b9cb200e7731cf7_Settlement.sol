// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity 0.8.13;

// interface
import {IERC20Metadata as IERC20} from "@openzeppelin/token/ERC20/extensions/IERC20Metadata.sol";
// contract
// import {EIP712} from "@openzeppelin/utils/cryptography/draft-EIP712.sol";
// lib
import {Counters} from "@openzeppelin/utils/Counters.sol";
import {ECDSA} from "@openzeppelin/utils/cryptography/ECDSA.sol";

/// @title Settlement
/// @author Haythem Sellami
contract Settlement {
    using Counters for Counters.Counter;

    uint256 internal constant MAX_ERROR_COUNT = 7;
    bytes32 public constant DOMAIN_NAME = keccak256("OPYN BRIDGE");
    bytes32 public constant DOMAIN_VERSION = keccak256("1");
    bytes32 public constant DOMAIN_TYPEHASH =
        keccak256(
            abi.encodePacked(
                "EIP712Domain(",
                "string name,",
                "string version,",
                "uint256 chainId,",
                "address verifyingContract",
                ")"
            )
        );
    bytes32 private constant _OPYN_RFQ_TYPEHASH =
        keccak256(
            abi.encodePacked(
                "RFQ(uint256 offerId, uint256 bidId, address signerAddress, address bidderAddress, address bidToken, address offerToken, uint256 bidAmount, uint256 sellAmount,uint256 nonce)"
            )
        );
    bytes32 private constant _TEST_TYPEHASH =
        keccak256(
            abi.encodePacked(
                "TEST(uint256 offerId, uint256 bidId)"
            )
        );
    bytes32 public immutable DOMAIN_SEPARATOR;

    uint256 public offersCounter;

    mapping(address => address) public bidderDelegator; // mapping between bidder address and delegator that can sign bid in place of bidder
    mapping(uint256 => OfferData) public _offers;
    mapping(address => Counters.Counter) private _nonces;

    struct BidData {
        uint256 offerId; // the ID of offer this bid relate to
        uint256 bidId; // bidId generated by paradigmco
        address signerAddress; // bid signer address (can be different than bidder address if this address is a bidder delegator)
        address bidderAddress; // bidder address (can be different than signer address if bidder authorize signer address is it is delegator)
        address bidToken; // bid token address
        address offerToken; // offer token address
        uint256 bidAmount; // bid amount to buy from offer
        uint256 sellAmount; // amount to sell of bidToken
        uint8 v; // v
        bytes32 r; // r
        bytes32 s; // s
    }

    struct TestData {
        uint256 offerId;
        uint256 bidId;
        uint8 v;
        bytes32 r;
        bytes32 s;
    }

    struct OfferData {
        address seller; // seller address
        address offerToken; // offer token to sell
        address bidToken; // accepted token to bid with
        uint128 minPrice; // price of 1 offerToken demnominated in bidToken
        uint128 minBidSize; // min bid size
        uint256 totalSize; // offer total size
        uint256 offerTokenDecimals; // decimals of offer token
    }

    event CreateOffer(
        uint256 indexed offerId,
        address indexed seller,
        address indexed offerToken,
        address bidToken,
        uint128 minPrice,
        uint128 minBidSize,
        uint256 totalSize
    );
    event DelegateToSigner(address indexed bidder, address indexed newSigner);
    event SettleOffer(uint256 indexed offerId, uint256 bidId, address offerToken, address bidToken, address indexed seller, address indexed bidder, uint256 bidAmount, uint256 sellAmount);

    constructor() {
        DOMAIN_SEPARATOR = keccak256(
            abi.encode(
                DOMAIN_TYPEHASH,
                DOMAIN_NAME,
                DOMAIN_VERSION,
                block.chainid,
                address(this)
            )
        );
    }

    /**
     * @notice create new onchain offer
     * @param _offerToken token address to sell
     * @param _bidToken token address to bid with
     * @param _minPrice min price of token to sell denominated in token to buy unit
     * @param _minBidSize min bid size
     * @param _totalSize total offer size
     */
    function createOffer(
        address _offerToken,
        address _bidToken,
        uint128 _minPrice,
        uint128 _minBidSize,
        uint256 _totalSize
    ) external returns (uint256) {
        require(_minPrice > 0, "Invalid minPrice");
        require(_minBidSize > 0, "Invalid minBidSize");

        uint256 offerId = offersCounter += 1;

        _offers[offerId].seller = msg.sender;
        _offers[offerId].offerToken = _offerToken;
        _offers[offerId].bidToken = _bidToken;
        _offers[offerId].minPrice = _minPrice;
        _offers[offerId].minBidSize = _minBidSize;
        _offers[offerId].totalSize = _totalSize;
        _offers[offerId].offerTokenDecimals = IERC20(_offerToken).decimals();

        emit CreateOffer(
            offerId,
            msg.sender,
            _offerToken,
            _bidToken,
            _minPrice,
            _minBidSize,
            _totalSize
        );

        return offerId;
    }

    /**
     * @notice delegate signing bid to another address
     * @param _signer new signer address
     */
    function delegateToSigner(address _signer) external {
        require(_signer != address(0), "Invalid signer address");

        bidderDelegator[msg.sender] = _signer;

        emit DelegateToSigner(msg.sender, _signer);
    }

    /**
     * @notice settlet offer
     * @param _offerId offer ID
     * @param _bidData BidData struct
     */
    function settleOffer(uint256 _offerId, BidData calldata _bidData) external {
        require(
            _offers[_offerId].seller == msg.sender,
            "Not authorized to settle"
        );
        require(
            (_offerId == _bidData.offerId) &&
                (_bidData.bidToken == _offers[_offerId].bidToken) &&
                (_bidData.offerToken == _offers[_offerId].offerToken) &&
                (_bidData.bidAmount >= _offers[_offerId].minBidSize),
            "Offer details do not match"
        );

        if (_bidData.bidderAddress != _bidData.signerAddress) {
            // check that signer was delegated by bidder to sign
            require(
                bidderDelegator[_bidData.bidderAddress] ==
                    _bidData.signerAddress,
                "Invalid signer for bidder address"
            );
        }

        address bidSigner = ecrecover(
            keccak256(
                abi.encodePacked(
                    "\x19\x01",
                    DOMAIN_SEPARATOR,
                    keccak256(
                        abi.encode(
                            _OPYN_RFQ_TYPEHASH,
                            _bidData.offerId,
                            _bidData.bidId,
                            _bidData.signerAddress,
                            _bidData.bidderAddress,
                            _bidData.bidToken,
                            _bidData.offerToken,
                            _bidData.bidAmount,
                            _bidData.sellAmount,
                            _useNonce(_bidData.signerAddress)
                        )
                    )
                )
            ),
            _bidData.v,
            _bidData.r,
            _bidData.s
        );

        require(bidSigner == _bidData.signerAddress, "Invalid bid signature");

        IERC20(_bidData.offerToken).transferFrom(
            msg.sender,
            _bidData.bidderAddress,
            _bidData.bidAmount
        );
        IERC20(_bidData.bidToken).transferFrom(
            _bidData.bidderAddress,
            msg.sender,
            _bidData.sellAmount
        );

        emit SettleOffer(_offerId, _bidData.bidId, _bidData.offerToken, _bidData.bidToken, msg.sender, _bidData.bidderAddress, _bidData.bidAmount, _bidData.sellAmount);
    }

    /**
     * @notice check bid errors
     * @param _bidData BidData struct
     * @return Number of errors found and array of error messages
     */
    function checkBid(BidData calldata _bidData) external view returns (uint256, bytes32[] memory) {
        OfferData memory offer = _offers[_bidData.offerId];

        require(offer.seller != address(0), "Offer does not exist");

        uint256 errCount;
        bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);

        // Check signature
        address signerAddress = _getSigner(_bidData);

        if (signerAddress != _bidData.signerAddress) {
            errors[errCount] = "SIGNATURE_MISMATCHED";
            errCount++;
        }
        // Check signer is either bidder or bidder's delegator
        if (_bidData.bidderAddress != _bidData.signerAddress) {
            // check that signer was delegated by bidder to sign
            if (bidderDelegator[_bidData.bidderAddress] != _bidData.signerAddress) {
                errors[errCount] = "INVALID_SIGNER_FOR_BIDDER";
                errCount++;
            }
        }
        // Check bid size
        if (_bidData.bidAmount < offer.minBidSize) {
            errors[errCount] = "BID_TOO_SMALL";
            errCount++;
        }
        if (_bidData.bidAmount > offer.totalSize) {
            errors[errCount] = "BID_EXCEED_TOTAL_SIZE";
            errCount++;
        }
        // Check bid price
        uint256 bidPrice = (_bidData.sellAmount * 10**offer.offerTokenDecimals) / _bidData.bidAmount;
        if (bidPrice < offer.minPrice) {
            errors[errCount] = "PRICE_TOO_LOW";
            errCount++;
        }
        // Check signer allowance
        uint256 signerAllowance =
            IERC20(offer.bidToken).allowance(
                _bidData.bidderAddress,
                address(this)
            );
        if (signerAllowance < _bidData.sellAmount) {
            errors[errCount] = "BIDDER_ALLOWANCE_LOW";
            errCount++;
        }
        // Check seller allowance
        uint256 sellerAllowance =
            IERC20(offer.offerToken).allowance(offer.seller, address(this));
        if (sellerAllowance < _bidData.bidAmount) {
            errors[errCount] = "SELLER_ALLOWANCE_LOW";
            errCount++;
        }

        return (errCount, errors);
    }

    /**
     * @notice return signer address of a BidData struct
     * @param _bidData BidData struct
     * @return bid signer address
     */
    function getBidSigner(BidData calldata _bidData) external view returns (address) {
        return _getSigner(_bidData);
    }

    /**
     * @notice get nonce for specific address
     * @param _owner address
     * @return nonce 
     */
    function nonces(address _owner) external view returns (uint256) {
        return _nonces[_owner].current();
    }

    /**
     * @notice get offer details
     * @param _offerId offer ID
     * @return offer seller, token to sell, token to bid with, min price and min bid size
     */
    function getOfferDetails(uint256 _offerId)
        external
        view
        returns (
            address,
            address,
            address,
            uint128,
            uint128
        )
    {
        OfferData memory offer = _offers[_offerId];

        return (
            offer.seller,
            offer.offerToken,
            offer.bidToken,
            offer.minPrice,
            offer.minBidSize
        );
    }

    function _useNonce(address _owner) internal returns (uint256 current) {
        Counters.Counter storage nonce = _nonces[_owner];
        current = nonce.current();
        nonce.increment();
    }

    /**
     * @notice view function to get big signer address
     * @param _bidData BidData struct
     * @return signer address
     */
    function _getSigner(BidData calldata _bidData) internal view returns (address) {
        return ecrecover(
            keccak256(
                abi.encodePacked(
                    "\x19\x01",
                    DOMAIN_SEPARATOR,
                    keccak256(
                        abi.encode(
                            _OPYN_RFQ_TYPEHASH,
                            _bidData.offerId,
                            _bidData.bidId,
                            _bidData.signerAddress,
                            _bidData.bidderAddress,
                            _bidData.bidToken,
                            _bidData.offerToken,
                            _bidData.bidAmount,
                            _bidData.sellAmount,
                            _nonces[_bidData.signerAddress].current()
                        )
                    )
                )
            ),
            _bidData.v,
            _bidData.r,
            _bidData.s
        );
    }

    function getTestSigner(TestData calldata _test) external view returns (address) {
        return ecrecover(
            keccak256(
                abi.encodePacked(
                    "\x19\x01",
                    DOMAIN_SEPARATOR,
                    keccak256(
                        abi.encode(
                            _TEST_TYPEHASH,
                            _test.offerId,
                            _test.bidId
                        )
                    )
                )
            ),
            _test.v,
            _test.r,
            _test.s
        );
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        // Check the signature length
        // - case 65: r,s,v signature (standard)
        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else if (signature.length == 64) {
            bytes32 r;
            bytes32 vs;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                vs := mload(add(signature, 0x40))
            }
            return tryRecover(hash, r, vs);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}