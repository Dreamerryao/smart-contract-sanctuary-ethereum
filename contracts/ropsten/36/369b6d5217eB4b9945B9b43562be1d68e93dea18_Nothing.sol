/* 

You'll own nothing. And you'll be happy. 

 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMNMMNMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN8ZZZZZZZZZZOZ8NMMMNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDOZZ$$$$$$$$$$$ZZ$ZZZO8MMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDOZZZ$$7777777777$$$$$$$$$ZZO88MMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMOZZZZ$$77777II7IIII7777777$$$$ZZZO8DMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOZZ$$$$$$777IIII7IIIIIIIIIIII77777$$$ZZZO8MMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMZZZ$$$7777777IIIII??II?II?I???III7$I77777$ZZOOMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDZZZ$$$$777I7IIIIII?I?I??I????III??IIII777I777$ZZOO8MNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOZZ$$7$77II77III7?II????????II???I?????IIIII7I7$$$ZZO8DMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOZZZ$$7I77IIIII??I?I????????+????=????????II?III?77$$$Z$ZO8NMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8OZZ$$$7777IIIIII?????I?+++?+?+??+?+??????+++????III77$$$$$ZZ8DDMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMM8OOZ$$Z7IIIII?I????????????+?++++++=+++=?++??++??++?I?I77$$$$$ZZ8DDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOOOZ$$7777II????I?I?I?????++++?++++=++?+++++==++++????III7I$$$$$$OONNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOOZZZZ$$77III?????II???++++++++=++++=?+?+++===+=++++???+??III77$$$$ZO8DNDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMOOZZZ$$777IIII???????++++++++==++=++=++=+++===++?+=++++++????III7$7$$Z888DDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOOOZZ$7$77II????+++++?+++++++==++===+===+++=+=+==?==++++??????IIIII777$O888DDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN888ZZZ$Z$$$7II?????++++?++=+=+========+=~+++==+++=+++++=?+++?+???IIII77I7ZZ88DDDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO8ZOZZZ77$$77II????+++++++++===~========~===+++=+=++++++?++?+?+??IIIII777ZOO88DDND8MNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMND8OOZZZZ$$7777II?++?++=?+?+===:=~+=====~~======++===+==+++?==++??????IIII777Z8ODDDNND8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN888OZZZZ$$$II7II???+?=++=+=+==========~~=~=~~==++=====+=+++++++=+?III?IIII7I7ZOO88DDND8DNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMD888OOZ$$$$$7III??++++======~~==~~====~~=~~~~========~==++===++?????IIIIIII77$$8888NDDNDDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZZZZ7$7III?+??+==+=~+=~====~~~~~~~~~=~~~~~~~=======++++++=++++??I??I?I777O8888DNDDNND8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMND88OOZZZ$7$77II?I+?++=+==========~~~~~=~~~~~::~~~=~~=======+=+=+++?+?+I???I7I7$OOO88DNDDDNDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZZ$$$7III????++++==+=======:~~=~=~~~~~~~~:~~~=:~=========?+++????+?I?II7$ZZZZ88DD8DDNDNZNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN888OOZZ$Z$Z7III?????++++==~===~~~~===~:~=~:~~:~~:~~=~~~~==~~=====++??+???IIII$$ZZZOOODDDDDNNDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZO$Z$77IIIII?I+++==+=========~=~~~~~~:~~~:::~~~~===~==~==~=+++=+??I?7?7$7$Z$$Z88D888DDDNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDD88OOZZ$$7777IIII??+??+=====~=~=~=~:~~~~~~~::~~~:~~:::~~~~==~~~=+==+=++?I7$I7$$77$ZO8O8O8DN8DDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDD8OOOOZ$7$$77II????+++==+===~=~~=~~~~~~~~=~::~:::::::~~~~~~=~=====+=+?=?II7$7$Z$$7$OO8DO8DDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZZ$$7777II???+++=++++=====~~~~~~~~~=====:~::~:::::,~~~==~~=+======+?II7$$7$$$7$ZZZOO8ONNNDNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDDNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN8D8OOOZZ$7$77$III??++=++=====~=~=~~~~~~~~==~~=::~::::~::~~=~~=~=+====+=++??I77Z$$ZZ$7Z$ZD88DDNDD8DNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNDNDD.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDD88OOOZ$77$7777??I?++?=====~=~~~:~=:~:~=~=~~~~~::::::::,~~:~~~~=====+=+++=IIIII77$$777ZZ88ODDNNNDNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNDDNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZZ$7I$$7I?I?I+=?++==~=~~~:~~~~~~~~:~~~=~~=:::~::::~~~~===~~=====+=+++=+?+II7$$$$$OZ8D88NNDDNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNDNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMND88OZZO$77777I?I??++==~~~~===::~:::~~~~~=~~~~~=:::~:::::~~~~~~~~~~~==++++++=+++?I$$$7$$Z8NDDNNNND8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD888ZZ$$$777I????+++====~===~~=~~~~~~~~:~~~==~=~::~::~~~:~~~=~:~=~~=~~+?=~==+=+???7$7$$ZDNDNNNDDNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDN888OZZ7$$7III??++=+===~~~:~~~=~~:~~~::~:~:=~+==:,~~====~~~~==+~==+===+===+==++++?77Z$ZZDNDDNNNNNDNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDN888OZZ$$77III+?++===~~:~:~~:~~:::::~=~~=~~~====:~~===:~??+??7$7?$?Z7?=+=+?+++=?+?I7OO8Z8NNDNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMNDD88OZZZ$77II??++==~=~~~~~~==~~==+~~=~=~=~~=~~==:::~~::~+=??7?ZO7Z$ZZ?OI$+=7II$ZI+?$$888DNNDNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDD8888ZZZ$I7I7I++++=~=~+~:~+=$?7I77+=+=?=+==~~~~~::~:===+?II$?$$88ZZZOOZZ8$Z7II7$$Z$7O8DDDNNDNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNDNNNDDNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD8O8OZZ$$7I7??++++++?I+?++I$OZ$$?77?+7+?=?++~~==~=~==+?II77778ODZZO8OD8OOZI$ZZZOZOZZOODNNNNNNNNNNNDNDNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDD88OOZZ$ZI77II+II?7I=+I?OOOIO$Z$Z$??++I7$7+===:~~=?=I$Z$7$O8DDDD8MMOZO8D8OZ?$Z$ZZ8O8DMDNNNNNNNNNDDDNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNDNNNNND.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN8888OOOZ$Z777I77~$8$??+IOOOOD8ZOZODMM$77$O$==~::~~~++?7ZNDDN7IZND8OO8D8OZZOZZ$$ZOZO8OZDNN8NMNNNNDNDDDDNNNNNNNNNNNNNNNNNNDNNNNNDDNNNDNNNNNND.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMD88O8OZZ$7N8$$II7?7ZIZO8O88D8OO8D88DDDDDN8$=~~~::=+=+I7ONM:ZMMNDZO$$?I:~===+=II7$ZO8DDDNNDDN8NDDNDDDDDNNNNNNNNNNNNNNNNNNNNNNDNDNNNNNNNNNNND.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDDO88OZZMZZ$$$$77I$Z$ZOZI$?$I$ZOO88DDNDNMD8?+=++7Z$$$ZO8N8MMNDOO8DNMNO?=::==~+?77Z88DDDDNNNNOMNNDDND8DNNNNNDDDDNNNNNNNNDNNNNNNDNNDNNNNNNNDD.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN888ZOOOMOZZ7ZOZ7OO7$77I++===~?I7$O8O88DD88ZMM8OOI~==I8NNMMMMND8D$Z78MMMOMNM$?+I7ZZOD8NDDDNNN88DDDMMNMNNNNNNDDDDNNNNNNNNNNNNDNNDNNNNNNNNNDND.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN8OMNOZ~MOZZZZOZZ$77$7?+==:~?ZMMMMNNNDZ$77I78O=~::~~:=+7DMMNMND$$8OD:$NDMMMNMMNO7Z8DDD8DNDNNN8ONNNMNMMNNNNNNDNDNDNNNNNNNNNNNNNNNNNNNNNNNNDNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8DMNMMMMOOZ$Z$$$$7I7?=+?$MM=MMMM8DD8OOZZ77NZ$==::,:~~=78DMNN8ON87=:::DOODDDDNNMMN8DDDDDNDNNN8DN8D8DNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNDNNDNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDMMMMMMMOZZO$Z7OZZO7+7DMMMMMMNDNZ7Z8DZ8I?D8N8~~::::~~+I8NMO7M8Z$I+~~::OO8DDDOOO8ODND88D8DNND+DD8NODNDNNNNNNMMMMNNNNNNNNDNNNNNNDNNDDNDDDNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8ODMMNMMMNDMND888OZO$7Z$DMMNNNNNNO8OIII$77?=NN$N+==~~~:~~+7ODN7M8NZ7:?=,:::===++++?IZ8DNMNNDDDDD8NDD8O8DNDNNNNNNMMMNNNNNNNNNNNNNDDDNNNNNNNNDNDD.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN88OO8DD88DNDNDDD88O$8OZZMMN8$I78DDO7++=III+I=INNN+==~~:~:=?7ZDNMMNND$=,=++??I????I7$$OOO8DDDNNNNNDDNNN8NDNNNNNNNNMMNNNNNNNNNNNNNNNNDNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMD88OOO88OZZ88DO8D88OZO$OMDOI?+++++:,:+I7??+7I+~MD++==::,:~=?$88NMMDZO7+::,~=+???$7Z$$ZZZZZ8DNNNDN7NNNND8DNNNNNNNNNMMNNNNNNNNNNNNNNNNDNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNDD8OOD88Z$$ZZNOO88OOZONO$$$$77I?7I$$?=:=???=~~$D++=~~:,:~=I$ODDDNMZI7?+:~~~~===??I77$7$$$8DND88:8DDNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNM8OD8OZZ7$$ZMOZO88D87I?III7III?+=~:~:=I~=~Z7~=++=~:,::~=I$8D8OOOZ?II7+=~~:~~~==+?I?I?$$ODDD+NO888DNNNNNNMNNDNNNNMNNNNNNNNNNNNNNNNNNNNNDNDNDDDN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNODNDDD8OZZ$Z7O8ZO88OO7??+?I??==~~~:,~==:~+8Z~=++=~~::::=+IZ8D8ZZZ$$OD+I?==~~==~==?+?77ZO$ZMOO$O8ZO8NMNNMNNMMNNNNNMNNNNNNNNNDNNNNDDNNNNNDNNDNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM88DDDN88OZ$777ZZZD7OO$7??++=+==~::~~+=.Z,$+======~~~:::~=?7Z88O$Z7777$ZI=+Z8NMMMN8$7IZOOZ8ZO$ZOZD8DDNMMNNMMMMNMNNNNNNNNNNDDNNNNNNNDDNDNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOO88DN88OZZZ$77O$77777ZOO$IIII$ZO7+~=:=I?~~===+===:~:::~+?IZODOZ$77$7?+???I??I+III77I77Z$77$$OZODDNDNNNNNMMMMMMMNNNNNNNNNDDNNNNNNNDNNNNDDNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM888O8DD8OZOZZ?I$IIIII77I??I??????II?+=+=~~=~==++=~~~:::~=+?$ODDO$777I7?+=+++++=++??IIIII77I7$Z8ONNNNNNNMNNMMMMMMNNNNNNNDNNNNNNNNNNNNDNNNNDNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8D88O8D88OZZ77II7I???II?I?+?+????===~~=====~+?++=~::::~~~=?78NDDO$77III?=======~~=++?++??III7IZ88DNDMNMNNNNMMMMMNNNNNNNNNNNNNDNNNDNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMODO88888O88O$7?I7III??I+?+++=:~~:~~:~~~===~=???+~~::::::~=+7ONNN8$?I77II==~====~~=+I+=?I+?II7$ZDDDDDNMMNNNNNMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMNMMMNMMM88O88888888Z$77II?7?+?++=+~=~~:==~:~~~==~=+++??+=~:::::::=?7ONNMDOIIII??====~=~=====++IIII7Z7O8ODNDDNMNNNNNMMMMNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMN888888888OZ777IIIII??~+=+=:~~~=~~~~=~~~=??+==+?=::,..,::==?DDMN888O$7+I++======++==++?I$ZO$ZOO8DNNNNMNNNNNMMMMNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNN88DDDD8888OZ$7$7IIII++=+===~=~~:::~~::~+I+++=~=~:,,.:,~~+?$DNNN8ZZZN$??++===++=++++??II$ZO$Z878NNDDNMNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOZO8D88888O$$$$7777II+?++==++=~~~~:~==+I?~~~~+=~:::,::==??ZDNNNO$7$OO7?=+++====++????77ZOZ7IZZZZDDDNMMNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8OZO8888D8OZ$$$77$I$+??+?+====~~:~~=++I?+~~~=+?++=~==+?I$8DNNNN8OO$O8N$??++===~==???I77OOOOO$7ZDNDDNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNZZOO88888O$7$7$I77IIII+??+=+==~~==+=?I===?III??++==??77ZDNNNNNNNN88DDD$+=~+=~~===?II77O8OZZI$Z8DDDDMNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM888O888O88Z$77$I77III??++==~~==~~=+?7?I?IZDMMMII?I77$ZOODDNMMMMMMNNNNM8$?=~====++=?77Z$O88Z$$ODONNMNNNNMMNNDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMN8OZ888888Z$77$77+7?I??+=+======+??$++7$ZDMNNMMZ$$ON8DD8DMMMMMMMMMNNMMDZI?~~=~~=+??I7$Z8DDOZ$Z8$DDMNNMNNNNNDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMDO888888Z7$$$III7II?I+=+===+=+I?77=+~Z8$====?I$ONNNNNMMMMMMMMMMMMND8Z$7$=~====++?+7$ZONNOO$$OZ8NMNMNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNDO88888ZZ77$7777I?????=+==++??77=+===7II+==+++?8NNMMMMMMMMMMMMD8O8ZZ$?7~~===~??+?7Z$8NND8O$Z8NNNNNNNMNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNM8888888OZ$$$?77$III?+?++?=+?IIII+==~~=~:+==+=+=+7$8O8OOD88DDDD8ZZ77$777I=~==+??I?7$OZDMDDO$Z8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMM88888D8ZZ$$777III??++++++?+I7$++====~~++==~~+==+I?+7I77$ZZZZOZZ7I?II+IIZ==~==+??7$Z8DNNNOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN888O88OZZ777777$II???++??I=77==+=+==+=~=~++=~I~?I?:=??+I?7777I7I+??III77Z==++??I$$OODNNDOD8DDMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMNNMM88DOO8OO$$$777777I???+???77$I+==++=+=+=~=+?+~~~+=+~~++I??7I7I7I?I$+II777$I==+II7$ZOONDNN8888NMMNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNNM8888888O$Z$I7$77III?I?I+IZ7$++++++==+==+=?==I=~?====++=++I?I?7I?$777?7$Z$Z+=+=?I?$88DNMDDODNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMNNMM8888888OOZ$$$Z777I777??7777++?=???++++=+++:,=+~+===:==+=+?+I7II?$I777$ZIIZO++++??7ODNNNDDDNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMN888O8OO$Z7I$$7III?IIII$$7Z++==+??+++??=~~~~~~~=:==~==?++=?III77I777$$87IZ8I+?+I7$8DNNNNDNDNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNMNMMO888O88Z$Z$$7$I77I?I77$77?+=++=?I+==+~==~+:~~:+~~~:~:=++I???II?I$7ZZ$8Z7ZOD???I7788DDN8DDDNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNMNMNMM888OO8OOZZ$$77?II77?I$$IZ+=+?+?III+++~=~~=:~:~+~?=~=:=+?I?=???7Z$O8DODOZ$8D?+~?778ODND88DMNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNNMNM888O88OOZZ77$I7II??777?+??+?I????+=+==~=~~,+~+=+~~:?+=?+II7+?7OZDOONDOZ8OD+?+I?7ZODNN8N8DDMNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNMNMMMNNN88OO88OOO$$$7II7+IIII??III77????+++===?=:~~=:+:=I=+++I?7$7ZZZ8ODDDN8ODNN8~==?=7ZODNN8D8NDNNNNDMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMNNMNNM888888ZZOZ$77II7=?+++?+=7IIII7?III????IIII?====I==?7ZOODDDDNNNMMNNNDDDD88+~=+I7$8NDD88DNNNNNNDMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNNNNNNM88888ZZZZ777I?I??===?++?III7$$Z$ZOOZZZZZ$$ZZZI+7$O8DDNMNMMMMMMMMMMMMNDOO~=++?IZZDDDD8DNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMNNNNNM88888OZ$$$77???+++==+~+I7$$$ONMMNNDDDDNMNDD8O8DDNNMMMMMMDNDNMMMMMMMMDO$Z~~=??7Z88DND8DNNNNNDMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNNNNNNNNND88O8OO$Z$77II+?++==+++77ZD7I7$7$I?77+I+$?+OMNNMMMNO$7$8Z8NNOO8NMMMDZIIZ:~=?77$ONNNDDNDNNNDMMMMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNMNNNNNNMD8DD8OZZ$$77I???==++??$?I+??I?I777I77+I7?I+?Z+~??$IZ7O$I$$ODNMMMNN8$7I~~==+7$OD8DDDNDDNNNMMMMMMMNNNNNNNNNNNNMMNNNNNNNNMMNNMMNNNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNNMMNNNNNM8DD8OO$$$77?I=++==++??+++?II??I+++=====+~?=I7$$7$7ZOOZNMNNNMMMND8ZOI+~=++IZ$8NODDDMDNNNNMMMMMNNMNMNNNNMMMMMMMMMMMMMMMMMMMMMMMNNNNNN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNMNNNNNNNNM8DDDOZ$$$7III??+++??7+++III7III77I77$ZZZO88DNNNNNMMMMNNMMMMN8O8Z$ZO=~=+IIZ88DDDNDNNNNNMMMMMMNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNNNNNNNNNM8DDD8OZZ$777II???I+7?+++??$I7$$$OZOODNMMMMMMMMMMMMNMMMMDD8ZOOZO8Z88=+++7$OODNDNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMNNMNNNNNM8DD88ZZ$$$7II???+IO??++??+I7$8OZONNNO$7777Z$ZZZZ$$$ZO7Z7$$OOZ8OZ87=++?IZO8NDDNMMMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNMNNNMMMDD88OZZZ$$7IIIIIII?I??II???7+IIII?I+~~~=I==+=+?II$$777ZZO$$OZ7$ZO?+?I$88NNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMNNNNNNNNNN88888OZZ$$$7IIII77II?77I77I+II?I??+:=~~:~~===+==+=I77$I7$OZ7Z$Z88+~?I$88MNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMNNMMNMNNNMD88888OOZ$$I77777?II?I7$II?II??+~:::=:~:==~+?+I==??7+?7I$$$IO8DDZ?I7ZDDNMNDNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMNNNNNMD8O88OOZZZ$$7$O?7I7III7+I+=+~~:~=~:~:~=+====+=+++?I$I7?7$$Z8ZDD$I?7ODDMNNMNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMNMMNNNM88888O8OOZZZ$Z$7$77I7I?I++==+:+~:=~+=~~+~=?~++++II77I?I7ZOZO8N8$OII8NNNNNNNNMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMNNNNM888888OOOO8Z$7$$$7III+?=+==~===++==?++?I+?+++IIII$77I$ZO8ONMN8O8$ONNMMMNNMMMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMNNNNMMM8888D888888OZZZ$ZZ7I??+++==+=??II???7I77II??III7$Z8OO8D8NNMMD888DNMMNMNMNMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNMNNND88888O88DD8OOOO8ZZ$77??+??+7I+I7I7$$$$II$7I$O$OOOON8NNNNNNMNDDDNNMMNNMNMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNNNNNNNNNM888O8888ODDNNDNND8Z$7$7?7$777$IOOZZO8$77$$ZZDD8DNNN8NMNNNNNNNNMNNNNNMMMMMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNMD8O88888D8DDNMMMMMOO7$78ZZ8ZODOOO8D8ZZOOO8DNNNMNNNNNMMMMMMMMNMNNNNNNMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMNNNNNNNNNNNM8888D88DDDNNNNNMD888DDDO8OOODDDNNNNNNDNNNNMNMMNNNMMMMMMMMMMMMMNNNNNMMMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNNNNMNNNNNNNMD888888DDDNNMMD8OOZOO8NMMMNDDNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNMNMMMMMMDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMNNNNNNMNNNNM8888888OOOOOOOO$Z$$$ZOO8DNNMNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMNDNNMMMMMMNDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNNNNNNNNNM8O888888OOO8ZOZ$Z$ZZZ7ZOO8D8DDDD8DDDNNNNMMMNMNMMNMMMMMMMMMMMNNDNNNMMMMMDDNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNNNNNNNNNNNMNI88O88DOZO$Z$OZZ$ZZZ$OZO88888888DDDNNNNNDNNNNNNNNNNMNNMNMNNNNNNNNNMNMMNDDNMMMMMMMMNMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMNNNNNMNN778OO888OOOZOOZOOOZZZOZZO8888DDDDDNDNDNDNDNNNDNNNNNNMMNNNDNNNNNNNNNMMNDDNDNMMMMMMMMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNMNNNN$+?OOOO8DD8OOOOOOOOO$OOO8888DDDDNDDNNDNNN8DDDD8NNDNNNNNNDNDNNNNNNNMNNNDDDDNNMMMMMMMMNNMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMNMMNNNND$?+$OOOO8888888OOO8OO88888DDDDNNNNNNNNND8D8D8NNNNNNNNNNNNNNNNNNNNNNNNDDDDDNNMMMMMMMMMNMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNO$I?++OOOO88DDD888888888O88DDDNNNNNNNNNDD8DND88DNNNNNNNNNNNDNNDNNNMMNDDDDDDNNNMMMMMMMMMMMNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNZ$7?+++OOOOZ88888O888888888888DDDNNDN8888D88O88DDNNNNNNNNNNNNNNNNMMDDDDDDDDDDNMMMMMMMMMMMNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNN$77I?+==7ZOZZ$ZOO888888OOO8D8O8888D8OOZ$ODDO8O8DNDNNNNNNNNDNNNMMMD888DDDDDDDDDMMMMMMMMMMMMNNMNMNMNMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNDNNNNDNNNNN7777?++==+ZZZZ$$ZZOO8O88OZOOZZZOZOO$ZZZOOZOZZ88DDNNNNNNNNNNNNNNNOZO888DDDDDDDDNMMMMMMMMMMMMMNMMNMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNDDNNNNNNNNNNNNN777I??++==+$ZZ$$ZZOZOOZZOOOZZZZZZO$$Z$ZZOOZO8ODNNNNNNNNNNNNMNDN$$ZO8888888D8DDNMMNMMMMMMMMMMNNNNMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNMMMNDNNNNNNNNNNNNNDN$7II???+++===$ZOZZ$ZZ8OOOOOOZZZ$O7ZZ$$ZZZZZ8O8DNNNNNMMNNNNNNN7I7ZZZO8OOO888888DNMDDNMMMMMMMMMNMMMMNNMMMMMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMMMMMMMNDNNNMNNNMNDDDDDNDNNNNNNNNNDNO7II??+?+++===+OOOZZZ$ZOOOO8ZOZZZZO7ZZ$7$$ZODDNNNMMMMMNNN8DD??I$$ZZOOZOOOOOO88DDNNONMMMMMMMMMMMNMNNMNMNNMMMMMMMMMMMMMMMMMM.   
 .MMMMMMMMMMMMMMMMMNNNNNMMMMMMNMMNDDDNDNNNNNNNNNNDNNNNN7II?++++++++==++$ZZZZZZZOZOOOOZZO$Z$ZZOOO8DNNNMMMMMNNNDDD++?7777$ZZZZZZZOZOO8D8DNZDNMNMMNMMMMMMMMNNMMNDNNMNNNNMMMMMMMMMMM.   
 .MMMMMMMMMMMMMNNNNMNNMNNNNNNNMMN88DDDDDDDDNNDDNNNNDDNMII?I?++++++++====+Z$$77$Z$ZZOOOZO$OO$ZZO8NNNMMMMMMNNDDD7++?I7I77$$$$7$ZZZZOO888DM78NNMMMMMMMNMMNNMMNMNNNNNNNNNMNNMMMMMMMM.   
 .MMMMMMMNMMMMMMMMMNMNNNMNNNNMMDDDDDDNNNNDDDDNDNNDDDNMMI????+===+=+=+======?Z$$$$$$ZZOOO8$OOZOODMMMMMNNNMNDDZ=++?IIII777777777$$ZOOO$ZODI7NNMNNMMMMMNMMMMMNNNMMNNNNNNNNNNNNMMMMM.   
 .MMMMMMMMMMMMNMMNNNNNNNNNNNNNDDDDDDDDDDDDDNDNDDDNNNNNM$I???+========+++=====+OZZZZZZZOO88OO8DDDMMMMMNNDD8D++++???I?II7I7II777$ZZOO$7Z$8??NNMMNNMMNMNMMMNMMNNNMMMNDNNNNNNNNNNNNN.   
 .MMMMMMMMMMMMMMNNNNNNMNNNNND8DDDDDNDDDDDNDDNDNNNDNDDNMO????+===========+======+O$OZ88D888OD8DNNMMMMNDD8D+===???+???IIIIIIII7$$ZZZ7II7$O++NNNMMNMMNNMMMMNNNMNNNNMNMNNNNNNNNNMNNN.   
 .MMMMMMMMMNNNNNNNNNNNNNNNND88DDDDDDDDDDDDNDDDDDNMNDNDMD?????+=====~=~============888DDDDDDDDNNNNMNNDD8?==+????+++???????II77$$$$77?II7Z==NNMMMMMMMMMMMNMNMMMMMMMMMMNDNDNNNNNNNN.   
 .MMMMMMMNNNMNNNNNNNNNNNNDDDDDNDDDDDDDDDDNDDNDDDNNNNDNMN??????+===~~~~~~~=~===~====+O88DD8NNNNNNNNNDN====++??++++??I???IIII777$7III+II?7==NNMMMMMMMMMMMNMMNMMMMNMMMMNMDNNNNNNNNN.   
 .MMMMNMMNNNNNNNNNNNNNMNDD8DDDDDDDDDDDDDDDDDDDNMDNNNDNNM+?+???++===~~~~~~~~~~~~~~=====NOO8NNNNNNDNN7====++++++++????????IIIIIIII??+???II~~MNMMMMMMMMMMMMMMMNNMNMMMMMMMNNNNNNNNNN.   
 .MMMMMMNNNMNNNNNNNNNNNDDD8DDNDDDDDDDDDNDDDDDDNNNNNNDDMN?++???+++===~~~~~~~~~~~~=~~~=~=I?DNNNNNNN~~~~~=====++++++??++????I?I????+++++??+~~DNNMMMMMMMMMMMMMMMNNNMNNNMMMMMMNNNNNNN.   
 .MMMMMMMNNNNNMMNNNNNDDDDDDDDDDDDNDNDDNDDDDDDNNNNNNNDNNNI+++++++?+===~~~~~~~~~=~:::~~IMMDZZ8887+=~~:~:~====++++????????+?+????+++==+=+7=~~8NNNNMMMMMMMMMMMMMMNMMMMNMMMMMMMNNNNNN.   
 .MMMNMNNNNNNNNNNNNDDDDDDDDDDDDDDDDDDDNDDDDNNNNNNNNNDNNNI+===+++++=====~~~~~~=::~:~OO$$O$O7$$7?+O$O~::~=~==?+++??+++?+++?++++++=+=~=++O=~~$NMNNNNMMMMMMMMMMMMMNNMMMMMMMNMMMNNNNN.   
 .MMMMNNNNNNNNNNNNDDDDDDNDDDDDNDDDDDDNDDDDNNNNNNNNNNDNNN7======+++=++=====~~~~:::=ZIOI?O?N=+ZDZZNZNDD:==~=+???+++???++++++++=+===~==?=D=~~IMMNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMNNNNN.   
 .MMMNNNNNNNNNNMNDDDDDDNNDDDDDDDDNDDDDDDDMNNNNNNNNNNDDNM$========++======~~~~:~:M?8II+DZ7$I7ODNOO8DNMN7===?+?+?????++++++++===========N+:~?MMNNNNMNNMMMMMMMMMMMMNMMMMMNMMMMMMMNN.   
 .MNMNNNNNNNNNNNDDDDDDDNDDDDDNDDDDDDDDDNNNNNNNMNNNNNDNNNZ+=========+=====~~~~:~MD$$~$8:MD?8+IZZ$=$$$N8NI~==?????+?+++++++====~=~====+=M?~~?MNNNMNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMN    
 .MMNNNNNNNNNNDDDDDDDDDDDDDDDDNNDDDDDDNNDNNNNNNNNNNNNNNNO+===============+~~~+MNNZ=IDZO?78D7++$Z+OO$NNNMM~=++?I?++++++++=====~=======+MI~~IMNNMNMNNNMMNMMMMMMMMMMMMMMMMMMMMMMMNM.   
 .MMNNNNNNNNNDNDNNDDNNDDNNNNDDNDDDDDNNNNNNNNNNNNNNNNDNNNO===============+~~~?MMO88NN+$DNNMD8~I+7OO88NMMMMM~++II???++++++=============?MI~~7MNMNMMMMNNNMMMMMMMMMMMMMMMMMMMMMMMMMM.   
 .MNNNNNNNNNDDDDDDDDDDDDDDDDDDNDDDNMNNNNNNNNNNMNNNNNNNNM8+=============~=~~=MMDNOM~NDNN8NDO?$=$?O$$OMMMMMMM~+?+I??+++++=====~========?MI~=IMNNMMMNMMMNNNNMMMMMMMMMMMMMMMMMMMMMMM.   
 .MNNNNNNNNNMNNNNNDDDNDNNDDDDDDDDMMNNNMNNNNNMMMMNNNNNNNN8++=========+===~=$MMMMM$D$7IZ=+?~Z~$88NZ7IZMMMMMMMM+?=??+??++++===========+=7MI~~IMMMMNNNNMMNNNNNMMMMMMMMMMMMMMMMMMMMMM.   
 .MNNNNNNNNNMMMNNDDDDNDNNNDDNDDNNNNNNNMNNNNMMMNMNNNNNNNM8+++==++==+======+MMMMMMZNO7?=ZZ+=:$7DZ?N$NZMMMMMMMDZ+~?++I?++++=============$M7==IMMNMMMNMNMNNNNNNMNMMMMMMMMMMMMMMMMMMM.   
 .MNNNNNNNNMMMMMMMNDNDNDDDDDNNNNNNNNNNNMNNMNNMMMNNNNNNNMD+++======++=+=+OMMMMMM878MD7DNZ8==+7Z8Z8NOMMMMMMMNZ?===++++?+++=========~++=ZM$==?MMMNMMNNMNNNNNNNMNNMMMMMMMMMMMMMMMMMM.   
 .MMNNNNNNNNMNNMMMMMNNNDDDDDNNNNDNNNNMNNNNMMNNMMNNNNNNNMD+=+==+=++++++=?MMMMMNZI=7ND$+8+?O~~~+8IM$DNMMMMMMD7+~~~+~+???+++++=====+~=+=$MZ===MMMMMMMMMNMNNNNNNNNNMMMMMMMMMMMMMMMMM.   
 .MNMNNNNNNMNMNNMMMMMMMNNNNDNNNNNNNMNNNMNNMMMMMMMNNNNMMMN?++==++=+=+?=ZMMMMDZI+===I$DNND+O$IIONOZDMMMMMMMDZ?=~~==+?=+++?++=+========+7MZ==+MMMMMMNNMNMNMNNNNMNNNNMMMMMMMMMMMMMMM.   
 .MNNNNNMNNMNMNNNMNMMMMMNDDNNNNNNNNNNNNNMNMMMMMMNNNNNNNMN?++=++++=+=+IMMMN$I?++=~====NN$O$?:7OZZO8NMMMMMM87+=======?=++=++~=++=+==+==IMO==+MMMMMMMMMNNNNNNNNNNNMNNMMMMMMMMMMMMMM.   
 .MNNNNNMNNNNNNNNNNNNMNNDDNNNNNNNNNNNNNMMNNMMMMMMMNNNNNMN?++++++++++ZMMD7I+??+====~~=~N?DDN$Z8NMZONMMMMMMO7+======~=+7+=+=++==+===+++IMO==+MMMMNNMMMMNNNNNNNNNNNNMNNMMMMMMMMMMMM.   
 .MNNNNNNNNNNMNNMNMMNNDNDNNNNNNNNNNNMNNMMNMMMMMMMNNNNNMMNI+++++?+++$MNII??+?++==~=~=~~~OOI??ON8ZMZMMMMMMMO7?===~=~==+??7+=+++++:==+++IM8+=?MMMMMMMMNMNMNNNMNNNNNNNNNNMMMMMMMMMMM.   
 .MNNNNMNMNMNNMNNNNDDDNDDNNNNNNNNNNNNMMNMMMMMMMMMNNNNNNNMI+=+++++=8N++???++++++===~~~~~:Z??+M7NDMMMMMMMMM8$I++=~~~==+?+++?I=+++++++++?M8+=+MMMMMNMMNMMMNNNNNNNNNNNNNNNNMMMMMMMMM.   
 .MNNMNNNNNNNNNMNDDDDDNNNNNNNNNNNNNNNNMMNMMMMMMMNNNNNMNMM7+++?++=O+++????++++=+==~~~~~:ZZOZ78D7ZMMNMMMMMM8$?+=~~~~=++?++===?I=+++++++?M8+=+MMMMMNNNMMMMNNMNMNNNNNNNNNNNNMMMMMMMN.   
 .MNNMNNMNMNNNNDDDNNNNNNNNNNNNNNMNNNMMNMMMMMMMMMMNNNNNNMM$++++++D++++?????++======~~~~D8$$NMMOZDONMNMMMMM87++=~~~==++++======+I+=+++??MD+=+NMMMNMMMMMNMNMMNMNNNNNNNNNNNNNMMMMMNN.   
 .MNNNNNMNNNNDNNNDDNNNNNDNNNNNNNMMNMMMMMMMMMMMMMNNNNNNNNM$??++7D=++++??+??++======~==~8Z877NNMO?DMMMZMMMNO7+=~~~===+++=========?I=+=??MD==+NMMMNMMMMMMMMMNNNNNNNNNNNNNNNNNMMNMNN.   
 .MNNNNNMNNNDNDNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMNNNNMNM8??+Z+++++=+?????++=========8O+?ZZM$MZ8DM8MNDNMMO$=~~~~==++++========+?++II?$M8==+DMMMMMMMNMMMMNMNMMNNNNNNNNNNNNNNNMMMN.   
 .MMMNMMMNNDNNNNNNNDNNNNNNNNNNNNMMMMMMMMMMMMMMMMMNNNMNMNMN??O?++++++++????+++===+===$ON=8?ZMND8NODNMM8NMM8$?~====+++=+=========++++=?7O7==+OMMMMMMMMMMNMMNMMNNNNNNNNNNNNNNMNNNMN.   
 .MMMNMNNMNNNNNNDNNNNNNNNNNNNNNNNMMMNMMMMMMMMMMMMMNNMNMMMMZZ++++++++++???+??++=====+I$N8OZMDMN8MD8M8MM$MNM8I?===+++=====~=====+++++=======+OMMMMMMMNMMMMMMNMNNNNNNNNNNMNNNNNNNNN.   
 .MMMMNNMNNNDNNNNNNNNNNNNNNNNMNNNMNMMMMMMMMMMMMMNNNNMNMMNN$++++++++++=++?+??++++==~888ZDZDMNMMZZIOONMMMO8MNZI+===+=====~=~====+++++=======+OMMNMMMMMMMMMMMMNMNNNNNNNNNNNNNNNNNNN.   
 .MNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMMMMMMMMMMMMMMMMNNNMMMMNN$?+++?++++++++?++?+++===N+I?Z$$M$MDNZ8ONDMNMMMONMDZI?+=+=====~======++++=========8MMNNMMMMMMMMMMMNMMMMNNNNNNNNNNNNNNNN.   


The official currency of the World Economic Forum 

Circulating supply: 100,000,000 tokens
Max wallet: 3% (3,000,000 tokens)

https://medium.com/@World_Economic_Forum

*/


// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "@openzeppelin/[email protected]/access/Ownable.sol";
import "@openzeppelin/[email protected]/token/ERC20/ERC20.sol";

contract Nothing is Ownable, ERC20 {

    mapping(address => bool) private pair;
    bool public tradingOpen;
    uint256 public _maxWalletSize = 3000000 * 10 ** decimals();
    uint256 private _totalSupply = 100000000 * 10 ** decimals();

    constructor() ERC20("Nothing", "Klaus") {
        _mint(msg.sender, 100000000 * 10 ** decimals());
    }

    function addPair(address toPair) public onlyOwner {
        require(!pair[toPair], "Pair excluded");
        pair[toPair] = true;
    }

    function setTrading(bool _tradingOpen) public onlyOwner {
        tradingOpen = _tradingOpen;
    }

    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {
        _maxWalletSize = maxWalletSize;
    }

    function removeLimits() public onlyOwner{
        _maxWalletSize = _totalSupply;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

       if(from != owner() && to != owner()) {

            if (!tradingOpen) {
                require(from == owner(), "Trading is not opened");
            }

            if(from != owner() && to != owner() && pair[from]) {
                require(balanceOf(to) + amount <= _maxWalletSize, "Maximum wallet token balance exceeded");
            }
            
            if(from != owner() && to != owner() && !(pair[to]) && !(pair[from])) {
                require(balanceOf(to) + amount <= _maxWalletSize, "Maximum wallet token balance exceeded");
            }

       }

       super._transfer(from, to, amount);

    }

}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}