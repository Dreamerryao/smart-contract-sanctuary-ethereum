pragma solidity ^0.4.24; library SafeMath { function mul(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a / b; return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a && c >= b); return c; } } interface notifier { function deposit(address user, uint amount) external; function withdraw(address user, uint amount) external; function rentModified(uint256 amount) external; function ticket(bool ticketOpen) external; function approved(address user) external; function dispute(bool ongGoing, address user) external; function admin(address user) external returns (bool); } contract RentalAgreement { using SafeMath for uint256; notifier public Notifier; address public landlord; address public tenant; uint256 public rent; bool public agreementApproved; uint256 public lockedAmount; uint256 public availableAmount; bool public ticketOpen; bool public onGoingDispute; address public disputeStartedBy; uint256 public lastDepositAmount; uint256 public lastWithdrawalAmount; /*-----Rental Agreement Clauses-----*/ /*General*/ uint256 public selectedPropertyID = 2; string public selectedCountry ='VEN'; uint256 public selectedStateID = 2; uint256 public dateLeaseStarts = 1532152914; uint256 public leaseDateSelected = 2; uint256 public dateLeaseEnds = 0; uint256 public renewalSelected = 2; /*Property*/ uint256 public selectedAccessToParking = 2; /*Parties*/ uint256 public selectedOccupantsOptions = 2; /*Terms*/ uint256 public selectedRentFrequency = 3; uint256 public rentAgreed = 580000000000000000; uint256 public paymentDateDay = 4; uint256 public paymentDateMonth = 0; uint256 public selectedincrementNotice = 2; uint256 public daysNoticeBeforeIncreasingRent = 37; uint256 public selectedPetsAllowance = 2; uint256 public selectedSmokingAllowance = 1; uint256 public selectedLatePayment = 4; uint256 public latePaymentAmount = 10000000000000000; uint256 public selectedUtilitiesDetails = 3; uint256 public electricity = 1; uint256 public water_sewer = 2; uint256 public internet = 1; uint256 public cable = 2; uint256 public telephone = 2; uint256 public naturalGas = 2; uint256 public heatingOil_propane = 2; uint256 public garbageCollection = 1; uint256 public alarm_securitySystem = 2; /*Final details*/ uint256 public selectedDisputeResolution = 2; uint256 public selectedDisputeResolutionCost = 1; uint256 public selectedAdditionalClause = 2; event Approved(address user); event Deposit(address user, uint amount); event Withdraw(address user, uint amount); event RentModified(uint256 amount); event Ticket(bool open); event Dispute(bool ongGoing, address user); constructor() public { Notifier = notifier(0x694F73849C686973597e34133981F0BcB51644cb); landlord = msg.sender; /*Landlord's address*/ tenant = 0x00de09b417fe66e934754fefb87c9695a6e2e32b; /*Tenant's address*/ rent = 580000000000000000; /*rent amount*/ } /*Tenant approves this this agreement*/ function approveAgreement() public { require(msg.sender == tenant); agreementApproved = true; Notifier.approved(tenant); emit Approved(tenant); } /*Tenant deposits the rent*/ function deposit() payable rentalAgreementApproved public { uint amount = msg.value; lastDepositAmount = amount; if(ticketOpen){ lockedAmount = lockedAmount.add(amount); }else{ availableAmount = availableAmount.add(amount); } Notifier.deposit(msg.sender, amount); emit Deposit(msg.sender, amount); } function () payable public { deposit(); } /*Withdraw the money paid*/ function withdraw() rentalAgreementApproved public { require(msg.sender == landlord); uint256 amount = availableAmount; availableAmount = 0; lastWithdrawalAmount = amount; msg.sender.transfer(amount); Notifier.withdraw(landlord, amount); emit Withdraw(landlord, amount); } /*Increase/Decrease the rent*/ function modifyRent(uint newRent) rentalAgreementApproved public { require(msg.sender == landlord); rent = newRent; Notifier.rentModified(rent); emit RentModified(rent); } /*Open a ticket*/ function openTicket() rentalAgreementApproved public { require(msg.sender == tenant); require(!ticketOpen); ticketOpen = true; Notifier.ticket(ticketOpen); emit Ticket(ticketOpen); } /*Close the ticket*/ function closeTicket() public { require(msg.sender == tenant || Notifier.admin(msg.sender)); require(ticketOpen); ticketOpen = false; uint256 amount = lockedAmount; lockedAmount = 0; availableAmount = availableAmount.add(amount); Notifier.ticket(ticketOpen); emit Ticket(ticketOpen); } /*Start dispute*/ function startDispute() rentalAgreementApproved public { require(!onGoingDispute); require(Notifier.admin(msg.sender) || msg.sender == landlord || msg.sender == tenant); disputeStartedBy = msg.sender; onGoingDispute = true; Notifier.dispute(onGoingDispute, disputeStartedBy); emit Dispute(onGoingDispute, disputeStartedBy); } /*End dispute*/ function endDispute() public { require(onGoingDispute); require(msg.sender == disputeStartedBy || Notifier.admin(msg.sender)); onGoingDispute = false; Notifier.dispute(onGoingDispute, disputeStartedBy); emit Dispute(onGoingDispute, disputeStartedBy); } function viewContractState() public view returns(uint256,uint256,uint256,bool,bool,address,uint256,uint256){ return (rent, lockedAmount, availableAmount, ticketOpen, onGoingDispute, disputeStartedBy, lastDepositAmount, lastWithdrawalAmount); } function viewMostRelevantClauses() public view returns(uint256,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256){ return (selectedPropertyID, selectedCountry, selectedStateID, selectedRentFrequency, paymentDateDay, paymentDateMonth, dateLeaseStarts, leaseDateSelected, dateLeaseEnds, renewalSelected); } function viewFirstLotOfClauses() public view returns(uint256,string,uint256,uint256,uint256,uint256,uint256,uint256){ return (selectedPropertyID, selectedCountry, selectedStateID, dateLeaseStarts, leaseDateSelected, dateLeaseEnds, renewalSelected, selectedAccessToParking); } function viewSecondLotOfClauses() public view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256){ return (selectedOccupantsOptions, selectedRentFrequency, rentAgreed, paymentDateDay, paymentDateMonth, selectedincrementNotice, daysNoticeBeforeIncreasingRent, selectedPetsAllowance); } function viewThirdLotOfClauses() public view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256){ return (selectedSmokingAllowance, selectedLatePayment, latePaymentAmount, selectedUtilitiesDetails, electricity, water_sewer, internet, cable); } function viewFourthLotOfClauses() public view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256){ return (telephone, naturalGas, heatingOil_propane, garbageCollection, alarm_securitySystem, selectedDisputeResolution, selectedDisputeResolutionCost, selectedAdditionalClause); } modifier rentalAgreementApproved { require(agreementApproved); _; } }