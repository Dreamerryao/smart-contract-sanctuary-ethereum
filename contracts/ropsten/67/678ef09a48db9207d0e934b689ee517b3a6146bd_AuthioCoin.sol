pragma solidity ^0.4.23;

contract AuthioCoin {
    
    bytes internal constant CONTRACT_IDENTIFIER = hex"608060405234801561001057600080fd5b50610596806100206000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be578063313ce5671461024357806370a082311461026e57806395d89b41146102c5578063a9059cbb14610355578063dd62ed3e146103ba575b600080fd5b3480156100aa57600080fd5b506100b3610431565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061046a565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861047f565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061048d565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b506102586104a3565b6040518082815260200191505060405180910390f35b34801561027a57600080fd5b506102af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a8565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b506102da6104b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031a5780820151818401526020810190506102ff565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036157600080fd5b506103a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104eb565b604051808215151515815260200191505060405180910390f35b3480156103c657600080fd5b5061041b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610500565b6040518082815260200191505060405180910390f35b6040805190810160405280600a81526020017f41757468696f436f696e0000000000000000000000000000000000000000000081525081565b600061047461050b565b506001905092915050565b69152d02c7e14af680000081565b600061049761050b565b50600190509392505050565b601281565b6000429050919050565b6040805190810160405280600481526020017f415554480000000000000000000000000000000000000000000000000000000081525081565b60006104f561050b565b506001905092915050565b600042905092915050565b600060646000523360205260005b606481101561055e57336020517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206000a360208020602052600181019050610519565b50600160005260206000f300a165627a7a723058202c2dabe54ea90f963584c01b50737718184721fda48b26ccce9eaeb017607da20029";
    
    // Constructor - Return contract identifier
    constructor () public {
        bytes memory contract_identifier = CONTRACT_IDENTIFIER;
        assembly { return(add(0x20, contract_identifier), mload(contract_identifier)) }
    }
    
    // Events
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    
    // Constants - name, supply, symbol, decimals
    uint public constant totalSupply = 100000 ether;
    string public constant name = "AuthioCoin";
    string public constant symbol = "AUTH";
    uint public constant decimals = 18;

    // Getters -
    function balanceOf(address _owner) public view returns (uint) { return balances[_owner]; }
    function allowance(address _owner, address _spender) public view returns (uint) { return allowances[_owner][_spender]; }
    
    // Mappings -
    mapping (address => uint) balances;
    mapping (address => mapping(address => uint)) allowances;
    
    function approve(address _spender, uint _amt) public returns (bool) {
        allowances[msg.sender][_spender] = _amt;
        emit Approval(msg.sender, _spender, _amt);
    }
    
    function transfer(address _to, uint _amt) public returns (bool) {
        require(balances[msg.sender] >= _amt);
        balances[msg.sender] -= _amt;
        balances[_to] += _amt;
        emit Transfer(msg.sender, _to, _amt);
    }
    
    function transferFrom(address _from, address _to, uint _amt) public returns (bool) {
        require(balances[_from] >= _amt && allowances[_from][msg.sender] >= _amt);
        balances[_from] -= _amt;
        allowances[_from][msg.sender] -= _amt;
        balances[_to] += _amt;
        emit Transfer(_from, _to, _amt);
    }
}