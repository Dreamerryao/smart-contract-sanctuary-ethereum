pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol";

contract Counter is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public counter;

    /**
    * Public multiplier boolean variable
    */
    bool public multiplierEnabled;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;

	bytes32 constant public emptyBytesHash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(bytes32("")))));

    constructor(uint updateInterval, bool _multiplierEnabled) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      counter = 0;
      multiplierEnabled = _multiplierEnabled;
    }

	function setMultiplierEnabled(bool _enabled) external {
		multiplierEnabled = _enabled;
	}

    function checkMultiplier() external view returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = multiplierEnabled && (counter == 3 || counter == 10);
        if (upkeepNeeded) {
            uint256 multiplier = counter % 2 == 0 ? 10 : 3;
            performData = abi.encodeWithSelector(this.multiplyCounter.selector, multiplier);
        }
        return (upkeepNeeded, performData);
    }

    function checkReset() external view returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = counter > 100;
        performData = abi.encodePacked(bytes4(abi.encodeWithSelector(this.resetCounter.selector, "")));
        return (upkeepNeeded, performData);
    }

    function multiplyCounter(uint256 _amount) external {
        require(multiplierEnabled && (counter == 3 || counter == 10), "Upkeep not satisfied");
        require(counter == _amount, "Only valid multiplier");
        counter *= _amount;
    }

    function resetCounter() external {
        require(counter > 100, "Too early");
        counter = 0;
    }

    function checkUpkeep(bytes calldata checkData)
		external
		view
		override
		returns (bool upkeepNeeded, bytes memory performData)
	{
		if (keccak256(abi.encodePacked(checkData)) == emptyBytesHash) {
			// We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
			upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
			performData = "";
		} else {
            (bool success, bytes memory returnedData) = address(this).staticcall(checkData);
            require(success);

            (upkeepNeeded, performData) = abi.decode(returnedData, (bool, bytes));
        }
    }

    function performUpkeep(bytes calldata performData) external override {
		lastTimeStamp = block.timestamp;
        if (keccak256(abi.encodePacked(performData)) == emptyBytesHash) {
			// We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
			counter = counter + 1;
		} else {
            (bool success, ) = address(this).call(performData);
            require(success);
        }
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface KeeperCompatibleInterface {
  /**
   * @notice method that is simulated by the keepers to see if any work actually
   * needs to be performed. This method does does not actually need to be
   * executable, and since it is only ever simulated it can consume lots of gas.
   * @dev To ensure that it is never called, you may want to add the
   * cannotExecute modifier from KeeperBase to your implementation of this
   * method.
   * @param checkData specified in the upkeep registration so it is always the
   * same for a registered upkeep. This can easilly be broken down into specific
   * arguments using `abi.decode`, so multiple upkeeps can be registered on the
   * same contract and easily differentiated by the contract.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with, if
   * upkeep is needed. If you would like to encode data to decode later, try
   * `abi.encode`.
   */
  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);

  /**
   * @notice method that is actually executed by the keepers, via the registry.
   * The data returned by the checkUpkeep simulation will be passed into
   * this method to actually be executed.
   * @dev The input to this method should not be trusted, and the caller of the
   * method should not even be restricted to any single registry. Anyone should
   * be able call it, and the input should be validated, there is no guarantee
   * that the data passed in is the performData returned from checkUpkeep. This
   * could happen due to malicious keepers, racing keepers, or simply a state
   * change while the performUpkeep transaction is waiting for confirmation.
   * Always validate the data passed in.
   * @param performData is the data which was passed back from the checkData
   * simulation. If it is encoded, it can easily be decoded into other types by
   * calling `abi.decode`. This data should not be trusted, and should be
   * validated against the contract's current state.
   */
  function performUpkeep(bytes calldata performData) external;
}