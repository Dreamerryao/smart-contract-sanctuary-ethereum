/**
 *Submitted for verification at Etherscan.io on 2021-08-30
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

// 0x7f06cec5fb54c2fede80629beb4481fcb93c8c84

pragma solidity ^0.8.0;

interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}

pragma solidity ^0.8.0;

interface KeeperCompatibleInterface {

  /**
   * @notice checks if the contract requires work to be done.
   * @param checkData data passed to the contract when checking for upkeep.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with,
   * if upkeep is needed.
   */
  function checkUpkeep(
    bytes calldata checkData
  )
    external
    returns (
      bool upkeepNeeded,
      bytes memory performData
    );

  /**
   * @notice Performs work on the contract. Executed by the keepers, via the registry.
   * @param performData is the data which was passed back from the checkData
   * simulation.
   */
  function performUpkeep(
    bytes calldata performData
  ) external;
}

contract Counter is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint256 public counter;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint256 public lastTimeStamp;
    uint256 public perform;

    enum GameState {
        NewGame,
        OnGoing,
        EndGame
    }
    
    struct Game {
        uint256 gId;
        uint256 startTime;
        GameState gameState;
        address owner;
    }
    
    mapping(uint8 => Game) public games;
    
    constructor(uint updateInterval) {
        lastTimeStamp = block.timestamp;
        games[1] = Game(
            {
                gId: 1,
                startTime: block.timestamp + updateInterval,
                gameState: GameState.NewGame,
                owner: msg.sender
            }
        );
        
        counter = 0;
    }

    function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData) {
        (uint8 a, address b) = abi.decode(checkData, (uint8, address));
        
        Game memory game = games[a];
        
        upkeepNeeded = (block.timestamp > game.startTime && game.gameState == GameState.NewGame && game.owner == b);
        performData = abi.encode(a, block.timestamp);
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata performData) external override {
        lastTimeStamp = block.timestamp;
        counter = counter + 1;

        (uint8 a, uint256 b) = abi.decode(performData, (uint8, uint256));
        games[a].gameState = GameState.OnGoing;
        perform = b;
        
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
    
    function resolve(uint8 a, uint256 b) public {
        Game storage game = games[a];
        game.startTime = block.timestamp + b;
        game.gameState = GameState.NewGame;
        delete perform;
    }
}