// SPDX-License-Identifier: UNLICENSED
// Generated by bytecode.zip
pragma solidity ^0.8.20;

struct Monaco__CarData {
	uint32  balance;
	uint32  speed;
	uint32  y;
	uint32  shield;
	address  car;
}

/// @dev Wrapper for the zipped contract @ 0xeAfcB479D1Df739eDE0312EF6C868cC5754A0a9E.
contract Poop {
	address constant ZIPPED = 0xeAfcB479D1Df739eDE0312EF6C868cC5754A0a9E;

	function sayMyName()
		external view
		returns (string memory )
	{ __forwardToZipped(); }

	function takeYourTurn(address  ,Monaco__CarData[] calldata allCars,uint256[] calldata ,uint256  ourCarIndex)
		external view
	{ __forwardToZipped(); }


	function __forwardToZipped() private view {
		function () fwd = __forwardToZippedNonView;
		function () view vfwd;
		assembly ("memory-safe") { vfwd := fwd }
		vfwd();
	}

	function  __forwardToZippedNonView() private {
		assembly ("memory-safe") {
			calldatacopy(0x00, 0x00, calldatasize())
			let s := delegatecall(gas(), ZIPPED, 0x00, calldatasize(), 0x00, 0x00)
			returndatacopy(0x00, 0x00, returndatasize())
			if iszero(s) {
				revert(0x00, returndatasize())
			}
			return(0x00, returndatasize())
		}
	}
}